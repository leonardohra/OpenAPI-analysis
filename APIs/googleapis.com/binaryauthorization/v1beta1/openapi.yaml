openapi: 3.0.0
servers:
  - url: 'https://binaryauthorization.googleapis.com/'
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: |
    The management interface for Binary Authorization, a system providing policy control for images deployed to Kubernetes Engine clusters.
  license:
    name: Creative Commons Attribution 3.0
    url: 'http://creativecommons.org/licenses/by/3.0/'
  termsOfService: 'https://developers.google.com/terms/'
  title: Binary Authorization
  version: v1beta1
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.7.31
      format: google
      url: 'https://binaryauthorization.googleapis.com/$discovery/rest?version=v1beta1'
      version: v1
  x-preferred: false
  x-providerName: googleapis.com
  x-serviceName: binaryauthorization
externalDocs:
  url: 'https://cloud.google.com/binary-authorization/'
tags:
  - name: projects
paths:
  '/v1beta1/{name}':
    delete:
      description: |-
        Deletes an attestor. Returns NOT_FOUND if the
        attestor does not exist.
      operationId: binaryauthorization.projects.attestors.delete
      parameters:
        - description: |-
            Required. The name of the attestors to delete, in the format
            `projects/*/attestors/*`.
          in: path
          name: name
          required: true
          schema:
            type: string
          x-reservedExpansion: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Empty'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
    get:
      description: |-
        Gets an attestor.
        Returns NOT_FOUND if the attestor does not exist.
      operationId: binaryauthorization.projects.attestors.get
      parameters:
        - description: |-
            Required. The name of the attestor to retrieve, in the format
            `projects/*/attestors/*`.
          in: path
          name: name
          required: true
          schema:
            type: string
          x-reservedExpansion: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Attestor'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
    parameters:
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
    put:
      description: |-
        Updates an attestor.
        Returns NOT_FOUND if the attestor does not exist.
      operationId: binaryauthorization.projects.attestors.update
      parameters:
        - description: |-
            Required. The resource name, in the format:
            `projects/*/attestors/*`. This field may not be updated.
          in: path
          name: name
          required: true
          schema:
            type: string
          x-reservedExpansion: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attestor'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Attestor'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
  '/v1beta1/{parent}/attestors':
    get:
      description: |-
        Lists attestors.
        Returns INVALID_ARGUMENT if the project does not exist.
      operationId: binaryauthorization.projects.attestors.list
      parameters:
        - description: |-
            Required. The resource name of the project associated with the
            attestors, in the format `projects/*`.
          in: path
          name: parent
          required: true
          schema:
            type: string
          x-reservedExpansion: true
        - description: |-
            Requested page size. The server may return fewer results than requested. If
            unspecified, the server will pick an appropriate default.
          in: query
          name: pageSize
          schema:
            type: integer
        - description: |-
            A token identifying a page of results the server should return. Typically,
            this is the value of ListAttestorsResponse.next_page_token returned
            from the previous call to the `ListAttestors` method.
          in: query
          name: pageToken
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListAttestorsResponse'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
    parameters:
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
    post:
      description: |-
        Creates an attestor, and returns a copy of the new
        attestor. Returns NOT_FOUND if the project does not exist,
        INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the
        attestor already exists.
      operationId: binaryauthorization.projects.attestors.create
      parameters:
        - description: Required. The parent of this attestor.
          in: path
          name: parent
          required: true
          schema:
            type: string
          x-reservedExpansion: true
        - description: Required. The attestors ID.
          in: query
          name: attestorId
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attestor'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Attestor'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
  '/v1beta1/{resource}:getIamPolicy':
    get:
      description: |-
        Gets the access control policy for a resource.
        Returns an empty policy if the resource exists and does not have a policy
        set.
      operationId: binaryauthorization.projects.attestors.getIamPolicy
      parameters:
        - description: |-
            REQUIRED: The resource for which the policy is being requested.
            See the operation documentation for the appropriate value for this field.
          in: path
          name: resource
          required: true
          schema:
            type: string
          x-reservedExpansion: true
        - description: |-
            Optional. The policy format version to be returned.

            Valid values are 0, 1, and 3. Requests specifying an invalid value will be
            rejected.

            Requests for policies with any conditional bindings must specify version 3.
            Policies without any conditional bindings may specify any valid value or
            leave the field unset.
          in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IamPolicy'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
    parameters:
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
  '/v1beta1/{resource}:setIamPolicy':
    parameters:
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
    post:
      description: |-
        Sets the access control policy on the specified resource. Replaces any
        existing policy.

        Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
      operationId: binaryauthorization.projects.attestors.setIamPolicy
      parameters:
        - description: |-
            REQUIRED: The resource for which the policy is being specified.
            See the operation documentation for the appropriate value for this field.
          in: path
          name: resource
          required: true
          schema:
            type: string
          x-reservedExpansion: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IamPolicy'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
  '/v1beta1/{resource}:testIamPermissions':
    parameters:
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
    post:
      description: |-
        Returns permissions that a caller has on the specified resource.
        If the resource does not exist, this will return an empty set of
        permissions, not a NOT_FOUND error.

        Note: This operation is designed to be used for building permission-aware
        UIs and command-line tools, not for authorization checking. This operation
        may "fail open" without warning.
      operationId: binaryauthorization.projects.attestors.testIamPermissions
      parameters:
        - description: |-
            REQUIRED: The resource for which the policy detail is being requested.
            See the operation documentation for the appropriate value for this field.
          in: path
          name: resource
          required: true
          schema:
            type: string
          x-reservedExpansion: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
          description: Successful response
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      tags:
        - projects
components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
          - '1'
          - '2'
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        default: json
        enum:
          - json
          - media
          - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        default: true
        type: boolean
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
  requestBodies:
    Attestor:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attestor'
  schemas:
    AdmissionRule:
      description: |-
        An admission rule specifies either that all container images
        used in a pod creation request must be attested to by one or more
        attestors, that all pod creations will be allowed, or that all
        pod creations will be denied.

        Images matching an admission whitelist pattern
        are exempted from admission rules and will never block a pod creation.
      properties:
        enforcementMode:
          description: Required. The action when a pod creation is denied by the admission rule.
          enum:
            - ENFORCEMENT_MODE_UNSPECIFIED
            - ENFORCED_BLOCK_AND_AUDIT_LOG
            - DRYRUN_AUDIT_LOG_ONLY
          type: string
        evaluationMode:
          description: Required. How this admission rule will be evaluated.
          enum:
            - EVALUATION_MODE_UNSPECIFIED
            - ALWAYS_ALLOW
            - REQUIRE_ATTESTATION
            - ALWAYS_DENY
          type: string
        requireAttestationsBy:
          description: |-
            Optional. The resource names of the attestors that must attest to
            a container image, in the format `projects/*/attestors/*`. Each
            attestor must exist before a policy can reference it.  To add an attestor
            to a policy the principal issuing the policy change request must be able
            to read the attestor resource.

            Note: this field must be non-empty when the evaluation_mode field specifies
            REQUIRE_ATTESTATION, otherwise it must be empty.
          items:
            type: string
          type: array
      type: object
    AdmissionWhitelistPattern:
      description: |-
        An admission whitelist pattern exempts images
        from checks by admission rules.
      properties:
        namePattern:
          description: |-
            An image name pattern to whitelist, in the form `registry/path/to/image`.
            This supports a trailing `*` as a wildcard, but this is allowed only in
            text after the `registry/` part.
          type: string
      type: object
    Attestor:
      description: |-
        An attestor that attests to container image
        artifacts. An existing attestor cannot be modified except where
        indicated.
      properties:
        description:
          description: |-
            Optional. A descriptive comment.  This field may be updated.
            The field may be displayed in chooser dialogs.
          type: string
        name:
          description: |-
            Required. The resource name, in the format:
            `projects/*/attestors/*`. This field may not be updated.
          type: string
        updateTime:
          description: Output only. Time when the attestor was last updated.
          format: google-datetime
          type: string
        userOwnedDrydockNote:
          $ref: '#/components/schemas/UserOwnedDrydockNote'
          description: 'A Drydock ATTESTATION_AUTHORITY Note, created by the user.'
      type: object
    AttestorPublicKey:
      description: |-
        An attestor public key that will be used to verify
        attestations signed by this attestor.
      properties:
        asciiArmoredPgpPublicKey:
          description: |-
            ASCII-armored representation of a PGP public key, as the entire output by
            the command `gpg --export --armor foo@example.com` (either LF or CRLF
            line endings).
            When using this field, `id` should be left blank.  The BinAuthz API
            handlers will calculate the ID and fill it in automatically.  BinAuthz
            computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as
            upper-case hex.  If `id` is provided by the caller, it will be
            overwritten by the API-calculated ID.
          type: string
        comment:
          description: Optional. A descriptive comment. This field may be updated.
          type: string
        id:
          description: |-
            The ID of this public key.
            Signatures verified by BinAuthz must include the ID of the public key that
            can be used to verify them, and that ID must match the contents of this
            field exactly.
            Additional restrictions on this field can be imposed based on which public
            key type is encapsulated. See the documentation on `public_key` cases below
            for details.
          type: string
        pkixPublicKey:
          $ref: '#/components/schemas/PkixPublicKey'
          description: |-
            A raw PKIX SubjectPublicKeyInfo format public key.

            NOTE: `id` may be explicitly provided by the caller when using this
            type of public key, but it MUST be a valid RFC3986 URI. If `id` is left
            blank, a default one will be computed based on the digest of the DER
            encoding of the public key.
      type: object
    Binding:
      description: Associates `members` with a `role`.
      properties:
        condition:
          $ref: '#/components/schemas/Expr'
          description: |-
            The condition that is associated with this binding.
            NOTE: An unsatisfied condition will not allow user access via current
            binding. Different bindings, including their conditions, are examined
            independently.
        members:
          description: |+
            Specifies the identities requesting access for a Cloud Platform resource.
            `members` can have the following values:

            * `allUsers`: A special identifier that represents anyone who is
               on the internet; with or without a Google account.

            * `allAuthenticatedUsers`: A special identifier that represents anyone
               who is authenticated with a Google account or a service account.

            * `user:{emailid}`: An email address that represents a specific Google
               account. For example, `alice@example.com` .


            * `serviceAccount:{emailid}`: An email address that represents a service
               account. For example, `my-other-app@appspot.gserviceaccount.com`.

            * `group:{emailid}`: An email address that represents a Google group.
               For example, `admins@example.com`.

            * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
               identifier) representing a user that has been recently deleted. For
               example, `alice@example.com?uid=123456789012345678901`. If the user is
               recovered, this value reverts to `user:{emailid}` and the recovered user
               retains the role in the binding.

            * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus
               unique identifier) representing a service account that has been recently
               deleted. For example,
               `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
               If the service account is undeleted, this value reverts to
               `serviceAccount:{emailid}` and the undeleted service account retains the
               role in the binding.

            * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique
               identifier) representing a Google group that has been recently
               deleted. For example, `admins@example.com?uid=123456789012345678901`. If
               the group is recovered, this value reverts to `group:{emailid}` and the
               recovered group retains the role in the binding.


            * `domain:{domain}`: The G Suite domain (primary) that represents all the
               users of that domain. For example, `google.com` or `example.com`.

          items:
            type: string
          type: array
        role:
          description: |-
            Role that is assigned to `members`.
            For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
          type: string
      type: object
    Empty:
      description: |-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the request
        or the response type of an API method. For instance:

            service Foo {
              rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
            }

        The JSON representation for `Empty` is empty JSON object `{}`.
      properties: {}
      type: object
    Expr:
      description: |-
        Represents an expression text. Example:

            title: "User account presence"
            description: "Determines whether the request has a user account"
            expression: "size(request.user) > 0"
      properties:
        description:
          description: |-
            An optional description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
          type: string
        expression:
          description: |-
            Textual representation of an expression in
            Common Expression Language syntax.

            The application context of the containing message determines which
            well-known feature set of CEL is supported.
          type: string
        location:
          description: |-
            An optional string indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
        title:
          description: |-
            An optional title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
      type: object
    IamPolicy:
      description: |-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources.


        A `Policy` is a collection of `bindings`. A `binding` binds one or more
        `members` to a single `role`. Members can be user accounts, service accounts,
        Google groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role.

        Optionally, a `binding` can specify a `condition`, which is a logical
        expression that allows access to a resource only if the expression evaluates
        to `true`. A condition can add constraints based on attributes of the
        request, the resource, or both.

        **JSON example:**

            {
              "bindings": [
                {
                  "role": "roles/resourcemanager.organizationAdmin",
                  "members": [
                    "user:mike@example.com",
                    "group:admins@example.com",
                    "domain:google.com",
                    "serviceAccount:my-project-id@appspot.gserviceaccount.com"
                  ]
                },
                {
                  "role": "roles/resourcemanager.organizationViewer",
                  "members": ["user:eve@example.com"],
                  "condition": {
                    "title": "expirable access",
                    "description": "Does not grant access after Sep 2020",
                    "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')",
                  }
                }
              ],
              "etag": "BwWWja0YfJA=",
              "version": 3
            }

        **YAML example:**

            bindings:
            - members:
              - user:mike@example.com
              - group:admins@example.com
              - domain:google.com
              - serviceAccount:my-project-id@appspot.gserviceaccount.com
              role: roles/resourcemanager.organizationAdmin
            - members:
              - user:eve@example.com
              role: roles/resourcemanager.organizationViewer
              condition:
                title: expirable access
                description: Does not grant access after Sep 2020
                expression: request.time < timestamp('2020-10-01T00:00:00.000Z')
            - etag: BwWWja0YfJA=
            - version: 3

        For a description of IAM and its features, see the
        [IAM documentation](https://cloud.google.com/iam/docs/).
      properties:
        bindings:
          description: |-
            Associates a list of `members` to a `role`. Optionally, may specify a
            `condition` that determines how and when the `bindings` are applied. Each
            of the `bindings` must contain at least one member.
          items:
            $ref: '#/components/schemas/Binding'
          type: array
        etag:
          description: |-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each other.
            It is strongly suggested that systems make use of the `etag` in the
            read-modify-write cycle to perform policy updates in order to avoid race
            conditions: An `etag` is returned in the response to `getIamPolicy`, and
            systems are expected to put that etag in the request to `setIamPolicy` to
            ensure that their change will be applied to the same version of the policy.

            **Important:** If you use IAM Conditions, you must include the `etag` field
            whenever you call `setIamPolicy`. If you omit this field, then IAM allows
            you to overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
          format: byte
          type: string
        version:
          description: |-
            Specifies the format of the policy.

            Valid values are `0`, `1`, and `3`. Requests that specify an invalid value
            are rejected.

            Any operation that affects conditional role bindings must specify version
            `3`. This requirement applies to the following operations:

            * Getting a policy that includes a conditional role binding
            * Adding a conditional role binding to a policy
            * Changing a conditional role binding in a policy
            * Removing any role binding, with or without a condition, from a policy
              that includes conditions

            **Important:** If you use IAM Conditions, you must include the `etag` field
            whenever you call `setIamPolicy`. If you omit this field, then IAM allows
            you to overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.

            If a policy does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset.
          format: int32
          type: integer
      type: object
    ListAttestorsResponse:
      description: Response message for BinauthzManagementService.ListAttestors.
      properties:
        attestors:
          description: The list of attestors.
          items:
            $ref: '#/components/schemas/Attestor'
          type: array
        nextPageToken:
          description: |-
            A token to retrieve the next page of results. Pass this value in the
            ListAttestorsRequest.page_token field in the subsequent call to the
            `ListAttestors` method to retrieve the next page of results.
          type: string
      type: object
    PkixPublicKey:
      description: |-
        A public key in the PkixPublicKey format (see
        https://tools.ietf.org/html/rfc5280#section-4.1.2.7 for details).
        Public keys of this type are typically textually encoded using the PEM
        format.
      properties:
        publicKeyPem:
          description: |-
            A PEM-encoded public key, as described in
            https://tools.ietf.org/html/rfc7468#section-13
          type: string
        signatureAlgorithm:
          description: |-
            The signature algorithm used to verify a message against a signature using
            this key.
            These signature algorithm must match the structure and any object
            identifiers encoded in `public_key_pem` (i.e. this algorithm must match
            that of the public key).
          enum:
            - SIGNATURE_ALGORITHM_UNSPECIFIED
            - RSA_PSS_2048_SHA256
            - RSA_PSS_3072_SHA256
            - RSA_PSS_4096_SHA256
            - RSA_PSS_4096_SHA512
            - RSA_SIGN_PKCS1_2048_SHA256
            - RSA_SIGN_PKCS1_3072_SHA256
            - RSA_SIGN_PKCS1_4096_SHA256
            - RSA_SIGN_PKCS1_4096_SHA512
            - ECDSA_P256_SHA256
            - ECDSA_P384_SHA384
            - ECDSA_P521_SHA512
          type: string
      type: object
    Policy:
      description: A policy for container image binary authorization.
      properties:
        admissionWhitelistPatterns:
          description: |-
            Optional. Admission policy whitelisting. A matching admission request will
            always be permitted. This feature is typically used to exclude Google or
            third-party infrastructure images from Binary Authorization policies.
          items:
            $ref: '#/components/schemas/AdmissionWhitelistPattern'
          type: array
        clusterAdmissionRules:
          additionalProperties:
            $ref: '#/components/schemas/AdmissionRule'
          description: |-
            Optional. Per-cluster admission rules. Cluster spec format:
            `location.clusterId`. There can be at most one admission rule per cluster
            spec.
            A `location` is either a compute zone (e.g. us-central1-a) or a region
            (e.g. us-central1).
            For `clusterId` syntax restrictions see
            https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.
          type: object
        defaultAdmissionRule:
          $ref: '#/components/schemas/AdmissionRule'
          description: |-
            Required. Default admission rule for a cluster without a per-cluster, per-
            kubernetes-service-account, or per-istio-service-identity admission rule.
        description:
          description: Optional. A descriptive comment.
          type: string
        globalPolicyEvaluationMode:
          description: |-
            Optional. Controls the evaluation of a Google-maintained global admission
            policy for common system-level images. Images not covered by the global
            policy will be subject to the project admission policy. This setting
            has no effect when specified inside a global admission policy.
          enum:
            - GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED
            - ENABLE
            - DISABLE
          type: string
        name:
          description: |-
            Output only. The resource name, in the format `projects/*/policy`. There is
            at most one policy per project.
          type: string
        updateTime:
          description: Output only. Time when the policy was last updated.
          format: google-datetime
          type: string
      type: object
    SetIamPolicyRequest:
      description: Request message for `SetIamPolicy` method.
      properties:
        policy:
          $ref: '#/components/schemas/IamPolicy'
          description: |-
            REQUIRED: The complete policy to be applied to the `resource`. The size of
            the policy is limited to a few 10s of KB. An empty policy is a
            valid policy but certain Cloud Platform services (such as Projects)
            might reject them.
      type: object
    TestIamPermissionsRequest:
      description: Request message for `TestIamPermissions` method.
      properties:
        permissions:
          description: |-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as '*' or 'storage.*') are not allowed. For more
            information see
            [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
          items:
            type: string
          type: array
      type: object
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      properties:
        permissions:
          description: |-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
          items:
            type: string
          type: array
      type: object
    UserOwnedDrydockNote:
      description: |-
        An user owned drydock note references a Drydock
        ATTESTATION_AUTHORITY Note created by the user.
      properties:
        delegationServiceAccountEmail:
          description: |-
            Output only. This field will contain the service account email address
            that this Attestor will use as the principal when querying Container
            Analysis. Attestor administrators must grant this service account the
            IAM role needed to read attestations from the note_reference in
            Container Analysis (`containeranalysis.notes.occurrences.viewer`).

            This email address is fixed for the lifetime of the Attestor, but callers
            should not make any other assumptions about the service account email;
            future versions may use an email based on a different naming pattern.
          type: string
        noteReference:
          description: |-
            Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note,
            created by the user, in the format: `projects/*/notes/*` (or the legacy
            `providers/*/notes/*`). This field may not be updated.

            An attestation by this attestor is stored as a Drydock
            ATTESTATION_AUTHORITY Occurrence that names a container image and that
            links to this Note. Drydock is an external dependency.
          type: string
        publicKeys:
          description: |-
            Optional. Public keys that verify attestations signed by this
            attestor.  This field may be updated.

            If this field is non-empty, one of the specified public keys must
            verify that an attestation was signed by this attestor for the
            image specified in the admission request.

            If this field is empty, this attestor always returns that no
            valid attestations exist.
          items:
            $ref: '#/components/schemas/AttestorPublicKey'
          type: array
      type: object
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes:
            'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
      type: oauth2
    Oauth2c:
      description: Oauth 2.0 accessCode authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes:
            'https://www.googleapis.com/auth/cloud-platform': View and manage your data across Google Cloud Platform services
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
      type: oauth2
