openapi: 3.0.0
info:
  version: '2018-04-01'
  x-release: v4
  title: Amazon Route 53 Resolver
  description: '<p>Here''s how you set up to query an Amazon Route 53 private hosted zone from your network:</p> <ol> <li> <p>Connect your network to a VPC using AWS Direct Connect or a VPN.</p> </li> <li> <p>Run the following AWS CLI command to create a Resolver endpoint:</p> <p> <code>create-resolver-endpoint --name [endpoint_name] --direction INBOUND --creator-request-id [unique_string] --security-group-ids [security_group_with_inbound_rules] --ip-addresses SubnetId=[subnet_id] SubnetId=[subnet_id_in_different_AZ]</code> </p> <p>Note the resolver endpoint ID that appears in the response. You''ll use it in step 3.</p> </li> <li> <p>Get the IP addresses for the Resolver endpoints:</p> <p> <code>get-resolver-endpoint --resolver-endpoint-id [resolver_endpoint_id]</code> </p> </li> <li> <p>In your network configuration, define the IP addresses that you got in step 3 as DNS servers.</p> <p>You can now query instance names in your VPCs and the names of records in your private hosted zone.</p> </li> </ol> <p>You can also perform the following operations using the AWS CLI:</p> <ul> <li> <p> <code>list-resolver-endpoints</code>: List all endpoints. The syntax includes options for pagination and filtering.</p> </li> <li> <p> <code>update-resolver-endpoints</code>: Add IP addresses to an endpoint or remove IP addresses from an endpoint. </p> </li> </ul> <p>To delete an endpoint, use the following AWS CLI command:</p> <p> <code>delete-resolver-endpoint --resolver-endpoint-id [resolver_endpoint_id]</code> </p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: route53resolver
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/route53resolver-2018-04-01.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/route53resolver/'
servers:
  - url: 'http://route53resolver.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Route53Resolver multi-region endpoint
  - url: 'https://route53resolver.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The Route53Resolver multi-region endpoint
  - url: 'http://route53resolver.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Route53Resolver endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://route53resolver.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Route53Resolver endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/#X-Amz-Target=Route53Resolver.AssociateResolverEndpointIpAddress':
    post:
      operationId: AssociateResolverEndpointIpAddress
      description: '<p>Adds IP addresses to an inbound or an outbound resolver endpoint. If you want to adding more than one IP address, submit one <code>AssociateResolverEndpointIpAddress</code> request for each IP address.</p> <p>To remove an IP address from an endpoint, see <a>DisassociateResolverEndpointIpAddress</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateResolverEndpointIpAddressResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '486':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateResolverEndpointIpAddressRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.AssociateResolverEndpointIpAddress
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.AssociateResolverRule':
    post:
      operationId: AssociateResolverRule
      description: 'Associates a resolver rule with a VPC. When you associate a rule with a VPC, Resolver forwards all DNS queries for the domain name that is specified in the rule and that originate in the VPC. The queries are forwarded to the IP addresses for the DNS resolvers that are specified in the rule. For more information about rules, see <a>CreateResolverRule</a>. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateResolverRuleResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '482':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '483':
          description: ResourceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceUnavailableException'
        '484':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '485':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '486':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateResolverRuleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.AssociateResolverRule
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.CreateResolverEndpoint':
    post:
      operationId: CreateResolverEndpoint
      description: '<p>Creates a resolver endpoint. There are two types of resolver endpoints, inbound and outbound:</p> <ul> <li> <p>An <i>inbound resolver endpoint</i> forwards DNS queries to the DNS service for a VPC from your network or another VPC.</p> </li> <li> <p>An <i>outbound resolver endpoint</i> forwards DNS queries from the DNS service for a VPC to your network or another VPC.</p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResolverEndpointResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '486':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResolverEndpointRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.CreateResolverEndpoint
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.CreateResolverRule':
    post:
      operationId: CreateResolverRule
      description: 'For DNS queries that originate in your VPCs, specifies which resolver endpoint the queries pass through, one domain name that you want to forward to your network, and the IP addresses of the DNS resolvers in your network.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResolverRuleResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '485':
          description: ResourceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceUnavailableException'
        '486':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '487':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResolverRuleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.CreateResolverRule
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.DeleteResolverEndpoint':
    post:
      operationId: DeleteResolverEndpoint
      description: '<p>Deletes a resolver endpoint. The effect of deleting a resolver endpoint depends on whether it''s an inbound or an outbound resolver endpoint:</p> <ul> <li> <p> <b>Inbound</b>: DNS queries from your network or another VPC are no longer routed to the DNS service for the specified VPC.</p> </li> <li> <p> <b>Outbound</b>: DNS queries from a VPC are no longer routed to your network or to another VPC.</p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResolverEndpointResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResolverEndpointRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.DeleteResolverEndpoint
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.DeleteResolverRule':
    post:
      operationId: DeleteResolverRule
      description: 'Deletes a resolver rule. Before you can delete a resolver rule, you must disassociate it from all the VPCs that you associated the resolver rule with. For more infomation, see <a>DisassociateResolverRule</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResolverRuleResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '483':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResolverRuleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.DeleteResolverRule
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.DisassociateResolverEndpointIpAddress':
    post:
      operationId: DisassociateResolverEndpointIpAddress
      description: '<p>Removes IP addresses from an inbound or an outbound resolver endpoint. If you want to remove more than one IP address, submit one <code>DisassociateResolverEndpointIpAddress</code> request for each IP address.</p> <p>To add an IP address to an endpoint, see <a>AssociateResolverEndpointIpAddress</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisassociateResolverEndpointIpAddressResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: ResourceExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceExistsException'
        '484':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisassociateResolverEndpointIpAddressRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.DisassociateResolverEndpointIpAddress
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.DisassociateResolverRule':
    post:
      operationId: DisassociateResolverRule
      description: '<p>Removes the association between a specified resolver rule and a specified VPC.</p> <important> <p>If you disassociate a resolver rule from a VPC, Resolver stops forwarding DNS queries for the domain name that you specified in the resolver rule. </p> </important>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisassociateResolverRuleResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisassociateResolverRuleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.DisassociateResolverRule
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.GetResolverEndpoint':
    post:
      operationId: GetResolverEndpoint
      description: 'Gets information about a specified resolver endpoint, such as whether it''s an inbound or an outbound resolver endpoint, and the current status of the endpoint.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResolverEndpointResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetResolverEndpointRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.GetResolverEndpoint
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.GetResolverRule':
    post:
      operationId: GetResolverRule
      description: 'Gets information about a specified resolver rule, such as the domain name that the rule forwards DNS queries for and the ID of the outbound resolver endpoint that the rule is associated with.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResolverRuleResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetResolverRuleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.GetResolverRule
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.GetResolverRuleAssociation':
    post:
      operationId: GetResolverRuleAssociation
      description: 'Gets information about an association between a specified resolver rule and a VPC. You associate a resolver rule and a VPC using <a>AssociateResolverRule</a>. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResolverRuleAssociationResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetResolverRuleAssociationRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.GetResolverRuleAssociation
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.GetResolverRulePolicy':
    post:
      operationId: GetResolverRulePolicy
      description: 'Gets information about a resolver rule policy. A resolver rule policy specifies the Resolver operations and resources that you want to allow another AWS account to be able to use. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResolverRulePolicyResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: UnknownResourceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownResourceException'
        '482':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetResolverRulePolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.GetResolverRulePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.ListResolverEndpointIpAddresses':
    post:
      operationId: ListResolverEndpointIpAddresses
      description: Gets the IP addresses for a specified resolver endpoint.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResolverEndpointIpAddressesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '483':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListResolverEndpointIpAddressesRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.ListResolverEndpointIpAddresses
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.ListResolverEndpoints':
    post:
      operationId: ListResolverEndpoints
      description: Lists all the resolver endpoints that were created using the current AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResolverEndpointsResponse'
        '480':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '481':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '482':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '483':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListResolverEndpointsRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.ListResolverEndpoints
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.ListResolverRuleAssociations':
    post:
      operationId: ListResolverRuleAssociations
      description: Lists the associations that were created between resolver rules and VPCs using the current AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResolverRuleAssociationsResponse'
        '480':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '481':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '482':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '483':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListResolverRuleAssociationsRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.ListResolverRuleAssociations
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.ListResolverRules':
    post:
      operationId: ListResolverRules
      description: Lists the resolver rules that were created using the current AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResolverRulesResponse'
        '480':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '481':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '482':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '483':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListResolverRulesRequest'
      parameters:
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.ListResolverRules
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.ListTagsForResource':
    post:
      operationId: ListTagsForResource
      description: Lists the tags that you associated with the specified resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidNextTokenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
        '483':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '484':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.ListTagsForResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.PutResolverRulePolicy':
    post:
      operationId: PutResolverRulePolicy
      description: Specifies the Resolver operations and resources that you want to allow another AWS account to be able to use.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutResolverRulePolicyResponse'
        '480':
          description: InvalidPolicyDocument
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPolicyDocument'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnknownResourceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownResourceException'
        '483':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutResolverRulePolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.PutResolverRulePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.TagResource':
    post:
      operationId: TagResource
      description: Adds one or more tags to a specified resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '483':
          description: InvalidTagException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagException'
        '484':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.TagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.UntagResource':
    post:
      operationId: UntagResource
      description: Removes one or more tags from a specified resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.UntagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.UpdateResolverEndpoint':
    post:
      operationId: UpdateResolverEndpoint
      description: 'Updates the name of an inbound or an outbound resolver endpoint. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResolverEndpointResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResolverEndpointRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.UpdateResolverEndpoint
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=Route53Resolver.UpdateResolverRule':
    post:
      operationId: UpdateResolverRule
      description: 'Updates settings for a specified resolver rule. <code>ResolverRuleId</code> is required, and all other parameters are optional. If you don''t specify a parameter, it retains its current value.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResolverRuleResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ResourceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceUnavailableException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: InternalServiceErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServiceErrorException'
        '486':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResolverRuleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - Route53Resolver.UpdateResolverRule
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AssociateResolverEndpointIpAddressResponse:
      type: object
      properties:
        ResolverEndpoint:
          $ref: '#/components/schemas/ResolverEndpoint'
          description: The response to an <code>AssociateResolverEndpointIpAddress</code> request.
    AssociateResolverEndpointIpAddressRequest:
      type: object
      required:
        - ResolverEndpointId
        - IpAddress
      title: AssociateResolverEndpointIpAddressRequest
      properties:
        ResolverEndpointId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver endpoint that you want to associate IP addresses with.
        IpAddress:
          $ref: '#/components/schemas/IpAddressUpdate'
          description: 'Either the IPv4 address that you want to add to a resolver endpoint or a subnet ID. If you specify a subnet ID, Resolver chooses an IP address for you from the available IPs in the specified subnet.'
    ResourceNotFoundException: {}
    InvalidParameterException: {}
    InvalidRequestException: {}
    ResourceExistsException: {}
    InternalServiceErrorException: {}
    LimitExceededException: {}
    ThrottlingException: {}
    AssociateResolverRuleResponse:
      type: object
      properties:
        ResolverRuleAssociation:
          $ref: '#/components/schemas/ResolverRuleAssociation'
          description: 'Information about the <code>AssociateResolverRule</code> request, including the status of the request.'
    AssociateResolverRuleRequest:
      type: object
      required:
        - ResolverRuleId
        - VPCId
      title: AssociateResolverRuleRequest
      properties:
        ResolverRuleId:
          $ref: '#/components/schemas/ResourceId'
          description: 'The ID of the resolver rule that you want to associate with the VPC. To list the existing resolver rules, use <a>ListResolverRules</a>.'
        Name:
          $ref: '#/components/schemas/Name'
          description: A name for the association that you're creating between a resolver rule and a VPC.
        VPCId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the VPC that you want to associate the resolver rule with.
    ResourceUnavailableException: {}
    CreateResolverEndpointResponse:
      type: object
      properties:
        ResolverEndpoint:
          $ref: '#/components/schemas/ResolverEndpoint'
          description: 'Information about the <code>CreateResolverEndpoint</code> request, including the status of the request.'
    CreateResolverEndpointRequest:
      type: object
      required:
        - CreatorRequestId
        - SecurityGroupIds
        - Direction
        - IpAddresses
      title: CreateResolverEndpointRequest
      properties:
        CreatorRequestId:
          $ref: '#/components/schemas/CreatorRequestId'
          description: 'A unique string that identifies the request and that allows failed requests to be retried without the risk of executing the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp. '
        Name:
          $ref: '#/components/schemas/Name'
          description: A friendly name that lets you easily find a configuration in the Resolver dashboard in the Route 53 console.
        SecurityGroupIds:
          $ref: '#/components/schemas/SecurityGroupIds'
          description: The ID of one or more security groups that you want to use to control access to this VPC. The security group that you specify must include one or more inbound rules (for inbound resolver endpoints) or outbound rules (for outbound resolver endpoints).
        Direction:
          $ref: '#/components/schemas/ResolverEndpointDirection'
          description: '<p>Specify the applicable value:</p> <ul> <li> <p> <code>INBOUND</code>: Resolver forwards DNS queries to the DNS service for a VPC from your network or another VPC</p> </li> <li> <p> <code>OUTBOUND</code>: Resolver forwards DNS queries from the DNS service for a VPC to your network or another VPC</p> </li> </ul>'
        IpAddresses:
          $ref: '#/components/schemas/IpAddressesRequest'
          description: 'The subnets and IP addresses in your VPC that you want DNS queries to pass through on the way from your VPCs to your network (for outbound endpoints) or on the way from your network to your VPCs (for inbound resolver endpoints). '
        Tags:
          $ref: '#/components/schemas/TagList'
          description: A list of the tag keys and values that you want to associate with the endpoint.
    CreateResolverRuleResponse:
      type: object
      properties:
        ResolverRule:
          $ref: '#/components/schemas/ResolverRule'
          description: 'Information about the <code>CreateResolverRule</code> request, including the status of the request.'
    CreateResolverRuleRequest:
      type: object
      required:
        - CreatorRequestId
        - RuleType
        - DomainName
      title: CreateResolverRuleRequest
      properties:
        CreatorRequestId:
          $ref: '#/components/schemas/CreatorRequestId'
          description: 'A unique string that identifies the request and that allows failed requests to be retried without the risk of executing the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp. '
        Name:
          $ref: '#/components/schemas/Name'
          description: A friendly name that lets you easily find a rule in the Resolver dashboard in the Route 53 console.
        RuleType:
          $ref: '#/components/schemas/RuleTypeOption'
          description: Specify <code>FORWARD</code>. Other resolver rule types aren't supported.
        DomainName:
          $ref: '#/components/schemas/DomainName'
          description: 'DNS queries for this domain name are forwarded to the IP addresses that you specify in <code>TargetIps</code>. If a query matches multiple resolver rules (example.com and www.example.com), outbound DNS queries are routed using the resolver rule that contains the most specific domain name (www.example.com).'
        TargetIps:
          $ref: '#/components/schemas/TargetList'
          description: The IPs that you want Resolver to forward DNS queries to. You can specify only IPv4 addresses. Separate IP addresses with a comma.
        ResolverEndpointId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify in <code>TargetIps</code>.
        Tags:
          $ref: '#/components/schemas/TagList'
          description: A list of the tag keys and values that you want to associate with the endpoint.
    DeleteResolverEndpointResponse:
      type: object
      properties:
        ResolverEndpoint:
          $ref: '#/components/schemas/ResolverEndpoint'
          description: 'Information about the <code>DeleteResolverEndpoint</code> request, including the status of the request.'
    DeleteResolverEndpointRequest:
      type: object
      required:
        - ResolverEndpointId
      title: DeleteResolverEndpointRequest
      properties:
        ResolverEndpointId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver endpoint that you want to delete.
    DeleteResolverRuleResponse:
      type: object
      properties:
        ResolverRule:
          $ref: '#/components/schemas/ResolverRule'
          description: 'Information about the <code>DeleteResolverRule</code> request, including the status of the request.'
    DeleteResolverRuleRequest:
      type: object
      required:
        - ResolverRuleId
      title: DeleteResolverRuleRequest
      properties:
        ResolverRuleId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver rule that you want to delete.
    ResourceInUseException: {}
    DisassociateResolverEndpointIpAddressResponse:
      type: object
      properties:
        ResolverEndpoint:
          $ref: '#/components/schemas/ResolverEndpoint'
          description: The response to an <code>DisassociateResolverEndpointIpAddress</code> request.
    DisassociateResolverEndpointIpAddressRequest:
      type: object
      required:
        - ResolverEndpointId
        - IpAddress
      title: DisassociateResolverEndpointIpAddressRequest
      properties:
        ResolverEndpointId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver endpoint that you want to disassociate an IP address from.
        IpAddress:
          $ref: '#/components/schemas/IpAddressUpdate'
          description: The IPv4 address that you want to remove from a resolver endpoint.
    DisassociateResolverRuleResponse:
      type: object
      properties:
        ResolverRuleAssociation:
          $ref: '#/components/schemas/ResolverRuleAssociation'
          description: 'Information about the <code>DisassociateResolverRule</code> request, including the status of the request.'
    DisassociateResolverRuleRequest:
      type: object
      required:
        - VPCId
        - ResolverRuleId
      title: DisassociateResolverRuleRequest
      properties:
        VPCId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the VPC that you want to disassociate the resolver rule from.
        ResolverRuleId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver rule that you want to disassociate from the specified VPC.
    GetResolverEndpointResponse:
      type: object
      properties:
        ResolverEndpoint:
          $ref: '#/components/schemas/ResolverEndpoint'
          description: Information about the resolver endpoint that you specified in a <code>GetResolverEndpoint</code> request.
    GetResolverEndpointRequest:
      type: object
      required:
        - ResolverEndpointId
      title: GetResolverEndpointRequest
      properties:
        ResolverEndpointId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver endpoint that you want to get information about.
    GetResolverRuleResponse:
      type: object
      properties:
        ResolverRule:
          $ref: '#/components/schemas/ResolverRule'
          description: Information about the resolver rule that you specified in a <code>GetResolverRule</code> request.
    GetResolverRuleRequest:
      type: object
      required:
        - ResolverRuleId
      title: GetResolverRuleRequest
      properties:
        ResolverRuleId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver rule that you want to get information about.
    GetResolverRuleAssociationResponse:
      type: object
      properties:
        ResolverRuleAssociation:
          $ref: '#/components/schemas/ResolverRuleAssociation'
          description: Information about the resolver rule association that you specified in a <code>GetResolverRuleAssociation</code> request.
    GetResolverRuleAssociationRequest:
      type: object
      required:
        - ResolverRuleAssociationId
      title: GetResolverRuleAssociationRequest
      properties:
        ResolverRuleAssociationId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver rule association that you want to get information about.
    GetResolverRulePolicyResponse:
      type: object
      properties:
        ResolverRulePolicy:
          $ref: '#/components/schemas/ResolverRulePolicy'
          description: Information about the resolver rule policy that you specified in a <code>GetResolverRulePolicy</code> request.
    GetResolverRulePolicyRequest:
      type: object
      required:
        - Arn
      title: GetResolverRulePolicyRequest
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
          description: The ID of the resolver rule policy that you want to get information about.
    UnknownResourceException: {}
    ListResolverEndpointIpAddressesResponse:
      type: object
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If the specified endpoint has more than <code>MaxResults</code> IP addresses, you can submit another <code>ListResolverEndpointIpAddresses</code> request to get the next group of IP addresses. In the next request, specify the value of <code>NextToken</code> from the previous response. '
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
          description: The value that you specified for <code>MaxResults</code> in the request.
        IpAddresses:
          $ref: '#/components/schemas/IpAddressesResponse'
          description: The IP addresses that DNS queries pass through on their way to your network (outbound endpoint) or on the way to Resolver (inbound endpoint).
    ListResolverEndpointIpAddressesRequest:
      type: object
      required:
        - ResolverEndpointId
      title: ListResolverEndpointIpAddressesRequest
      properties:
        ResolverEndpointId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver endpoint that you want to get IP addresses for.
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of IP addresses that you want to return in the response to a <code>ListResolverEndpointIpAddresses</code> request. If you don''t specify a value for <code>MaxResults</code>, Resolver returns up to 100 IP addresses. '
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: '<p>For the first <code>ListResolverEndpointIpAddresses</code> request, omit this value.</p> <p>If the specified resolver endpoint has more than <code>MaxResults</code> IP addresses, you can submit another <code>ListResolverEndpointIpAddresses</code> request to get the next group of IP addresses. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>'
    InvalidNextTokenException: {}
    ListResolverEndpointsResponse:
      type: object
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If more than <code>MaxResults</code> IP addresses match the specified criteria, you can submit another <code>ListResolverEndpoint</code> request to get the next group of results. In the next request, specify the value of <code>NextToken</code> from the previous response. '
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
          description: The value that you specified for <code>MaxResults</code> in the request.
        ResolverEndpoints:
          $ref: '#/components/schemas/ResolverEndpoints'
          description: 'The resolver endpoints that were created by using the current AWS account, and that match the specified filters, if any.'
    ListResolverEndpointsRequest:
      type: object
      title: ListResolverEndpointsRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of resolver endpoints that you want to return in the response to a <code>ListResolverEndpoints</code> request. If you don''t specify a value for <code>MaxResults</code>, Resolver returns up to 100 resolver endpoints. '
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: '<p>For the first <code>ListResolverEndpoints</code> request, omit this value.</p> <p>If you have more than <code>MaxResults</code> resolver endpoints, you can submit another <code>ListResolverEndpoints</code> request to get the next group of resolver endpoints. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>'
        Filters:
          $ref: '#/components/schemas/Filters'
          description: '<p>An optional specification to return a subset of resolver endpoints, such as all inbound resolver endpoints.</p> <note> <p>If you submit a second or subsequent <code>ListResolverEndpoints</code> request and specify the <code>NextToken</code> parameter, you must use the same values for <code>Filters</code>, if any, as in the previous request.</p> </note>'
    ListResolverRuleAssociationsResponse:
      type: object
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If more than <code>MaxResults</code> rule associations match the specified criteria, you can submit another <code>ListResolverRuleAssociation</code> request to get the next group of results. In the next request, specify the value of <code>NextToken</code> from the previous response. '
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
          description: The value that you specified for <code>MaxResults</code> in the request.
        ResolverRuleAssociations:
          $ref: '#/components/schemas/ResolverRuleAssociations'
          description: 'The associations that were created between resolver rules and VPCs using the current AWS account, and that match the specified filters, if any.'
    ListResolverRuleAssociationsRequest:
      type: object
      title: ListResolverRuleAssociationsRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of rule associations that you want to return in the response to a <code>ListResolverRuleAssociations</code> request. If you don''t specify a value for <code>MaxResults</code>, Resolver returns up to 100 rule associations. '
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: '<p>For the first <code>ListResolverRuleAssociation</code> request, omit this value.</p> <p>If you have more than <code>MaxResults</code> rule associations, you can submit another <code>ListResolverRuleAssociation</code> request to get the next group of rule associations. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>'
        Filters:
          $ref: '#/components/schemas/Filters'
          description: '<p>An optional specification to return a subset of resolver rules, such as resolver rules that are associated with the same VPC ID.</p> <note> <p>If you submit a second or subsequent <code>ListResolverRuleAssociations</code> request and specify the <code>NextToken</code> parameter, you must use the same values for <code>Filters</code>, if any, as in the previous request.</p> </note>'
    ListResolverRulesResponse:
      type: object
      properties:
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If more than <code>MaxResults</code> resolver rules match the specified criteria, you can submit another <code>ListResolverRules</code> request to get the next group of results. In the next request, specify the value of <code>NextToken</code> from the previous response. '
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
          description: The value that you specified for <code>MaxResults</code> in the request.
        ResolverRules:
          $ref: '#/components/schemas/ResolverRules'
          description: 'The resolver rules that were created using the current AWS account and that match the specified filters, if any.'
    ListResolverRulesRequest:
      type: object
      title: ListResolverRulesRequest
      properties:
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of resolver rules that you want to return in the response to a <code>ListResolverRules</code> request. If you don''t specify a value for <code>MaxResults</code>, Resolver returns up to 100 resolver rules.'
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: '<p>For the first <code>ListResolverRules</code> request, omit this value.</p> <p>If you have more than <code>MaxResults</code> resolver rules, you can submit another <code>ListResolverRules</code> request to get the next group of resolver rules. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>'
        Filters:
          $ref: '#/components/schemas/Filters'
          description: '<p>An optional specification to return a subset of resolver rules, such as all resolver rules that are associated with the same resolver endpoint.</p> <note> <p>If you submit a second or subsequent <code>ListResolverRules</code> request and specify the <code>NextToken</code> parameter, you must use the same values for <code>Filters</code>, if any, as in the previous request.</p> </note>'
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          $ref: '#/components/schemas/TagList'
          description: The tags that are associated with the resource that you specified in the <code>ListTagsForResource</code> request.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'If more than <code>MaxResults</code> tags match the specified criteria, you can submit another <code>ListTagsForResource</code> request to get the next group of results. In the next request, specify the value of <code>NextToken</code> from the previous response. '
    ListTagsForResourceRequest:
      type: object
      required:
        - ResourceArn
      title: ListTagsForResourceRequest
      properties:
        ResourceArn:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) for the resource that you want to list tags for.
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of tags that you want to return in the response to a <code>ListTagsForResource</code> request. If you don''t specify a value for <code>MaxResults</code>, Resolver returns up to 100 tags.'
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: '<p>For the first <code>ListTagsForResource</code> request, omit this value.</p> <p>If you have more than <code>MaxResults</code> tags, you can submit another <code>ListTagsForResource</code> request to get the next group of tags for the resource. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>'
    PutResolverRulePolicyResponse:
      type: object
      properties:
        ReturnValue:
          $ref: '#/components/schemas/Boolean'
          description: Whether the <code>PutResolverRulePolicy</code> request was successful.
      description: The response to a <code>PutResolverRulePolicy</code> request.
    PutResolverRulePolicyRequest:
      type: object
      required:
        - Arn
        - ResolverRulePolicy
      title: PutResolverRulePolicyRequest
      properties:
        Arn:
          $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the account that you want to grant permissions to.
        ResolverRulePolicy:
          $ref: '#/components/schemas/ResolverRulePolicy'
          description: An AWS Identity and Access Management policy statement that lists the permissions that you want to grant to another AWS account.
    InvalidPolicyDocument: {}
    TagResourceResponse:
      type: object
      properties: {}
    TagResourceRequest:
      type: object
      required:
        - ResourceArn
        - Tags
      title: TagResourceRequest
      properties:
        ResourceArn:
          $ref: '#/components/schemas/Arn'
          description: '<p>The Amazon Resource Name (ARN) for the resource that you want to add tags to. To get the ARN for a resource, use the applicable <code>Get</code> or <code>List</code> command: </p> <ul> <li> <p> <a>GetResolverEndpoint</a> </p> </li> <li> <p> <a>GetResolverRule</a> </p> </li> <li> <p> <a>GetResolverRuleAssociation</a> </p> </li> <li> <p> <a>ListResolverEndpoints</a> </p> </li> <li> <p> <a>ListResolverRuleAssociations</a> </p> </li> <li> <p> <a>ListResolverRules</a> </p> </li> </ul>'
        Tags:
          $ref: '#/components/schemas/TagList'
          description: The tags that you want to add to the specified resource.
    InvalidTagException: {}
    UntagResourceResponse:
      type: object
      properties: {}
    UntagResourceRequest:
      type: object
      required:
        - ResourceArn
        - TagKeys
      title: UntagResourceRequest
      properties:
        ResourceArn:
          $ref: '#/components/schemas/Arn'
          description: '<p>The Amazon Resource Name (ARN) for the resource that you want to remove tags from. To get the ARN for a resource, use the applicable <code>Get</code> or <code>List</code> command: </p> <ul> <li> <p> <a>GetResolverEndpoint</a> </p> </li> <li> <p> <a>GetResolverRule</a> </p> </li> <li> <p> <a>GetResolverRuleAssociation</a> </p> </li> <li> <p> <a>ListResolverEndpoints</a> </p> </li> <li> <p> <a>ListResolverRuleAssociations</a> </p> </li> <li> <p> <a>ListResolverRules</a> </p> </li> </ul>'
        TagKeys:
          $ref: '#/components/schemas/TagKeyList'
          description: The tags that you want to remove to the specified resource.
    UpdateResolverEndpointResponse:
      type: object
      properties:
        ResolverEndpoint:
          $ref: '#/components/schemas/ResolverEndpoint'
          description: The response to an <code>UpdateResolverEndpoint</code> request.
    UpdateResolverEndpointRequest:
      type: object
      required:
        - ResolverEndpointId
      title: UpdateResolverEndpointRequest
      properties:
        ResolverEndpointId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver endpoint that you want to update.
        Name:
          $ref: '#/components/schemas/Name'
          description: The name of the resolver endpoint that you want to update.
    UpdateResolverRuleResponse:
      type: object
      properties:
        ResolverRule:
          $ref: '#/components/schemas/ResolverRule'
          description: The response to an <code>UpdateResolverRule</code> request.
    UpdateResolverRuleRequest:
      type: object
      required:
        - ResolverRuleId
        - Config
      title: UpdateResolverRuleRequest
      properties:
        ResolverRuleId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver rule that you want to update.
        Config:
          $ref: '#/components/schemas/ResolverRuleConfig'
          description: The new settings for the resolver rule.
    AccountId:
      type: string
      minLength: 12
      maxLength: 32
    Arn:
      type: string
      minLength: 1
      maxLength: 255
    ResourceId:
      type: string
      minLength: 1
      maxLength: 64
    IpAddressUpdate:
      type: object
      properties:
        IpId:
          $ref: '#/components/schemas/ResourceId'
          description: ' <i>Only when removing an IP address from a resolver endpoint</i>: The ID of the IP address that you want to remove. To get this ID, use <a>GetResolverEndpoint</a>.'
        SubnetId:
          $ref: '#/components/schemas/SubnetId'
          description: 'The ID of the subnet that includes the IP address that you want to update. To get this ID, use <a>GetResolverEndpoint</a>.'
        Ip:
          $ref: '#/components/schemas/Ip'
          description: The new IP address.
      description: 'In an <a>UpdateResolverEndpoint</a> request, information about an IP address to update.'
    ResolverEndpoint:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver endpoint.
        CreatorRequestId:
          $ref: '#/components/schemas/CreatorRequestId'
          description: A unique string that identifies the request that created the resolver endpoint. The <code>CreatorRequestId</code> allows failed requests to be retried without the risk of executing the operation twice.
        Arn:
          $ref: '#/components/schemas/Arn'
          description: The ARN (Amazon Resource Name) for the resolver endpoint.
        Name:
          $ref: '#/components/schemas/Name'
          description: The name that you assigned to the resolver endpoint when you submitted a <a>CreateResolverEndpoint</a> request.
        SecurityGroupIds:
          $ref: '#/components/schemas/SecurityGroupIds'
          description: The ID of one or more security groups that control access to this VPC. The security group must include one or more inbound resolver rules.
        Direction:
          $ref: '#/components/schemas/ResolverEndpointDirection'
          description: '<p>Indicates whether the resolver endpoint allows inbound or outbound DNS queries:</p> <ul> <li> <p> <code>INBOUND</code>: allows DNS queries to your VPC from your network or another VPC</p> </li> <li> <p> <code>OUTBOUND</code>: allows DNS queries from your VPC to your network or another VPC</p> </li> </ul>'
        IpAddressCount:
          $ref: '#/components/schemas/IpAddressCount'
          description: The number of IP addresses that the resolver endpoint can use for DNS queries.
        HostVPCId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the VPC that you want to create the resolver endpoint in.
        Status:
          $ref: '#/components/schemas/ResolverEndpointStatus'
          description: A code that specifies the current status of the resolver endpoint.
        StatusMessage:
          $ref: '#/components/schemas/StatusMessage'
          description: A detailed description of the status of the resolver endpoint.
        CreationTime:
          $ref: '#/components/schemas/Rfc3339TimeString'
          description: 'The date and time that the endpoint was created, in Unix time format and Coordinated Universal Time (UTC).'
        ModificationTime:
          $ref: '#/components/schemas/Rfc3339TimeString'
          description: 'The date and time that the endpoint was last modified, in Unix time format and Coordinated Universal Time (UTC).'
      description: 'In the response to a <a>CreateResolverEndpoint</a>, <a>DeleteResolverEndpoint</a>, <a>GetResolverEndpoint</a>, <a>ListResolverEndpoints</a>, or <a>UpdateResolverEndpoint</a> request, a complex type that contains settings for an existing inbound or outbound resolver endpoint.'
    Name:
      type: string
      pattern: '(?!^[0-9]+$)([a-zA-Z0-9-_'' '']+)'
      maxLength: 64
    ResolverRuleAssociation:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the association between a resolver rule and a VPC. Resolver assigns this value when you submit an <a>AssociateResolverRule</a> request.
        ResolverRuleId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the resolver rule that you associated with the VPC that is specified by <code>VPCId</code>.
        Name:
          $ref: '#/components/schemas/Name'
          description: The name of an association between a resolver rule and a VPC.
        VPCId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the VPC that you associated the resolver rule with.
        Status:
          $ref: '#/components/schemas/ResolverRuleAssociationStatus'
          description: A code that specifies the current status of the association between a resolver rule and a VPC.
        StatusMessage:
          $ref: '#/components/schemas/StatusMessage'
          description: A detailed description of the status of the association between a resolver rule and a VPC.
      description: 'In the response to an <a>AssociateResolverRule</a>, <a>DisassociateResolverRule</a>, or <a>ListResolverRuleAssociations</a> request, information about an association between a resolver rule and a VPC.'
    Boolean:
      type: boolean
    CreatorRequestId:
      type: string
      minLength: 1
      maxLength: 255
    SecurityGroupIds:
      type: array
      items:
        $ref: '#/components/schemas/ResourceId'
    ResolverEndpointDirection:
      type: string
      enum:
        - INBOUND
        - OUTBOUND
    IpAddressesRequest:
      type: array
      items:
        $ref: '#/components/schemas/IpAddressRequest'
      minItems: 1
      maxItems: 10
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    RuleTypeOption:
      type: string
      enum:
        - FORWARD
        - SYSTEM
        - RECURSIVE
    DomainName:
      type: string
      minLength: 1
      maxLength: 256
    TargetList:
      type: array
      items:
        $ref: '#/components/schemas/TargetAddress'
      minItems: 1
    ResolverRule:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/ResourceId'
          description: The ID that Resolver assigned to the resolver rule when you created it.
        CreatorRequestId:
          $ref: '#/components/schemas/CreatorRequestId'
          description: 'A unique string that you specified when you created the resolver rule. <code>CreatorRequestId</code>identifies the request and allows failed requests to be retried without the risk of executing the operation twice. '
        Arn:
          $ref: '#/components/schemas/Arn'
          description: The ARN (Amazon Resource Name) for the resolver rule specified by <code>Id</code>.
        DomainName:
          $ref: '#/components/schemas/DomainName'
          description: 'DNS queries for this domain name are forwarded to the IP addresses that are specified in <code>TargetIps</code>. If a query matches multiple resolver rules (example.com and www.example.com), the query is routed using the resolver rule that contains the most specific domain name (www.example.com).'
        Status:
          $ref: '#/components/schemas/ResolverRuleStatus'
          description: A code that specifies the current status of the resolver rule.
        StatusMessage:
          $ref: '#/components/schemas/StatusMessage'
          description: A detailed description of the status of a resolver rule.
        RuleType:
          $ref: '#/components/schemas/RuleTypeOption'
          description: This value is always <code>FORWARD</code>. Other resolver rule types aren't supported.
        Name:
          $ref: '#/components/schemas/Name'
          description: 'The name for the resolver rule, which you specified when you created the resolver rule.'
        TargetIps:
          $ref: '#/components/schemas/TargetList'
          description: 'An array that contains the IP addresses and ports that you want to forward '
        ResolverEndpointId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the endpoint that the rule is associated with.
        OwnerId:
          $ref: '#/components/schemas/AccountId'
          description: 'When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.'
        ShareStatus:
          $ref: '#/components/schemas/ShareStatus'
          description: 'Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.'
      description: 'For queries that originate in your VPC, detailed information about a resolver rule, which specifies how to route DNS queries out of the VPC. The <code>ResolverRule</code> parameter appears in the response to a <a>CreateResolverRule</a>, <a>DeleteResolverRule</a>, <a>GetResolverRule</a>, <a>ListResolverRules</a>, or <a>UpdateResolverRule</a> request.'
    FilterName:
      type: string
      minLength: 1
      maxLength: 64
    FilterValues:
      type: array
      items:
        $ref: '#/components/schemas/FilterValue'
    Filter:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/FilterName'
          description: 'When you''re using a <code>List</code> operation and you want the operation to return a subset of objects, such as resolver endpoints or resolver rules, the name of the parameter that you want to use to filter objects. For example, to list only inbound resolver endpoints, specify <code>Direction</code> for the value of <code>Name</code>.'
        Values:
          $ref: '#/components/schemas/FilterValues'
          description: 'When you''re using a <code>List</code> operation and you want the operation to return a subset of objects, such as resolver endpoints or resolver rules, the value of the parameter that you want to use to filter objects. For example, to list only inbound resolver endpoints, specify <code>INBOUND</code> for the value of <code>Values</code>.'
      description: 'For <code>List</code> operations, an optional specification to return a subset of objects, such as resolver endpoints or resolver rules.'
    FilterValue:
      type: string
      minLength: 1
      maxLength: 64
    Filters:
      type: array
      items:
        $ref: '#/components/schemas/Filter'
    ResolverRulePolicy:
      type: string
      maxLength: 5000
    Ip:
      type: string
      minLength: 7
      maxLength: 36
    IpAddressCount:
      type: integer
    SubnetId:
      type: string
      minLength: 1
      maxLength: 32
    IpAddressRequest:
      type: object
      required:
        - SubnetId
      properties:
        SubnetId:
          $ref: '#/components/schemas/SubnetId'
          description: The subnet that contains the IP address.
        Ip:
          $ref: '#/components/schemas/Ip'
          description: The IP address that you want to use for DNS queries.
      description: 'In an <a>CreateResolverEndpoint</a> request, a subnet and IP address that you want to use for DNS queries.'
    IpAddressStatus:
      type: string
      enum:
        - CREATING
        - FAILED_CREATION
        - ATTACHING
        - ATTACHED
        - REMAP_DETACHING
        - REMAP_ATTACHING
        - DETACHING
        - FAILED_RESOURCE_GONE
        - DELETING
        - DELETE_FAILED_FAS_EXPIRED
    StatusMessage:
      type: string
      maxLength: 255
    Rfc3339TimeString:
      type: string
      minLength: 20
      maxLength: 40
    IpAddressResponse:
      type: object
      properties:
        IpId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of one IP address.
        SubnetId:
          $ref: '#/components/schemas/SubnetId'
          description: The ID of one subnet.
        Ip:
          $ref: '#/components/schemas/Ip'
          description: One IP address that the resolver endpoint uses for DNS queries.
        Status:
          $ref: '#/components/schemas/IpAddressStatus'
          description: A status code that gives the current status of the request.
        StatusMessage:
          $ref: '#/components/schemas/StatusMessage'
          description: A message that provides additional information about the status of the request.
        CreationTime:
          $ref: '#/components/schemas/Rfc3339TimeString'
          description: 'The date and time that the IP address was created, in Unix time format and Coordinated Universal Time (UTC).'
        ModificationTime:
          $ref: '#/components/schemas/Rfc3339TimeString'
          description: 'The date and time that the IP address was last modified, in Unix time format and Coordinated Universal Time (UTC).'
      description: 'In the response to a <a>GetResolverEndpoint</a> request, information about the IP addresses that the resolver endpoint uses for DNS queries.'
    IpAddressesResponse:
      type: array
      items:
        $ref: '#/components/schemas/IpAddressResponse'
    MaxResults:
      type: integer
      minimum: 1
      maximum: 100
    NextToken:
      type: string
    ResolverEndpoints:
      type: array
      items:
        $ref: '#/components/schemas/ResolverEndpoint'
    ResolverRuleAssociations:
      type: array
      items:
        $ref: '#/components/schemas/ResolverRuleAssociation'
    ResolverRules:
      type: array
      items:
        $ref: '#/components/schemas/ResolverRule'
    Port:
      type: integer
      minimum: 0
      maximum: 65535
    ResolverEndpointStatus:
      type: string
      enum:
        - CREATING
        - OPERATIONAL
        - UPDATING
        - AUTO_RECOVERING
        - ACTION_NEEDED
        - DELETING
    ResolverRuleStatus:
      type: string
      enum:
        - COMPLETE
        - DELETING
        - UPDATING
        - FAILED
    ShareStatus:
      type: string
      enum:
        - NOT_SHARED
        - SHARED_WITH_ME
        - SHARED_BY_ME
    ResolverRuleAssociationStatus:
      type: string
      enum:
        - CREATING
        - COMPLETE
        - DELETING
        - FAILED
        - OVERRIDDEN
    ResolverRuleConfig:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/Name'
          description: 'The new name for the resolver rule. The name that you specify appears in the Resolver dashboard in the Route 53 console. '
        TargetIps:
          $ref: '#/components/schemas/TargetList'
          description: 'For DNS queries that originate in your VPC, the new IP addresses that you want to route outbound DNS queries to.'
        ResolverEndpointId:
          $ref: '#/components/schemas/ResourceId'
          description: The ID of the new outbound resolver endpoint that you want to use to route DNS queries to the IP addresses that you specify in <code>TargetIps</code>.
      description: 'In an <a>UpdateResolverRule</a> request, information about the changes that you want to make.'
    TagKey:
      type: string
    TagValue:
      type: string
    Tag:
      type: object
      properties:
        Key:
          $ref: '#/components/schemas/TagKey'
          description: 'The name for the tag. For example, if you want to associate Resolver resources with the account IDs of your customers for billing purposes, the value of <code>Key</code> might be <code>account-id</code>.'
        Value:
          $ref: '#/components/schemas/TagValue'
          description: 'The value for the tag. For example, if <code>Key</code> is <code>account-id</code>, then <code>Value</code> might be the ID of the customer account that you''re creating the resource for.'
      description: One tag that you want to add to the specified resource. A tag consists of a <code>Key</code> (a name for the tag) and a <code>Value</code>.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TargetAddress:
      type: object
      required:
        - Ip
      properties:
        Ip:
          $ref: '#/components/schemas/Ip'
          description: One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
        Port:
          $ref: '#/components/schemas/Port'
          description: The port at <code>Ip</code> that you want to forward DNS queries to.
      description: 'In a <a>CreateResolverRule</a> request, an array of the IPs that you want to forward DNS queries to.'
security:
  - hmac: []
