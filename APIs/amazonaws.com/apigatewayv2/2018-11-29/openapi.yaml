openapi: 3.0.0
info:
  version: '2018-11-29'
  x-release: v4
  title: AmazonApiGatewayV2
  description: Amazon API Gateway V2
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: apigatewayv2
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/apigatewayv2-2018-11-29.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/apigateway/'
servers:
  - url: 'http://apigateway.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AmazonApiGatewayV2 multi-region endpoint
  - url: 'https://apigateway.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AmazonApiGatewayV2 multi-region endpoint
  - url: 'http://apigateway.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://apigateway.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /v2/apis:
    post:
      operationId: CreateApi
      description: Creates an Api resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - protocolType
              properties:
                apiKeySelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                corsConfiguration:
                  description: 'Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
                  type: object
                  properties:
                    AllowCredentials:
                      $ref: '#/components/schemas/__boolean'
                      description: Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
                    AllowHeaders:
                      $ref: '#/components/schemas/CorsHeaderList'
                      description: Represents a collection of allowed headers. Supported only for HTTP APIs.
                    AllowMethods:
                      $ref: '#/components/schemas/CorsMethodList'
                      description: Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
                    AllowOrigins:
                      $ref: '#/components/schemas/CorsOriginList'
                      description: Represents a collection of allowed origins. Supported only for HTTP APIs.
                    ExposeHeaders:
                      $ref: '#/components/schemas/CorsHeaderList'
                      description: Represents a collection of exposed headers. Supported only for HTTP APIs.
                    MaxAge:
                      $ref: '#/components/schemas/IntegerWithLengthBetweenMinus1And86400'
                      description: The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
                credentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                disableSchemaValidation:
                  description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
                  type: boolean
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
                protocolType:
                  description: Represents a protocol type.
                  type: string
                  enum:
                    - WEBSOCKET
                    - HTTP
                routeKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                routeSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                tags:
                  description: Represents a collection of tags associated with the resource.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And1600'
                target:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                version:
                  description: 'A string with a length between [1-64].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApis
      description: Gets a collection of Api resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApisResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
    put:
      operationId: ImportApi
      description: Imports an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportApiResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: basepath
          in: query
          required: false
          description: Represents the base path of the imported API. Supported only for HTTP APIs.
          schema:
            type: string
        - name: failOnWarnings
          in: query
          required: false
          description: Specifies whether to rollback the API creation (true) or not (false) when a warning is encountered. The default value is false.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: The OpenAPI definition. Supported only for HTTP APIs.
                  type: string
  '/v2/domainnames/{domainName}/apimappings':
    post:
      operationId: CreateApiMapping
      description: Creates an API mapping.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiMappingResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apiId
                - stage
              properties:
                apiId:
                  description: The identifier.
                  type: string
                apiMappingKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                stage:
                  description: 'A string with a length between [1-128].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApiMappings
      description: Gets API mappings.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiMappingsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/authorizers':
    post:
      operationId: CreateAuthorizer
      description: Creates an Authorizer for an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAuthorizerResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - authorizerType
                - identitySource
                - name
              properties:
                authorizerCredentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                authorizerResultTtlInSeconds:
                  description: |2-

                                <p>An integer with a value between [0-3600].</p>
                             
                  type: integer
                  minimum: 0
                  maximum: 3600
                authorizerType:
                  description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
                  type: string
                  enum:
                    - REQUEST
                    - JWT
                authorizerUri:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                identitySource:
                  description: 'The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.'
                  type: array
                  items:
                    $ref: '#/components/schemas/__string'
                identityValidationExpression:
                  description: 'A string with a length between [0-1024].'
                  type: string
                jwtConfiguration:
                  description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
                  type: object
                  properties:
                    Audience:
                      $ref: '#/components/schemas/__listOf__string'
                      description: 'A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.'
                    Issuer:
                      $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                      description: |-
                        The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                                       . Required for the JWT authorizer type. Supported only for HTTP APIs.
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAuthorizers
      description: Gets the Authorizers for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthorizersResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/deployments':
    post:
      operationId: CreateDeployment
      description: Creates a Deployment for an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                stageName:
                  description: 'A string with a length between [1-128].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDeployments
      description: Gets the Deployments for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  /v2/domainnames:
    post:
      operationId: CreateDomainName
      description: Creates a domain name.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDomainNameResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - domainName
              properties:
                domainName:
                  description: 'A string with a length between [1-512].'
                  type: string
                domainNameConfigurations:
                  description: The domain name configurations.
                  type: array
                  items:
                    $ref: '#/components/schemas/DomainNameConfiguration'
                tags:
                  description: Represents a collection of tags associated with the resource.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And1600'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDomainNames
      description: Gets the domain names for an AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainNamesResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/integrations':
    post:
      operationId: CreateIntegration
      description: Creates an Integration.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntegrationResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - integrationType
              properties:
                connectionId:
                  description: 'A string with a length between [1-1024].'
                  type: string
                connectionType:
                  description: Represents a connection type.
                  type: string
                  enum:
                    - INTERNET
                    - VPC_LINK
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                credentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                integrationMethod:
                  description: 'A string with a length between [1-64].'
                  type: string
                integrationType:
                  description: Represents an API method integration type.
                  type: string
                  enum:
                    - AWS
                    - HTTP
                    - MOCK
                    - HTTP_PROXY
                    - AWS_PROXY
                integrationUri:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                passthroughBehavior:
                  description: Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - WHEN_NO_MATCH
                    - NEVER
                    - WHEN_NO_TEMPLATES
                payloadFormatVersion:
                  description: 'A string with a length between [1-64].'
                  type: string
                requestParameters:
                  description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And512'
                requestTemplates:
                  description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And32K'
                templateSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                timeoutInMillis:
                  description: |2-

                                <p>An integer with a value between [50-29000].</p>
                             
                  type: integer
                  minimum: 50
                  maximum: 29000
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrations
      description: Gets the Integrations for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses':
    post:
      operationId: CreateIntegrationResponse
      description: Creates an IntegrationResponses.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntegrationResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - integrationResponseKey
              properties:
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                integrationResponseKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                responseParameters:
                  description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And512'
                responseTemplates:
                  description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And32K'
                templateSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrationResponses
      description: Gets the IntegrationResponses for an Integration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResponsesResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/models':
    post:
      operationId: CreateModel
      description: Creates a Model for an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModelResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - schema
              properties:
                contentType:
                  description: 'A string with a length between [1-256].'
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
                schema:
                  description: 'A string with a length between [0-32768].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetModels
      description: Gets the Models for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/routes':
    post:
      operationId: CreateRoute
      description: Creates a Route for an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - routeKey
              properties:
                apiKeyRequired:
                  description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
                  type: boolean
                authorizationScopes:
                  description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
                  type: array
                  items:
                    $ref: '#/components/schemas/StringWithLengthBetween1And64'
                authorizationType:
                  description: 'The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
                  type: string
                  enum:
                    - NONE
                    - AWS_IAM
                    - CUSTOM
                    - JWT
                authorizerId:
                  description: The identifier.
                  type: string
                modelSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                operationName:
                  description: 'A string with a length between [1-64].'
                  type: string
                requestModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And128'
                requestParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ParameterConstraints'
                routeKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                routeResponseSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                target:
                  description: 'A string with a length between [1-128].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRoutes
      description: Gets the Routes for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoutesResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/routes/{routeId}/routeresponses':
    post:
      operationId: CreateRouteResponse
      description: Creates a RouteResponse for a Route.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - routeResponseKey
              properties:
                modelSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                responseModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And128'
                responseParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ParameterConstraints'
                routeResponseKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRouteResponses
      description: Gets the RouteResponses for a Route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResponsesResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
  '/v2/apis/{apiId}/stages':
    post:
      operationId: CreateStage
      description: Creates a Stage for an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStageResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stageName
              properties:
                accessLogSettings:
                  description: Settings for logging access in a stage.
                  type: object
                  properties:
                    DestinationArn:
                      $ref: '#/components/schemas/Arn'
                      description: The ARN of the CloudWatch Logs log group to receive access logs.
                    Format:
                      $ref: '#/components/schemas/StringWithLengthBetween1And1024'
                      description: 'A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.'
                autoDeploy:
                  description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
                  type: boolean
                clientCertificateId:
                  description: The identifier.
                  type: string
                defaultRouteSettings:
                  description: Represents a collection of route settings.
                  type: object
                  properties:
                    DataTraceEnabled:
                      $ref: '#/components/schemas/__boolean'
                      description: Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
                    DetailedMetricsEnabled:
                      $ref: '#/components/schemas/__boolean'
                      description: Specifies whether detailed metrics are enabled.
                    LoggingLevel:
                      $ref: '#/components/schemas/LoggingLevel'
                      description: 'Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.'
                    ThrottlingBurstLimit:
                      $ref: '#/components/schemas/__integer'
                      description: Specifies the throttling burst limit. Supported only for WebSocket APIs.
                    ThrottlingRateLimit:
                      $ref: '#/components/schemas/__double'
                      description: Specifies the throttling rate limit. Supported only for WebSocket APIs.
                deploymentId:
                  description: The identifier.
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                routeSettings:
                  description: The route settings map.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/RouteSettings'
                stageName:
                  description: 'A string with a length between [1-128].'
                  type: string
                stageVariables:
                  description: The stage variable map.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And2048'
                tags:
                  description: Represents a collection of tags associated with the resource.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And1600'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetStages
      description: Gets the Stages for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStagesResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}':
    delete:
      operationId: DeleteApi
      description: Deletes an Api resource.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApi
      description: Gets an Api resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
    put:
      operationId: ReimportApi
      description: Puts an Api resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReimportApiResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: basepath
          in: query
          required: false
          description: Represents the base path of the imported API. Supported only for HTTP APIs.
          schema:
            type: string
        - name: failOnWarnings
          in: query
          required: false
          description: Specifies whether to rollback the API creation (true) or not (false) when a warning is encountered. The default value is false.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: The OpenAPI definition. Supported only for HTTP APIs.
                  type: string
    patch:
      operationId: UpdateApi
      description: Updates an Api resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKeySelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                corsConfiguration:
                  description: 'Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
                  type: object
                  properties:
                    AllowCredentials:
                      $ref: '#/components/schemas/__boolean'
                      description: Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
                    AllowHeaders:
                      $ref: '#/components/schemas/CorsHeaderList'
                      description: Represents a collection of allowed headers. Supported only for HTTP APIs.
                    AllowMethods:
                      $ref: '#/components/schemas/CorsMethodList'
                      description: Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
                    AllowOrigins:
                      $ref: '#/components/schemas/CorsOriginList'
                      description: Represents a collection of allowed origins. Supported only for HTTP APIs.
                    ExposeHeaders:
                      $ref: '#/components/schemas/CorsHeaderList'
                      description: Represents a collection of exposed headers. Supported only for HTTP APIs.
                    MaxAge:
                      $ref: '#/components/schemas/IntegerWithLengthBetweenMinus1And86400'
                      description: The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
                credentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                disableSchemaValidation:
                  description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
                  type: boolean
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
                routeKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                routeSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                target:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                version:
                  description: 'A string with a length between [1-64].'
                  type: string
  '/v2/domainnames/{domainName}/apimappings/{apiMappingId}':
    delete:
      operationId: DeleteApiMapping
      description: Deletes an API mapping.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          schema:
            type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApiMapping
      description: Gets an API mapping.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiMappingResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          schema:
            type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    patch:
      operationId: UpdateApiMapping
      description: The API mapping.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiMappingResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          schema:
            type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apiId
              properties:
                apiId:
                  description: The identifier.
                  type: string
                apiMappingKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                stage:
                  description: 'A string with a length between [1-128].'
                  type: string
  '/v2/apis/{apiId}/authorizers/{authorizerId}':
    delete:
      operationId: DeleteAuthorizer
      description: Deletes an Authorizer.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAuthorizer
      description: Gets an Authorizer.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthorizerResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          schema:
            type: string
    patch:
      operationId: UpdateAuthorizer
      description: Updates an Authorizer.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAuthorizerResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authorizerCredentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                authorizerResultTtlInSeconds:
                  description: |2-

                                <p>An integer with a value between [0-3600].</p>
                             
                  type: integer
                  minimum: 0
                  maximum: 3600
                authorizerType:
                  description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
                  type: string
                  enum:
                    - REQUEST
                    - JWT
                authorizerUri:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                identitySource:
                  description: 'The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.'
                  type: array
                  items:
                    $ref: '#/components/schemas/__string'
                identityValidationExpression:
                  description: 'A string with a length between [0-1024].'
                  type: string
                jwtConfiguration:
                  description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
                  type: object
                  properties:
                    Audience:
                      $ref: '#/components/schemas/__listOf__string'
                      description: 'A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.'
                    Issuer:
                      $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                      description: |-
                        The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                                       . Required for the JWT authorizer type. Supported only for HTTP APIs.
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
  '/v2/apis/{apiId}/cors':
    delete:
      operationId: DeleteCorsConfiguration
      description: Deletes a CORS configuration.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v2/apis/{apiId}/deployments/{deploymentId}':
    delete:
      operationId: DeleteDeployment
      description: Deletes a Deployment.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDeployment
      description: Gets a Deployment.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          schema:
            type: string
    patch:
      operationId: UpdateDeployment
      description: Updates a Deployment.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDeploymentResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
  '/v2/domainnames/{domainName}':
    delete:
      operationId: DeleteDomainName
      description: Deletes a domain name.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDomainName
      description: Gets a domain name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainNameResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    patch:
      operationId: UpdateDomainName
      description: Updates a domain name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDomainNameResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domainNameConfigurations:
                  description: The domain name configurations.
                  type: array
                  items:
                    $ref: '#/components/schemas/DomainNameConfiguration'
  '/v2/apis/{apiId}/integrations/{integrationId}':
    delete:
      operationId: DeleteIntegration
      description: Deletes an Integration.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegration
      description: Gets an Integration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
    patch:
      operationId: UpdateIntegration
      description: Updates an Integration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIntegrationResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectionId:
                  description: 'A string with a length between [1-1024].'
                  type: string
                connectionType:
                  description: Represents a connection type.
                  type: string
                  enum:
                    - INTERNET
                    - VPC_LINK
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                credentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                integrationMethod:
                  description: 'A string with a length between [1-64].'
                  type: string
                integrationType:
                  description: Represents an API method integration type.
                  type: string
                  enum:
                    - AWS
                    - HTTP
                    - MOCK
                    - HTTP_PROXY
                    - AWS_PROXY
                integrationUri:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                passthroughBehavior:
                  description: Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - WHEN_NO_MATCH
                    - NEVER
                    - WHEN_NO_TEMPLATES
                payloadFormatVersion:
                  description: 'A string with a length between [1-64].'
                  type: string
                requestParameters:
                  description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And512'
                requestTemplates:
                  description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And32K'
                templateSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                timeoutInMillis:
                  description: |2-

                                <p>An integer with a value between [50-29000].</p>
                             
                  type: integer
                  minimum: 50
                  maximum: 29000
  '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}':
    delete:
      operationId: DeleteIntegrationResponse
      description: Deletes an IntegrationResponses.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrationResponse
      description: Gets an IntegrationResponses.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          schema:
            type: string
    patch:
      operationId: UpdateIntegrationResponse
      description: Updates an IntegrationResponses.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIntegrationResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                integrationResponseKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                responseParameters:
                  description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And512'
                responseTemplates:
                  description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And32K'
                templateSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
  '/v2/apis/{apiId}/models/{modelId}':
    delete:
      operationId: DeleteModel
      description: Deletes a Model.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetModel
      description: Gets a Model.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
    patch:
      operationId: UpdateModel
      description: Updates a Model.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateModelResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contentType:
                  description: 'A string with a length between [1-256].'
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
                schema:
                  description: 'A string with a length between [0-32768].'
                  type: string
  '/v2/apis/{apiId}/routes/{routeId}':
    delete:
      operationId: DeleteRoute
      description: Deletes a Route.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRoute
      description: Gets a Route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
    patch:
      operationId: UpdateRoute
      description: Updates a Route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKeyRequired:
                  description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
                  type: boolean
                authorizationScopes:
                  description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
                  type: array
                  items:
                    $ref: '#/components/schemas/StringWithLengthBetween1And64'
                authorizationType:
                  description: 'The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
                  type: string
                  enum:
                    - NONE
                    - AWS_IAM
                    - CUSTOM
                    - JWT
                authorizerId:
                  description: The identifier.
                  type: string
                modelSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                operationName:
                  description: 'A string with a length between [1-64].'
                  type: string
                requestModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And128'
                requestParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ParameterConstraints'
                routeKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                routeResponseSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                target:
                  description: 'A string with a length between [1-128].'
                  type: string
  '/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}':
    delete:
      operationId: DeleteRouteResponse
      description: Deletes a RouteResponse.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRouteResponse
      description: Gets a RouteResponse.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          schema:
            type: string
    patch:
      operationId: UpdateRouteResponse
      description: Updates a RouteResponse.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                modelSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                responseModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And128'
                responseParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ParameterConstraints'
                routeResponseKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
  '/v2/apis/{apiId}/stages/{stageName}/routesettings/{routeKey}':
    delete:
      operationId: DeleteRouteSettings
      description: Deletes the RouteSettings for a stage.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeKey
          in: path
          required: true
          description: The route key.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v2/apis/{apiId}/stages/{stageName}':
    delete:
      operationId: DeleteStage
      description: Deletes a Stage.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetStage
      description: Gets a Stage.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStageResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          schema:
            type: string
    patch:
      operationId: UpdateStage
      description: Updates a Stage.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStageResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessLogSettings:
                  description: Settings for logging access in a stage.
                  type: object
                  properties:
                    DestinationArn:
                      $ref: '#/components/schemas/Arn'
                      description: The ARN of the CloudWatch Logs log group to receive access logs.
                    Format:
                      $ref: '#/components/schemas/StringWithLengthBetween1And1024'
                      description: 'A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.'
                autoDeploy:
                  description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
                  type: boolean
                clientCertificateId:
                  description: The identifier.
                  type: string
                defaultRouteSettings:
                  description: Represents a collection of route settings.
                  type: object
                  properties:
                    DataTraceEnabled:
                      $ref: '#/components/schemas/__boolean'
                      description: Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
                    DetailedMetricsEnabled:
                      $ref: '#/components/schemas/__boolean'
                      description: Specifies whether detailed metrics are enabled.
                    LoggingLevel:
                      $ref: '#/components/schemas/LoggingLevel'
                      description: 'Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.'
                    ThrottlingBurstLimit:
                      $ref: '#/components/schemas/__integer'
                      description: Specifies the throttling burst limit. Supported only for WebSocket APIs.
                    ThrottlingRateLimit:
                      $ref: '#/components/schemas/__double'
                      description: Specifies the throttling rate limit. Supported only for WebSocket APIs.
                deploymentId:
                  description: The identifier.
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                routeSettings:
                  description: The route settings map.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/RouteSettings'
                stageVariables:
                  description: The stage variable map.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And2048'
  '/v2/apis/{apiId}/models/{modelId}/template':
    get:
      operationId: GetModelTemplate
      description: Gets a model template.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelTemplateResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v2/tags/{resource-arn}':
    get:
      operationId: GetTags
      description: Gets a collection of Tag resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTagsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The resource ARN for the tag.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: Creates a new Tag resource to represent a tag.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The resource ARN for the tag.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  description: Represents a collection of tags associated with the resource.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And1600'
  '/v2/tags/{resource-arn}#tagKeys':
    delete:
      operationId: UntagResource
      description: Deletes a Tag.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The resource ARN for the tag.
          schema:
            type: string
        - name: tagKeys
          in: query
          required: true
          description: |2-

                        <p>The Tag keys to delete.</p>
                     
          schema:
            type: array
            items:
              $ref: '#/components/schemas/__string'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateApiResponse:
      type: object
      properties:
        ApiEndpoint:
          $ref: '#/components/schemas/__string'
          description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        ImportInfo:
          $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned on during API import.
    __boolean:
      type: boolean
    CorsHeaderList:
      type: array
      description: Represents a collection of allowed headers. Supported only for HTTP APIs.
      items:
        $ref: '#/components/schemas/__string'
    CorsMethodList:
      type: array
      description: Represents a collection of methods. Supported only for HTTP APIs.
      items:
        $ref: '#/components/schemas/StringWithLengthBetween1And64'
    CorsOriginList:
      type: array
      description: Represents a collection of origins. Supported only for HTTP APIs.
      items:
        $ref: '#/components/schemas/__string'
    IntegerWithLengthBetweenMinus1And86400:
      type: integer
      description: |2-

                    <p>An integer with a value between [-1-86400].</p>
                 
      minimum: -1
      maximum: 86400
    StringWithLengthBetween1And1600:
      type: string
      description: 'A string with a length between [0-1600].'
    NotFoundException: {}
    TooManyRequestsException: {}
    BadRequestException: {}
    ConflictException: {}
    CreateApiMappingResponse:
      type: object
      properties:
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingId:
          $ref: '#/components/schemas/Id'
          description: The API mapping identifier.
        ApiMappingKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        Stage:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
    CreateAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for REQUEST authorizers.'
        AuthorizerId:
          $ref: '#/components/schemas/Id'
          description: The authorizer identifier.
        AuthorizerResultTtlInSeconds:
          $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
        AuthorizerType:
          $ref: '#/components/schemas/AuthorizerType'
          description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
        AuthorizerUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: |-
            The authorizer's Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                           , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        IdentitySource:
          $ref: '#/components/schemas/IdentitySourceList'
          description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
        IdentityValidationExpression:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
    __string:
      type: string
    __listOf__string:
      type: array
      items:
        $ref: '#/components/schemas/__string'
    UriWithLengthBetween1And2048:
      type: string
      description: 'A string representation of a URI with a length between [1-2048].'
    CreateDeploymentResponse:
      type: object
      properties:
        AutoDeployed:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether a deployment was automatically released.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The date and time when the Deployment resource was created.
        DeploymentId:
          $ref: '#/components/schemas/Id'
          description: The identifier for the deployment.
        DeploymentStatus:
          $ref: '#/components/schemas/DeploymentStatus'
          description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          $ref: '#/components/schemas/__string'
          description: May contain additional feedback on the status of an API deployment.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment.
    CreateDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The API mapping selection expression.
        DomainName:
          $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: The name of the DomainName resource.
        DomainNameConfigurations:
          $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags associated with a domain name.
    DomainNameConfiguration:
      type: object
      properties:
        ApiGatewayDomainName:
          $ref: '#/components/schemas/__string'
          description: A domain name for the API.
        CertificateArn:
          $ref: '#/components/schemas/Arn'
          description: An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
        CertificateName:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
        CertificateUploadDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.
        DomainNameStatus:
          $ref: '#/components/schemas/DomainNameStatus'
          description: 'The status of the domain name migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.'
        DomainNameStatusMessage:
          $ref: '#/components/schemas/__string'
          description: An optional text message containing detailed information about status of the domain name migration.
        EndpointType:
          $ref: '#/components/schemas/EndpointType'
          description: The endpoint type.
        HostedZoneId:
          $ref: '#/components/schemas/__string'
          description: The Amazon Route 53 Hosted Zone ID of the endpoint.
        SecurityPolicy:
          $ref: '#/components/schemas/SecurityPolicy'
          description: The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
      description: The domain name configuration.
    AccessDeniedException: {}
    CreateIntegrationResult:
      type: object
      properties:
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
        ConnectionId:
          $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The connection ID.
        ConnectionType:
          $ref: '#/components/schemas/ConnectionType'
          description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: Represents the description of an integration.
        IntegrationId:
          $ref: '#/components/schemas/Id'
          description: Represents the identifier of an integration.
        IntegrationMethod:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
        IntegrationType:
          $ref: '#/components/schemas/IntegrationType'
          description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
        PassthroughBehavior:
          $ref: '#/components/schemas/PassthroughBehavior'
          description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
        RequestParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: |-
            A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                           , where 
                              <replaceable>{location}</replaceable>
                            is querystring, path, or header; and 
                              <replaceable>{name}</replaceable>
                            must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
        RequestTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration. Supported only for WebSocket APIs.
        TimeoutInMillis:
          $ref: '#/components/schemas/IntegerWithLengthBetween50And29000'
          description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
    StringWithLengthBetween1And512:
      type: string
      description: 'A string with a length between [1-512].'
    StringWithLengthBetween0And32K:
      type: string
      description: 'A string with a length between [0-32768].'
    CreateIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseId:
          $ref: '#/components/schemas/Id'
          description: The integration response ID.
        IntegrationResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
        ResponseTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expressions for the integration response.
    CreateModelResponse:
      type: object
      properties:
        ContentType:
          $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: 'The content-type for the model, for example, "application/json".'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        ModelId:
          $ref: '#/components/schemas/Id'
          description: The model identifier.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model. Must be alphanumeric.
        Schema:
          $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
    CreateRouteResult:
      type: object
      properties:
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
        ApiKeyRequired:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          $ref: '#/components/schemas/AuthorizationScopes'
          description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
        AuthorizationType:
          $ref: '#/components/schemas/AuthorizationType'
          description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
        AuthorizerId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteId:
          $ref: '#/components/schemas/Id'
          description: The route ID.
        RouteKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
    StringWithLengthBetween1And64:
      type: string
      description: 'A string with a length between [1-64].'
    StringWithLengthBetween1And128:
      type: string
      description: 'A string with a length between [1-128].'
    ParameterConstraints:
      type: object
      properties:
        Required:
          $ref: '#/components/schemas/__boolean'
          description: Whether or not the parameter is required.
      description: 'Validation constraints imposed on parameters of a request (path, query string, headers).'
    CreateRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
        ResponseModels:
          $ref: '#/components/schemas/RouteModels'
          description: Represents the response models of a route response.
        ResponseParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: Represents the response parameters of a route response.
        RouteResponseId:
          $ref: '#/components/schemas/Id'
          description: Represents the identifier of a route response.
        RouteResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: Represents the route response key of a route response.
    CreateStageResponse:
      type: object
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
        AutoDeploy:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was created.
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
          description: Default route settings for the stage.
        DeploymentId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the stage.
        LastDeploymentStatusMessage:
          $ref: '#/components/schemas/__string'
          description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
        LastUpdatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was last updated.
        RouteSettings:
          $ref: '#/components/schemas/RouteSettingsMap'
          description: 'Route settings for the stage, by routeKey.'
        StageName:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the stage.
        StageVariables:
          $ref: '#/components/schemas/StageVariablesMap'
          description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with a given resource.
    Arn:
      type: string
      description: Represents an Amazon Resource Name (ARN).
    StringWithLengthBetween1And1024:
      type: string
      description: 'A string with a length between [1-1024].'
    LoggingLevel:
      type: string
      enum:
        - ERROR
        - INFO
        - 'false'
      description: The logging level.
    __integer:
      type: integer
    __double:
      type: number
      format: double
    RouteSettings:
      type: object
      properties:
        DataTraceEnabled:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
        DetailedMetricsEnabled:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether detailed metrics are enabled.
        LoggingLevel:
          $ref: '#/components/schemas/LoggingLevel'
          description: 'Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.'
        ThrottlingBurstLimit:
          $ref: '#/components/schemas/__integer'
          description: Specifies the throttling burst limit. Supported only for WebSocket APIs.
        ThrottlingRateLimit:
          $ref: '#/components/schemas/__double'
          description: Specifies the throttling rate limit. Supported only for WebSocket APIs.
      description: Represents a collection of route settings.
    StringWithLengthBetween0And2048:
      type: string
      description: 'A string with a length between [0-2048].'
    GetApiResponse:
      type: object
      properties:
        ApiEndpoint:
          $ref: '#/components/schemas/__string'
          description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        ImportInfo:
          $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned on during API import.
    GetApiMappingResponse:
      type: object
      properties:
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingId:
          $ref: '#/components/schemas/Id'
          description: The API mapping identifier.
        ApiMappingKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        Stage:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
    GetApiMappingsResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/__listOfApiMapping'
          description: The elements from this collection.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetApisResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/__listOfApi'
          description: The elements from this collection.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for REQUEST authorizers.'
        AuthorizerId:
          $ref: '#/components/schemas/Id'
          description: The authorizer identifier.
        AuthorizerResultTtlInSeconds:
          $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
        AuthorizerType:
          $ref: '#/components/schemas/AuthorizerType'
          description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
        AuthorizerUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: |-
            The authorizer's Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                           , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        IdentitySource:
          $ref: '#/components/schemas/IdentitySourceList'
          description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
        IdentityValidationExpression:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
    GetAuthorizersResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/__listOfAuthorizer'
          description: The elements from this collection.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetDeploymentResponse:
      type: object
      properties:
        AutoDeployed:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether a deployment was automatically released.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The date and time when the Deployment resource was created.
        DeploymentId:
          $ref: '#/components/schemas/Id'
          description: The identifier for the deployment.
        DeploymentStatus:
          $ref: '#/components/schemas/DeploymentStatus'
          description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          $ref: '#/components/schemas/__string'
          description: May contain additional feedback on the status of an API deployment.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment.
    GetDeploymentsResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/__listOfDeployment'
          description: The elements from this collection.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The API mapping selection expression.
        DomainName:
          $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: The name of the DomainName resource.
        DomainNameConfigurations:
          $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags associated with a domain name.
    GetDomainNamesResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/__listOfDomainName'
          description: The elements from this collection.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetIntegrationResult:
      type: object
      properties:
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
        ConnectionId:
          $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The connection ID.
        ConnectionType:
          $ref: '#/components/schemas/ConnectionType'
          description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: Represents the description of an integration.
        IntegrationId:
          $ref: '#/components/schemas/Id'
          description: Represents the identifier of an integration.
        IntegrationMethod:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
        IntegrationType:
          $ref: '#/components/schemas/IntegrationType'
          description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
        PassthroughBehavior:
          $ref: '#/components/schemas/PassthroughBehavior'
          description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
        RequestParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: |-
            A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                           , where 
                              <replaceable>{location}</replaceable>
                            is querystring, path, or header; and 
                              <replaceable>{name}</replaceable>
                            must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
        RequestTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration. Supported only for WebSocket APIs.
        TimeoutInMillis:
          $ref: '#/components/schemas/IntegerWithLengthBetween50And29000'
          description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
    GetIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseId:
          $ref: '#/components/schemas/Id'
          description: The integration response ID.
        IntegrationResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
        ResponseTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expressions for the integration response.
    GetIntegrationResponsesResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/__listOfIntegrationResponse'
          description: The elements from this collection.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetIntegrationsResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/__listOfIntegration'
          description: The elements from this collection.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetModelResponse:
      type: object
      properties:
        ContentType:
          $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: 'The content-type for the model, for example, "application/json".'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        ModelId:
          $ref: '#/components/schemas/Id'
          description: The model identifier.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model. Must be alphanumeric.
        Schema:
          $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
    GetModelTemplateResponse:
      type: object
      properties:
        Value:
          $ref: '#/components/schemas/__string'
          description: The template value.
    GetModelsResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/__listOfModel'
          description: The elements from this collection.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetRouteResult:
      type: object
      properties:
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
        ApiKeyRequired:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          $ref: '#/components/schemas/AuthorizationScopes'
          description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
        AuthorizationType:
          $ref: '#/components/schemas/AuthorizationType'
          description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
        AuthorizerId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteId:
          $ref: '#/components/schemas/Id'
          description: The route ID.
        RouteKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
    GetRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
        ResponseModels:
          $ref: '#/components/schemas/RouteModels'
          description: Represents the response models of a route response.
        ResponseParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: Represents the response parameters of a route response.
        RouteResponseId:
          $ref: '#/components/schemas/Id'
          description: Represents the identifier of a route response.
        RouteResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: Represents the route response key of a route response.
    GetRouteResponsesResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/__listOfRouteResponse'
          description: The elements from this collection.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetRoutesResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/__listOfRoute'
          description: The elements from this collection.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetStageResponse:
      type: object
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
        AutoDeploy:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was created.
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
          description: Default route settings for the stage.
        DeploymentId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the stage.
        LastDeploymentStatusMessage:
          $ref: '#/components/schemas/__string'
          description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
        LastUpdatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was last updated.
        RouteSettings:
          $ref: '#/components/schemas/RouteSettingsMap'
          description: 'Route settings for the stage, by routeKey.'
        StageName:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the stage.
        StageVariables:
          $ref: '#/components/schemas/StageVariablesMap'
          description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with a given resource.
    GetStagesResponse:
      type: object
      properties:
        Items:
          $ref: '#/components/schemas/__listOfStage'
          description: The elements from this collection.
        NextToken:
          $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetTagsResponse:
      type: object
      required:
        - Tags
      properties:
        Tags:
          $ref: '#/components/schemas/Tags'
    ImportApiResponse:
      type: object
      properties:
        ApiEndpoint:
          $ref: '#/components/schemas/__string'
          description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        ImportInfo:
          $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned on during API import.
    ReimportApiResponse:
      type: object
      properties:
        ApiEndpoint:
          $ref: '#/components/schemas/__string'
          description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        ImportInfo:
          $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned on during API import.
    TagResourceResponse:
      type: object
      properties: {}
    UpdateApiResponse:
      type: object
      properties:
        ApiEndpoint:
          $ref: '#/components/schemas/__string'
          description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        ImportInfo:
          $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned on during API import.
    UpdateApiMappingResponse:
      type: object
      properties:
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingId:
          $ref: '#/components/schemas/Id'
          description: The API mapping identifier.
        ApiMappingKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        Stage:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
    UpdateAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for REQUEST authorizers.'
        AuthorizerId:
          $ref: '#/components/schemas/Id'
          description: The authorizer identifier.
        AuthorizerResultTtlInSeconds:
          $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
        AuthorizerType:
          $ref: '#/components/schemas/AuthorizerType'
          description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
        AuthorizerUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: |-
            The authorizer's Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                           , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        IdentitySource:
          $ref: '#/components/schemas/IdentitySourceList'
          description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
        IdentityValidationExpression:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
    UpdateDeploymentResponse:
      type: object
      properties:
        AutoDeployed:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether a deployment was automatically released.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The date and time when the Deployment resource was created.
        DeploymentId:
          $ref: '#/components/schemas/Id'
          description: The identifier for the deployment.
        DeploymentStatus:
          $ref: '#/components/schemas/DeploymentStatus'
          description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          $ref: '#/components/schemas/__string'
          description: May contain additional feedback on the status of an API deployment.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment.
    UpdateDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The API mapping selection expression.
        DomainName:
          $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: The name of the DomainName resource.
        DomainNameConfigurations:
          $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags associated with a domain name.
    UpdateIntegrationResult:
      type: object
      properties:
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
        ConnectionId:
          $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The connection ID.
        ConnectionType:
          $ref: '#/components/schemas/ConnectionType'
          description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: Represents the description of an integration.
        IntegrationId:
          $ref: '#/components/schemas/Id'
          description: Represents the identifier of an integration.
        IntegrationMethod:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
        IntegrationType:
          $ref: '#/components/schemas/IntegrationType'
          description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
        PassthroughBehavior:
          $ref: '#/components/schemas/PassthroughBehavior'
          description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
        RequestParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: |-
            A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                           , where 
                              <replaceable>{location}</replaceable>
                            is querystring, path, or header; and 
                              <replaceable>{name}</replaceable>
                            must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
        RequestTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration. Supported only for WebSocket APIs.
        TimeoutInMillis:
          $ref: '#/components/schemas/IntegerWithLengthBetween50And29000'
          description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
    UpdateIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseId:
          $ref: '#/components/schemas/Id'
          description: The integration response ID.
        IntegrationResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
        ResponseTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expressions for the integration response.
    UpdateModelResponse:
      type: object
      properties:
        ContentType:
          $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: 'The content-type for the model, for example, "application/json".'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        ModelId:
          $ref: '#/components/schemas/Id'
          description: The model identifier.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model. Must be alphanumeric.
        Schema:
          $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
    UpdateRouteResult:
      type: object
      properties:
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
        ApiKeyRequired:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          $ref: '#/components/schemas/AuthorizationScopes'
          description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
        AuthorizationType:
          $ref: '#/components/schemas/AuthorizationType'
          description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
        AuthorizerId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteId:
          $ref: '#/components/schemas/Id'
          description: The route ID.
        RouteKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
    UpdateRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
        ResponseModels:
          $ref: '#/components/schemas/RouteModels'
          description: Represents the response models of a route response.
        ResponseParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: Represents the response parameters of a route response.
        RouteResponseId:
          $ref: '#/components/schemas/Id'
          description: Represents the identifier of a route response.
        RouteResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: Represents the route response key of a route response.
    UpdateStageResponse:
      type: object
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
        AutoDeploy:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was created.
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
          description: Default route settings for the stage.
        DeploymentId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the stage.
        LastDeploymentStatusMessage:
          $ref: '#/components/schemas/__string'
          description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
        LastUpdatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was last updated.
        RouteSettings:
          $ref: '#/components/schemas/RouteSettingsMap'
          description: 'Route settings for the stage, by routeKey.'
        StageName:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the stage.
        StageVariables:
          $ref: '#/components/schemas/StageVariablesMap'
          description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with a given resource.
    AccessLogSettings:
      type: object
      properties:
        DestinationArn:
          $ref: '#/components/schemas/Arn'
          description: The ARN of the CloudWatch Logs log group to receive access logs.
        Format:
          $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: 'A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.'
      description: Settings for logging access in a stage.
    Id:
      type: string
      description: The identifier.
    SelectionExpression:
      type: string
      description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
    Cors:
      type: object
      properties:
        AllowCredentials:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
        AllowHeaders:
          $ref: '#/components/schemas/CorsHeaderList'
          description: Represents a collection of allowed headers. Supported only for HTTP APIs.
        AllowMethods:
          $ref: '#/components/schemas/CorsMethodList'
          description: Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
        AllowOrigins:
          $ref: '#/components/schemas/CorsOriginList'
          description: Represents a collection of allowed origins. Supported only for HTTP APIs.
        ExposeHeaders:
          $ref: '#/components/schemas/CorsHeaderList'
          description: Represents a collection of exposed headers. Supported only for HTTP APIs.
        MaxAge:
          $ref: '#/components/schemas/IntegerWithLengthBetweenMinus1And86400'
          description: The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
      description: 'Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
    __timestampIso8601:
      type: string
      format: date-time
    StringWithLengthBetween0And1024:
      type: string
      description: 'A string with a length between [0-1024].'
    ProtocolType:
      type: string
      enum:
        - WEBSOCKET
        - HTTP
      description: Represents a protocol type.
    Tags:
      type: object
      description: Represents a collection of tags associated with the resource.
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And1600'
    Api:
      type: object
      required:
        - RouteSelectionExpression
        - Name
        - ProtocolType
      properties:
        ApiEndpoint:
          $ref: '#/components/schemas/__string'
          description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        ImportInfo:
          $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned on during API import.
      description: Represents an API.
    SelectionKey:
      type: string
      description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
    ApiMapping:
      type: object
      required:
        - Stage
        - ApiId
      properties:
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingId:
          $ref: '#/components/schemas/Id'
          description: The API mapping identifier.
        ApiMappingKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        Stage:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
      description: Represents an API mapping.
    AuthorizationScopes:
      type: array
      description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
      items:
        $ref: '#/components/schemas/StringWithLengthBetween1And64'
    AuthorizationType:
      type: string
      enum:
        - NONE
        - AWS_IAM
        - CUSTOM
        - JWT
      description: 'The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
    IntegerWithLengthBetween0And3600:
      type: integer
      description: |2-

                    <p>An integer with a value between [0-3600].</p>
                 
      minimum: 0
      maximum: 3600
    AuthorizerType:
      type: string
      enum:
        - REQUEST
        - JWT
      description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
    IdentitySourceList:
      type: array
      description: 'The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.'
      items:
        $ref: '#/components/schemas/__string'
    JWTConfiguration:
      type: object
      properties:
        Audience:
          $ref: '#/components/schemas/__listOf__string'
          description: 'A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.'
        Issuer:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: |-
            The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                           . Required for the JWT authorizer type. Supported only for HTTP APIs.
      description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
    Authorizer:
      type: object
      required:
        - Name
      properties:
        AuthorizerCredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for REQUEST authorizers.'
        AuthorizerId:
          $ref: '#/components/schemas/Id'
          description: The authorizer identifier.
        AuthorizerResultTtlInSeconds:
          $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
        AuthorizerType:
          $ref: '#/components/schemas/AuthorizerType'
          description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
        AuthorizerUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: |-
            The authorizer's Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                           , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        IdentitySource:
          $ref: '#/components/schemas/IdentitySourceList'
          description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
        IdentityValidationExpression:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
      description: Represents an authorizer.
    ConnectionType:
      type: string
      enum:
        - INTERNET
        - VPC_LINK
      description: Represents a connection type.
    ContentHandlingStrategy:
      type: string
      enum:
        - CONVERT_TO_BINARY
        - CONVERT_TO_TEXT
      description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
    CreateApiMappingRequest:
      type: object
      required:
        - Stage
        - ApiId
      title: CreateApiMappingRequest
      properties:
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        Stage:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
      description: Creates a new ApiMapping resource to represent an API mapping.
    CreateApiRequest:
      type: object
      required:
        - ProtocolType
        - Name
      title: CreateApiRequest
      properties:
        ApiKeySelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
          description: 'A CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
        CredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null. Currently, this property is not used for HTTP integrations. Supported only for HTTP APIs.'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteKey:
          $ref: '#/components/schemas/SelectionKey'
          description: 'This property is part of quick create. If you don''t specify a routeKey, a default route of $default is created. The $default route acts as a catch-all for any request made to your API, for a particular stage. The $default route key can''t be modified. You can add routes after creating the API, and you can update the route keys of additional routes. Supported only for HTTP APIs.'
        RouteSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with a given resource.
        Target:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'This property is part of quick create. Quick create produces an API with an integration, a default catch-all route, and a default stage which is configured to automatically deploy changes. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. Supported only for HTTP APIs.'
        Version:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
      description: Creates a new Api resource to represent an API.
    CreateAuthorizerRequest:
      type: object
      required:
        - AuthorizerType
        - IdentitySource
        - Name
      title: CreateAuthorizerRequest
      properties:
        AuthorizerCredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for REQUEST authorizers.'
        AuthorizerResultTtlInSeconds:
          $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
        AuthorizerType:
          $ref: '#/components/schemas/AuthorizerType'
          description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
        AuthorizerUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: |-
            The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                           , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        IdentitySource:
          $ref: '#/components/schemas/IdentitySourceList'
          description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT )from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
        IdentityValidationExpression:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: This parameter is not used.
        JwtConfiguration:
          $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
      description: Creates a new Authorizer resource to represent an authorizer.
    CreateDeploymentRequest:
      type: object
      title: CreateDeploymentRequest
      properties:
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment resource.
        StageName:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the Stage resource for the Deployment resource to create.
      description: Creates a new Deployment resource to represent a deployment.
    DeploymentStatus:
      type: string
      enum:
        - PENDING
        - FAILED
        - DEPLOYED
      description: Represents a deployment status.
    DomainNameConfigurations:
      type: array
      description: The domain name configurations.
      items:
        $ref: '#/components/schemas/DomainNameConfiguration'
    CreateDomainNameRequest:
      type: object
      required:
        - DomainName
      title: CreateDomainNameRequest
      properties:
        DomainName:
          $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: The domain name.
        DomainNameConfigurations:
          $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags associated with a domain name.
      description: Creates a new DomainName resource to represent a domain name.
    IntegrationType:
      type: string
      enum:
        - AWS
        - HTTP
        - MOCK
        - HTTP_PROXY
        - AWS_PROXY
      description: Represents an API method integration type.
    PassthroughBehavior:
      type: string
      enum:
        - WHEN_NO_MATCH
        - NEVER
        - WHEN_NO_TEMPLATES
      description: Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
    IntegrationParameters:
      type: object
      description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And512'
    TemplateMap:
      type: object
      description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween0And32K'
    IntegerWithLengthBetween50And29000:
      type: integer
      description: |2-

                    <p>An integer with a value between [50-29000].</p>
                 
      minimum: 50
      maximum: 29000
    CreateIntegrationRequest:
      type: object
      required:
        - IntegrationType
      title: CreateIntegrationRequest
      properties:
        ConnectionId:
          $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The connection ID.
        ConnectionType:
          $ref: '#/components/schemas/ConnectionType'
          description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the integration.
        IntegrationMethod:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationType:
          $ref: '#/components/schemas/IntegrationType'
          description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
        PassthroughBehavior:
          $ref: '#/components/schemas/PassthroughBehavior'
          description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
        RequestParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: |-
            A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                           , where 
                              <replaceable>{location}</replaceable>
                            is querystring, path, or header; and 
                              <replaceable>{name}</replaceable>
                            must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
        RequestTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration.
        TimeoutInMillis:
          $ref: '#/components/schemas/IntegerWithLengthBetween50And29000'
          description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
      description: Creates a new Integration resource to represent an integration.
    CreateIntegrationResponseRequest:
      type: object
      required:
        - IntegrationResponseKey
      title: CreateIntegrationResponseRequest
      properties:
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where {name} is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where {name} is a valid and unique response header name and {JSON-expression} is a valid JSON expression without the $ prefix.'
        ResponseTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration response. Supported only for WebSocket APIs.
      description: Creates a new IntegrationResponse resource to represent an integration response.
    StringWithLengthBetween1And256:
      type: string
      description: 'A string with a length between [1-256].'
    CreateModelRequest:
      type: object
      required:
        - Schema
        - Name
      title: CreateModelRequest
      properties:
        ContentType:
          $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: 'The content-type for the model, for example, "application/json".'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model. Must be alphanumeric.
        Schema:
          $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
      description: Creates a new Model.
    RouteModels:
      type: object
      description: The route models.
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And128'
    RouteParameters:
      type: object
      description: The route parameters.
      additionalProperties:
        $ref: '#/components/schemas/ParameterConstraints'
    CreateRouteRequest:
      type: object
      required:
        - RouteKey
      title: CreateRouteRequest
      properties:
        ApiKeyRequired:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          $ref: '#/components/schemas/AuthorizationScopes'
          description: The authorization scopes supported by this route.
        AuthorizationType:
          $ref: '#/components/schemas/AuthorizationType'
          description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
        AuthorizerId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
      description: Creates a new Route resource to represent a route.
    CreateRouteResponseRequest:
      type: object
      required:
        - RouteResponseKey
      title: CreateRouteResponseRequest
      properties:
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route response. Supported only for WebSocket APIs.
        ResponseModels:
          $ref: '#/components/schemas/RouteModels'
          description: The response models for the route response.
        ResponseParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: The route response parameters.
        RouteResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The route response key.
      description: Creates a new RouteResponse resource to represent a route response.
    RouteSettingsMap:
      type: object
      description: The route settings map.
      additionalProperties:
        $ref: '#/components/schemas/RouteSettings'
    StageVariablesMap:
      type: object
      description: The stage variable map.
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween0And2048'
    CreateStageRequest:
      type: object
      required:
        - StageName
      title: CreateStageRequest
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        AutoDeploy:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
          description: The default route settings for the stage.
        DeploymentId:
          $ref: '#/components/schemas/Id'
          description: The deployment identifier of the API stage.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the API stage.
        RouteSettings:
          $ref: '#/components/schemas/RouteSettingsMap'
          description: 'Route settings for the stage, by routeKey.'
        StageName:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the stage.
        StageVariables:
          $ref: '#/components/schemas/StageVariablesMap'
          description: 'A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with a given resource.
      description: Creates a new Stage resource to represent a stage.
    DeleteApiMappingRequest:
      type: object
      title: DeleteApiMappingRequest
      properties: {}
    DeleteApiRequest:
      type: object
      title: DeleteApiRequest
      properties: {}
    DeleteAuthorizerRequest:
      type: object
      title: DeleteAuthorizerRequest
      properties: {}
    DeleteCorsConfigurationRequest:
      type: object
      title: DeleteCorsConfigurationRequest
      properties: {}
    DeleteDeploymentRequest:
      type: object
      title: DeleteDeploymentRequest
      properties: {}
    DeleteDomainNameRequest:
      type: object
      title: DeleteDomainNameRequest
      properties: {}
    DeleteIntegrationRequest:
      type: object
      title: DeleteIntegrationRequest
      properties: {}
    DeleteIntegrationResponseRequest:
      type: object
      title: DeleteIntegrationResponseRequest
      properties: {}
    DeleteModelRequest:
      type: object
      title: DeleteModelRequest
      properties: {}
    DeleteRouteRequest:
      type: object
      title: DeleteRouteRequest
      properties: {}
    DeleteRouteResponseRequest:
      type: object
      title: DeleteRouteResponseRequest
      properties: {}
    DeleteRouteSettingsRequest:
      type: object
      title: DeleteRouteSettingsRequest
      properties: {}
    DeleteStageRequest:
      type: object
      title: DeleteStageRequest
      properties: {}
    Deployment:
      type: object
      properties:
        AutoDeployed:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether a deployment was automatically released.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The date and time when the Deployment resource was created.
        DeploymentId:
          $ref: '#/components/schemas/Id'
          description: The identifier for the deployment.
        DeploymentStatus:
          $ref: '#/components/schemas/DeploymentStatus'
          description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          $ref: '#/components/schemas/__string'
          description: May contain additional feedback on the status of an API deployment.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment.
      description: An immutable representation of an API that can be called by users. A Deployment must be associated with a Stage for it to be callable over the internet.
    DomainName:
      type: object
      required:
        - DomainName
      properties:
        ApiMappingSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The API mapping selection expression.
        DomainName:
          $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: The name of the DomainName resource.
        DomainNameConfigurations:
          $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags associated with a domain name.
      description: Represents a domain name.
    DomainNameStatus:
      type: string
      enum:
        - AVAILABLE
        - UPDATING
      description: 'The status of the domain name migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.'
    EndpointType:
      type: string
      enum:
        - REGIONAL
        - EDGE
      description: Represents an endpoint type.
    SecurityPolicy:
      type: string
      enum:
        - TLS_1_0
        - TLS_1_2
      description: The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
    GetApiMappingRequest:
      type: object
      title: GetApiMappingRequest
      properties: {}
    GetApiMappingsRequest:
      type: object
      title: GetApiMappingsRequest
      properties: {}
    __listOfApiMapping:
      type: array
      items:
        $ref: '#/components/schemas/ApiMapping'
    NextToken:
      type: string
      description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetApiRequest:
      type: object
      title: GetApiRequest
      properties: {}
    GetApisRequest:
      type: object
      title: GetApisRequest
      properties: {}
    __listOfApi:
      type: array
      items:
        $ref: '#/components/schemas/Api'
    GetAuthorizerRequest:
      type: object
      title: GetAuthorizerRequest
      properties: {}
    GetAuthorizersRequest:
      type: object
      title: GetAuthorizersRequest
      properties: {}
    __listOfAuthorizer:
      type: array
      items:
        $ref: '#/components/schemas/Authorizer'
    GetDeploymentRequest:
      type: object
      title: GetDeploymentRequest
      properties: {}
    GetDeploymentsRequest:
      type: object
      title: GetDeploymentsRequest
      properties: {}
    __listOfDeployment:
      type: array
      items:
        $ref: '#/components/schemas/Deployment'
    GetDomainNameRequest:
      type: object
      title: GetDomainNameRequest
      properties: {}
    GetDomainNamesRequest:
      type: object
      title: GetDomainNamesRequest
      properties: {}
    __listOfDomainName:
      type: array
      items:
        $ref: '#/components/schemas/DomainName'
    GetIntegrationRequest:
      type: object
      title: GetIntegrationRequest
      properties: {}
    GetIntegrationResponseRequest:
      type: object
      title: GetIntegrationResponseRequest
      properties: {}
    GetIntegrationResponsesRequest:
      type: object
      title: GetIntegrationResponsesRequest
      properties: {}
    __listOfIntegrationResponse:
      type: array
      items:
        $ref: '#/components/schemas/IntegrationResponse'
    GetIntegrationsRequest:
      type: object
      title: GetIntegrationsRequest
      properties: {}
    __listOfIntegration:
      type: array
      items:
        $ref: '#/components/schemas/Integration'
    GetModelRequest:
      type: object
      title: GetModelRequest
      properties: {}
    GetModelTemplateRequest:
      type: object
      title: GetModelTemplateRequest
      properties: {}
    GetModelsRequest:
      type: object
      title: GetModelsRequest
      properties: {}
    __listOfModel:
      type: array
      items:
        $ref: '#/components/schemas/Model'
    GetRouteRequest:
      type: object
      title: GetRouteRequest
      properties: {}
    GetRouteResponseRequest:
      type: object
      title: GetRouteResponseRequest
      properties: {}
    GetRouteResponsesRequest:
      type: object
      title: GetRouteResponsesRequest
      properties: {}
    __listOfRouteResponse:
      type: array
      items:
        $ref: '#/components/schemas/RouteResponse'
    GetRoutesRequest:
      type: object
      title: GetRoutesRequest
      properties: {}
    __listOfRoute:
      type: array
      items:
        $ref: '#/components/schemas/Route'
    GetStageRequest:
      type: object
      title: GetStageRequest
      properties: {}
    GetStagesRequest:
      type: object
      title: GetStagesRequest
      properties: {}
    __listOfStage:
      type: array
      items:
        $ref: '#/components/schemas/Stage'
    GetTagsRequest:
      type: object
      title: GetTagsRequest
      properties: {}
    ImportApiRequest:
      type: object
      required:
        - Body
      title: ImportApiRequest
      properties:
        Body:
          $ref: '#/components/schemas/__string'
          description: The OpenAPI definition. Supported only for HTTP APIs.
      description: ''
    Integration:
      type: object
      properties:
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
        ConnectionId:
          $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The connection ID.
        ConnectionType:
          $ref: '#/components/schemas/ConnectionType'
          description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: Represents the description of an integration.
        IntegrationId:
          $ref: '#/components/schemas/Id'
          description: Represents the identifier of an integration.
        IntegrationMethod:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
        IntegrationType:
          $ref: '#/components/schemas/IntegrationType'
          description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
        PassthroughBehavior:
          $ref: '#/components/schemas/PassthroughBehavior'
          description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
        RequestParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: |-
            A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                           , where 
                              <replaceable>{location}</replaceable>
                            is querystring, path, or header; and 
                              <replaceable>{name}</replaceable>
                            must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
        RequestTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration. Supported only for WebSocket APIs.
        TimeoutInMillis:
          $ref: '#/components/schemas/IntegerWithLengthBetween50And29000'
          description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
      description: Represents an integration.
    IntegrationResponse:
      type: object
      required:
        - IntegrationResponseKey
      properties:
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseId:
          $ref: '#/components/schemas/Id'
          description: The integration response ID.
        IntegrationResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
        ResponseTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expressions for the integration response.
      description: Represents an integration response.
    Model:
      type: object
      required:
        - Name
      properties:
        ContentType:
          $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: 'The content-type for the model, for example, "application/json".'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        ModelId:
          $ref: '#/components/schemas/Id'
          description: The model identifier.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model. Must be alphanumeric.
        Schema:
          $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
      description: 'Represents a data model for an API. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Create Models and Mapping Templates for Request and Response Mappings</a>.'
    ReimportApiRequest:
      type: object
      required:
        - Body
      title: ReimportApiRequest
      properties:
        Body:
          $ref: '#/components/schemas/__string'
          description: The OpenAPI definition. Supported only for HTTP APIs.
      description: ''
    Route:
      type: object
      required:
        - RouteKey
      properties:
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
        ApiKeyRequired:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          $ref: '#/components/schemas/AuthorizationScopes'
          description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
        AuthorizationType:
          $ref: '#/components/schemas/AuthorizationType'
          description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
        AuthorizerId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteId:
          $ref: '#/components/schemas/Id'
          description: The route ID.
        RouteKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
      description: Represents a route.
    RouteResponse:
      type: object
      required:
        - RouteResponseKey
      properties:
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
        ResponseModels:
          $ref: '#/components/schemas/RouteModels'
          description: Represents the response models of a route response.
        ResponseParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: Represents the response parameters of a route response.
        RouteResponseId:
          $ref: '#/components/schemas/Id'
          description: Represents the identifier of a route response.
        RouteResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: Represents the route response key of a route response.
      description: Represents a route response.
    Stage:
      type: object
      required:
        - StageName
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        ApiGatewayManaged:
          $ref: '#/components/schemas/__boolean'
          description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
        AutoDeploy:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
        CreatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was created.
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
          description: Default route settings for the stage.
        DeploymentId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the stage.
        LastDeploymentStatusMessage:
          $ref: '#/components/schemas/__string'
          description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
        LastUpdatedDate:
          $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was last updated.
        RouteSettings:
          $ref: '#/components/schemas/RouteSettingsMap'
          description: 'Route settings for the stage, by routeKey.'
        StageName:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the stage.
        StageVariables:
          $ref: '#/components/schemas/StageVariablesMap'
          description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with a given resource.
      description: Represents an API stage.
    TagResourceRequest:
      type: object
      title: TagResourceRequest
      properties:
        Tags:
          $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with a given resource.
      description: Creates a new Tag resource to represent a tag.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateApiMappingRequest:
      type: object
      required:
        - ApiId
      title: UpdateApiMappingRequest
      properties:
        ApiId:
          $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        Stage:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
      description: Updates an ApiMapping.
    UpdateApiRequest:
      type: object
      title: UpdateApiRequest
      properties:
        ApiKeySelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null. Currently, this property is not used for HTTP integrations. If provided, this value replaces the credentials associated with the quick create integration. Supported only for HTTP APIs.'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        RouteKey:
          $ref: '#/components/schemas/SelectionKey'
          description: 'This property is part of quick create. If not specified, the route created using quick create is kept. Otherwise, this value replaces the route key of the quick create route. Additional routes may still be added after the API is updated. Supported only for HTTP APIs.'
        RouteSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Target:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'This property is part of quick create. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. The value provided updates the integration URI and integration type. You can update a quick-created target, but you can''t remove it from an API. Supported only for HTTP APIs.'
        Version:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
      description: Updates an Api.
    UpdateAuthorizerRequest:
      type: object
      title: UpdateAuthorizerRequest
      properties:
        AuthorizerCredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.'
        AuthorizerResultTtlInSeconds:
          $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
        AuthorizerType:
          $ref: '#/components/schemas/AuthorizerType'
          description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
        AuthorizerUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: |-
            The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                           , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        IdentitySource:
          $ref: '#/components/schemas/IdentitySourceList'
          description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
        IdentityValidationExpression:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: This parameter is not used.
        JwtConfiguration:
          $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
      description: Updates an Authorizer.
    UpdateDeploymentRequest:
      type: object
      title: UpdateDeploymentRequest
      properties:
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment resource.
      description: Updates a Deployment.
    UpdateDomainNameRequest:
      type: object
      title: UpdateDomainNameRequest
      properties:
        DomainNameConfigurations:
          $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
      description: Updates a DomainName.
    UpdateIntegrationRequest:
      type: object
      title: UpdateIntegrationRequest
      properties:
        ConnectionId:
          $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The connection ID.
        ConnectionType:
          $ref: '#/components/schemas/ConnectionType'
          description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          $ref: '#/components/schemas/Arn'
          description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the integration
        IntegrationMethod:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationType:
          $ref: '#/components/schemas/IntegrationType'
          description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
        PassthroughBehavior:
          $ref: '#/components/schemas/PassthroughBehavior'
          description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
        RequestParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: |-
            A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                           , where 
                              <replaceable>{location}</replaceable>
                            is querystring, path, or header; and 
                              <replaceable>{name}</replaceable>
                            must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
        RequestTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration.
        TimeoutInMillis:
          $ref: '#/components/schemas/IntegerWithLengthBetween50And29000'
          description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
      description: Updates an Integration.
    UpdateIntegrationResponseRequest:
      type: object
      title: UpdateIntegrationResponseRequest
      properties:
        ContentHandlingStrategy:
          $ref: '#/components/schemas/ContentHandlingStrategy'
          description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          $ref: '#/components/schemas/IntegrationParameters'
          description: |-
            A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.<replaceable>{name}</replaceable>
                           , where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.<replaceable>{name}</replaceable>
                            or integration.response.body.<replaceable>{JSON-expression}</replaceable>
                           , where 
                              <replaceable>{name}</replaceable>
                            is a valid and unique response header name and 
                              <replaceable>{JSON-expression}</replaceable>
                            is a valid JSON expression without the $ prefix.
        ResponseTemplates:
          $ref: '#/components/schemas/TemplateMap'
          description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration response. Supported only for WebSocket APIs.
      description: Updates an IntegrationResponses.
    UpdateModelRequest:
      type: object
      title: UpdateModelRequest
      properties:
        ContentType:
          $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: 'The content-type for the model, for example, "application/json".'
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        Name:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model.
        Schema:
          $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
      description: Updates a Model.
    UpdateRouteRequest:
      type: object
      title: UpdateRouteRequest
      properties:
        ApiKeyRequired:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          $ref: '#/components/schemas/AuthorizationScopes'
          description: The authorization scopes supported by this route.
        AuthorizationType:
          $ref: '#/components/schemas/AuthorizationType'
          description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
        AuthorizerId:
          $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
      description: Updates a Route.
    UpdateRouteResponseRequest:
      type: object
      title: UpdateRouteResponseRequest
      properties:
        ModelSelectionExpression:
          $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route response. Supported only for WebSocket APIs.
        ResponseModels:
          $ref: '#/components/schemas/RouteModels'
          description: The response models for the route response.
        ResponseParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: The route response parameters.
        RouteResponseKey:
          $ref: '#/components/schemas/SelectionKey'
          description: The route response key.
      description: Updates a RouteResponse.
    UpdateStageRequest:
      type: object
      title: UpdateStageRequest
      properties:
        AccessLogSettings:
          $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        AutoDeploy:
          $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage.
        DefaultRouteSettings:
          $ref: '#/components/schemas/RouteSettings'
          description: The default route settings for the stage.
        DeploymentId:
          $ref: '#/components/schemas/Id'
          description: The deployment identifier for the API stage. Can't be updated if autoDeploy is enabled.
        Description:
          $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the API stage.
        RouteSettings:
          $ref: '#/components/schemas/RouteSettingsMap'
          description: Route settings for the stage.
        StageVariables:
          $ref: '#/components/schemas/StageVariablesMap'
          description: 'A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
      description: Updates a Stage.
security:
  - hmac: []
