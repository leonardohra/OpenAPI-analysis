openapi: 3.0.0
info:
  version: '2019-01-25'
  x-release: v4
  title: AWS App Mesh
  description: |-
    <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and
             control microservices. App Mesh standardizes how your microservices communicate, giving you
             end-to-end visibility and helping to ensure high availability for your applications.</p>
             <p>App Mesh gives you consistent visibility and network traffic controls for every
             microservice in an application. You can use App Mesh with AWS Fargate, Amazon ECS, Amazon EKS,
             Kubernetes on AWS, and Amazon EC2.</p>
             <note>
                <p>App Mesh supports microservice applications that use service discovery naming for their
                components. For more information about service discovery on Amazon ECS, see <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a> in the
                   <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and
                   <code>coredns</code> are supported. For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">DNS
                   for Services and Pods</a> in the Kubernetes documentation.</p>
             </note>
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: appmesh
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2019-01-25.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/appmesh/'
servers:
  - url: 'http://appmesh.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS App Mesh multi-region endpoint
  - url: 'https://appmesh.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS App Mesh multi-region endpoint
  - url: 'http://appmesh.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://appmesh.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
paths:
  /v20190125/meshes:
    put:
      operationId: CreateMesh
      description: |-
        <p>Creates a service mesh. A service mesh is a logical boundary for network traffic between
                 the services that reside within it.</p>
                 <p>After you create your service mesh, you can create virtual services, virtual nodes,
                 virtual routers, and routes to distribute traffic between the applications in your
                 mesh.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMeshOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '483':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - meshName
              properties:
                clientToken:
                  description: |-
                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                meshName:
                  description: The name to use for the service mesh.
                  type: string
                  minLength: 1
                  maxLength: 255
                spec:
                  description: An object that represents the specification of a service mesh.
                  type: object
                  properties:
                    egressFilter:
                      $ref: '#/components/schemas/EgressFilter'
                      description: The egress filter rules for the service mesh.
                tags:
                  description: |-
                    Optional metadata that you can apply to the service mesh to assist with categorization
                             and organization. Each tag consists of a key and an optional value, both of which you
                             define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                                a maximum length of 256 characters.
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListMeshes
      description: Returns a list of existing service meshes.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMeshesOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            The maximum number of results returned by <code>ListMeshes</code> in paginated output.
                     When you use this parameter, <code>ListMeshes</code> returns only <code>limit</code>
                     results in a single page along with a <code>nextToken</code> response element. You can see
                     the remaining results of the initial request by sending another <code>ListMeshes</code>
                     request with the returned <code>nextToken</code> value. This value can be between
                     1 and 100. If you don't use this parameter,
                        <code>ListMeshes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: nextToken
          in: query
          required: false
          description: |-
            <p>The <code>nextToken</code> value returned from a previous paginated
                        <code>ListMeshes</code> request where <code>limit</code> was used and the results
                     exceeded the value of that parameter. Pagination continues from the end of the previous
                     results that returned the <code>nextToken</code> value.</p> 
                     <note>
                        <p>This token should be treated as an opaque identifier that is used only to
                            retrieve the next items in a list and not for other programmatic purposes.</p>
                    </note>
          schema:
            type: string
  '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes':
    put:
      operationId: CreateRoute
      description: |-
        <p>Creates a route that is associated with a virtual router.</p>
                 <p>You can use the <code>prefix</code> parameter in your route specification for path-based
                 routing of requests. For example, if your virtual service name is
                    <code>my-service.local</code> and you want the route to match requests to
                    <code>my-service.local/metrics</code>, your prefix should be
                 <code>/metrics</code>.</p>
                 <p>If your route matches a request, you can distribute traffic to one or more target
                 virtual nodes with relative weighting.</p>
                 <p>For more information about routes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html">Routes</a>.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '483':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to create the route in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
                           the account that you specify must share the mesh with your account before you can create 
                         the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualRouterName
          in: path
          required: true
          description: |-
            The name of the virtual router in which to create the route. If the virtual router is in a shared mesh,
                     then you must be the owner of the virtual router resource.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - routeName
                - spec
              properties:
                clientToken:
                  description: |-
                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                routeName:
                  description: The name to use for the route.
                  type: string
                  minLength: 1
                  maxLength: 255
                spec:
                  description: An object that represents a route specification. Specify one route type.
                  type: object
                  properties:
                    grpcRoute:
                      $ref: '#/components/schemas/GrpcRoute'
                      description: An object that represents the specification of a gRPC route.
                    http2Route:
                      $ref: '#/components/schemas/HttpRoute'
                      description: An object that represents the specification of an HTTP/2 route.
                    httpRoute:
                      $ref: '#/components/schemas/HttpRoute'
                      description: An object that represents the specification of an HTTP route.
                    priority:
                      $ref: '#/components/schemas/RoutePriority'
                      description: |-
                        The priority for the route. Routes are matched based on the specified value, where 0 is
                                 the highest priority.
                    tcpRoute:
                      $ref: '#/components/schemas/TcpRoute'
                      description: An object that represents the specification of a TCP route.
                tags:
                  description: |-
                    Optional metadata that you can apply to the route to assist with categorization and
                             organization. Each tag consists of a key and an optional value, both of which you define.
                             Tag keys can have a maximum character length of 128 characters, and tag values can have
                                a maximum length of 256 characters.
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListRoutes
      description: Returns a list of existing routes in a service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoutesOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            The maximum number of results returned by <code>ListRoutes</code> in paginated output.
                     When you use this parameter, <code>ListRoutes</code> returns only <code>limit</code>
                     results in a single page along with a <code>nextToken</code> response element. You can see
                     the remaining results of the initial request by sending another <code>ListRoutes</code>
                     request with the returned <code>nextToken</code> value. This value can be between
                     1 and 100. If you don't use this parameter,
                        <code>ListRoutes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list routes in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: nextToken
          in: query
          required: false
          description: |-
            The <code>nextToken</code> value returned from a previous paginated
                        <code>ListRoutes</code> request where <code>limit</code> was used and the results
                     exceeded the value of that parameter. Pagination continues from the end of the previous
                     results that returned the <code>nextToken</code> value.
          schema:
            type: string
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to list routes in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
  '/v20190125/meshes/{meshName}/virtualNodes':
    put:
      operationId: CreateVirtualNode
      description: |-
        <p>Creates a virtual node within a service mesh.</p>
                 <p>A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS
                 service or a Kubernetes deployment. When you create a virtual node, you can specify the
                 service discovery information for your task group.</p>
                 <p>Any inbound traffic that your virtual node expects should be specified as a
                    <code>listener</code>. Any outbound traffic that your virtual node expects to reach
                 should be specified as a <code>backend</code>.</p>
                 <p>The response metadata for your new virtual node contains the <code>arn</code> that is
                 associated with the virtual node. Set this value (either the full ARN or the truncated
                 resource name: for example, <code>mesh/default/virtualNode/simpleapp</code>) as the
                    <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy
                 proxy container in your task definition or pod spec. This is then mapped to the
                    <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
                 <note>
                    <p>If you require your Envoy stats or tracing to use a different name, you can override
                    the <code>node.cluster</code> value that is set by
                       <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
                       <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
                 </note>
                 <p>For more information about virtual nodes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html">Virtual Nodes</a>.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualNodeOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '483':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to create the virtual node in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
                           the account that you specify must share the mesh with your account before you can create 
                         the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
                - virtualNodeName
              properties:
                clientToken:
                  description: |-
                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object that represents the specification of a virtual node.
                  type: object
                  properties:
                    backendDefaults:
                      $ref: '#/components/schemas/BackendDefaults'
                      description: A reference to an object that represents the defaults for backends.
                    backends:
                      $ref: '#/components/schemas/Backends'
                      description: The backends that the virtual node is expected to send outbound traffic to.
                    listeners:
                      $ref: '#/components/schemas/Listeners'
                      description: |-
                        The listener that the virtual node is expected to receive inbound traffic from.
                                 You can specify one listener.
                    logging:
                      $ref: '#/components/schemas/Logging'
                      description: The inbound and outbound access logging information for the virtual node.
                    serviceDiscovery:
                      $ref: '#/components/schemas/ServiceDiscovery'
                      description: |-
                        The service discovery information for the virtual node. If your virtual node does not
                                 expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>,
                                 then you must specify service discovery information.
                tags:
                  description: |-
                    Optional metadata that you can apply to the virtual node to assist with categorization
                             and organization. Each tag consists of a key and an optional value, both of which you
                             define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                                a maximum length of 256 characters.
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
                virtualNodeName:
                  description: The name to use for the virtual node.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualNodes
      description: Returns a list of existing virtual nodes.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualNodesOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            The maximum number of results returned by <code>ListVirtualNodes</code> in paginated
                     output. When you use this parameter, <code>ListVirtualNodes</code> returns only
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. You can see the remaining results of the initial request by sending another
                        <code>ListVirtualNodes</code> request with the returned <code>nextToken</code> value.
                     This value can be between 1 and 100. If you don't use this
                     parameter, <code>ListVirtualNodes</code> returns up to 100 results and a
                        <code>nextToken</code> value if applicable.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list virtual nodes in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: nextToken
          in: query
          required: false
          description: |-
            The <code>nextToken</code> value returned from a previous paginated
                        <code>ListVirtualNodes</code> request where <code>limit</code> was used and the results
                     exceeded the value of that parameter. Pagination continues from the end of the previous
                     results that returned the <code>nextToken</code> value.
          schema:
            type: string
  '/v20190125/meshes/{meshName}/virtualRouters':
    put:
      operationId: CreateVirtualRouter
      description: |-
        <p>Creates a virtual router within a service mesh.</p>
                 <p>Any inbound traffic that your virtual router expects should be specified as a
                    <code>listener</code>. </p>
                 <p>Virtual routers handle traffic for one or more virtual services within your mesh. After
                 you create your virtual router, create and associate routes for your virtual router that
                 direct incoming requests to different virtual nodes.</p>
                 <p>For more information about virtual routers, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html">Virtual Routers</a>.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualRouterOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '483':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to create the virtual router in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
                           the account that you specify must share the mesh with your account before you can create 
                         the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
                - virtualRouterName
              properties:
                clientToken:
                  description: |-
                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object that represents the specification of a virtual router.
                  type: object
                  properties:
                    listeners:
                      $ref: '#/components/schemas/VirtualRouterListeners'
                      description: |-
                        The listeners that the virtual router is expected to receive inbound traffic from.
                                 You can specify one listener.
                tags:
                  description: |-
                    Optional metadata that you can apply to the virtual router to assist with categorization
                             and organization. Each tag consists of a key and an optional value, both of which you
                             define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                                a maximum length of 256 characters.
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
                virtualRouterName:
                  description: The name to use for the virtual router.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualRouters
      description: Returns a list of existing virtual routers in a service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualRoutersOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            The maximum number of results returned by <code>ListVirtualRouters</code> in paginated
                     output. When you use this parameter, <code>ListVirtualRouters</code> returns only
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. You can see the remaining results of the initial request by sending another
                        <code>ListVirtualRouters</code> request with the returned <code>nextToken</code> value.
                     This value can be between 1 and 100. If you don't use this
                     parameter, <code>ListVirtualRouters</code> returns up to 100 results and
                     a <code>nextToken</code> value if applicable.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list virtual routers in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: nextToken
          in: query
          required: false
          description: |-
            The <code>nextToken</code> value returned from a previous paginated
                        <code>ListVirtualRouters</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
  '/v20190125/meshes/{meshName}/virtualServices':
    put:
      operationId: CreateVirtualService
      description: |-
        <p>Creates a virtual service within a service mesh.</p>
                 <p>A virtual service is an abstraction of a real service that is provided by a virtual node
                 directly or indirectly by means of a virtual router. Dependent services call your virtual
                 service by its <code>virtualServiceName</code>, and those requests are routed to the
                 virtual node or virtual router that is specified as the provider for the virtual
                 service.</p>
                 <p>For more information about virtual services, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html">Virtual Services</a>.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualServiceOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '483':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to create the virtual service in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
                           the account that you specify must share the mesh with your account before you can create 
                         the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
                - virtualServiceName
              properties:
                clientToken:
                  description: |-
                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object that represents the specification of a virtual service.
                  type: object
                  properties:
                    provider:
                      $ref: '#/components/schemas/VirtualServiceProvider'
                      description: |-
                        The App Mesh object that is acting as the provider for a virtual service. You can specify
                                 a single virtual node or virtual router.
                tags:
                  description: |-
                    Optional metadata that you can apply to the virtual service to assist with
                             categorization and organization. Each tag consists of a key and an optional value, both of
                             which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                                a maximum length of 256 characters.
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
                virtualServiceName:
                  description: The name to use for the virtual service.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListVirtualServices
      description: Returns a list of existing virtual services in a service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualServicesOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            The maximum number of results returned by <code>ListVirtualServices</code> in paginated
                     output. When you use this parameter, <code>ListVirtualServices</code> returns only
                        <code>limit</code> results in a single page along with a <code>nextToken</code> response
                     element. You can see the remaining results of the initial request by sending another
                        <code>ListVirtualServices</code> request with the returned <code>nextToken</code> value.
                     This value can be between 1 and 100. If you don't use this
                     parameter, <code>ListVirtualServices</code> returns up to 100 results and
                     a <code>nextToken</code> value if applicable.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to list virtual services in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: nextToken
          in: query
          required: false
          description: |-
            The <code>nextToken</code> value returned from a previous paginated
                        <code>ListVirtualServices</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
  '/v20190125/meshes/{meshName}':
    delete:
      operationId: DeleteMesh
      description: |-
        <p>Deletes an existing service mesh.</p>
                 <p>You must delete all resources (virtual services, routes, virtual routers, and virtual
                 nodes) in the service mesh before you can delete the mesh itself.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMeshOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeMesh
      description: Describes an existing service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeMeshOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
    put:
      operationId: UpdateMesh
      description: Updates an existing service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMeshOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '483':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '484':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  description: |-
                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object that represents the specification of a service mesh.
                  type: object
                  properties:
                    egressFilter:
                      $ref: '#/components/schemas/EgressFilter'
                      description: The egress filter rules for the service mesh.
  '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}':
    delete:
      operationId: DeleteRoute
      description: Deletes an existing route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRouteOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the route in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: routeName
          in: path
          required: true
          description: The name of the route to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to delete the route in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeRoute
      description: Describes an existing route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRouteOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the route resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: routeName
          in: path
          required: true
          description: The name of the route to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router that the route is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateRoute
      description: Updates an existing route for a specified service mesh and virtual router.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '483':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the route resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: routeName
          in: path
          required: true
          description: The name of the route to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router that the route is associated with.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: |-
                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object that represents a route specification. Specify one route type.
                  type: object
                  properties:
                    grpcRoute:
                      $ref: '#/components/schemas/GrpcRoute'
                      description: An object that represents the specification of a gRPC route.
                    http2Route:
                      $ref: '#/components/schemas/HttpRoute'
                      description: An object that represents the specification of an HTTP/2 route.
                    httpRoute:
                      $ref: '#/components/schemas/HttpRoute'
                      description: An object that represents the specification of an HTTP route.
                    priority:
                      $ref: '#/components/schemas/RoutePriority'
                      description: |-
                        The priority for the route. Routes are matched based on the specified value, where 0 is
                                 the highest priority.
                    tcpRoute:
                      $ref: '#/components/schemas/TcpRoute'
                      description: An object that represents the specification of a TCP route.
  '/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}':
    delete:
      operationId: DeleteVirtualNode
      description: |-
        <p>Deletes an existing virtual node.</p>
                 <p>You must delete any virtual services that list a virtual node as a service provider
                 before you can delete the virtual node itself.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualNodeOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the virtual node in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualNode
      description: Describes an existing virtual node.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualNodeOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual node resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateVirtualNode
      description: Updates an existing virtual node in a specified service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualNodeOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '483':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual node resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualNodeName
          in: path
          required: true
          description: The name of the virtual node to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: |-
                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object that represents the specification of a virtual node.
                  type: object
                  properties:
                    backendDefaults:
                      $ref: '#/components/schemas/BackendDefaults'
                      description: A reference to an object that represents the defaults for backends.
                    backends:
                      $ref: '#/components/schemas/Backends'
                      description: The backends that the virtual node is expected to send outbound traffic to.
                    listeners:
                      $ref: '#/components/schemas/Listeners'
                      description: |-
                        The listener that the virtual node is expected to receive inbound traffic from.
                                 You can specify one listener.
                    logging:
                      $ref: '#/components/schemas/Logging'
                      description: The inbound and outbound access logging information for the virtual node.
                    serviceDiscovery:
                      $ref: '#/components/schemas/ServiceDiscovery'
                      description: |-
                        The service discovery information for the virtual node. If your virtual node does not
                                 expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>,
                                 then you must specify service discovery information.
  '/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}':
    delete:
      operationId: DeleteVirtualRouter
      description: |-
        <p>Deletes an existing virtual router.</p>
                 <p>You must delete any routes associated with the virtual router before you can delete the
                 router itself.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualRouterOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ResourceInUseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '485':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the virtual router in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to delete.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualRouter
      description: Describes an existing virtual router.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualRouterOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual router resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to describe.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateVirtualRouter
      description: Updates an existing virtual router in a specified service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualRouterOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '483':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual router resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualRouterName
          in: path
          required: true
          description: The name of the virtual router to update.
          schema:
            type: string
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: |-
                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object that represents the specification of a virtual router.
                  type: object
                  properties:
                    listeners:
                      $ref: '#/components/schemas/VirtualRouterListeners'
                      description: |-
                        The listeners that the virtual router is expected to receive inbound traffic from.
                                 You can specify one listener.
  '/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}':
    delete:
      operationId: DeleteVirtualService
      description: Deletes an existing virtual service.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualServiceOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh to delete the virtual service in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualServiceName
          in: path
          required: true
          description: The name of the virtual service to delete.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeVirtualService
      description: Describes an existing virtual service.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualServiceOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual service resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualServiceName
          in: path
          required: true
          description: The name of the virtual service to describe.
          schema:
            type: string
    put:
      operationId: UpdateVirtualService
      description: Updates an existing virtual service in a specified service mesh.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualServiceOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '483':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '486':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: meshName
          in: path
          required: true
          description: The name of the service mesh that the virtual service resides in.
          schema:
            type: string
            minLength: 1
            maxLength: 255
        - name: meshOwner
          in: query
          required: false
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
          schema:
            type: string
            minLength: 12
            maxLength: 12
        - name: virtualServiceName
          in: path
          required: true
          description: The name of the virtual service to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spec
              properties:
                clientToken:
                  description: |-
                    Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                    request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
                  type: string
                spec:
                  description: An object that represents the specification of a virtual service.
                  type: object
                  properties:
                    provider:
                      $ref: '#/components/schemas/VirtualServiceProvider'
                      description: |-
                        The App Mesh object that is acting as the provider for a virtual service. You can specify
                                 a single virtual node or virtual router.
  '/v20190125/tags#resourceArn':
    get:
      operationId: ListTagsForResource
      description: List the tags for an App Mesh resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: limit
          in: query
          required: false
          description: |-
            The maximum number of tag results returned by <code>ListTagsForResource</code> in
                     paginated output. When this parameter is used, <code>ListTagsForResource</code> returns
                     only <code>limit</code> results in a single page along with a <code>nextToken</code>
                     response element. You can see the remaining results of the initial request by sending
                     another <code>ListTagsForResource</code> request with the returned <code>nextToken</code>
                     value. This value can be between 1 and 100. If you don't use
                     this parameter, <code>ListTagsForResource</code> returns up to 100
                     results and a <code>nextToken</code> value if applicable.
          schema:
            type: integer
            minimum: 1
            maximum: 50
        - name: nextToken
          in: query
          required: false
          description: |-
            The <code>nextToken</code> value returned from a previous paginated
                        <code>ListTagsForResource</code> request where <code>limit</code> was used and the
                     results exceeded the value of that parameter. Pagination continues from the end of the
                     previous results that returned the <code>nextToken</code> value.
          schema:
            type: string
        - name: resourceArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) that identifies the resource to list the tags for.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v20190125/tag#resourceArn':
    put:
      operationId: TagResource
      description: |-
        Associates the specified tags to a resource with the specified <code>resourceArn</code>.
                 If existing tags on a resource aren't specified in the request parameters, they aren't
                 changed. When a resource is deleted, the tags associated with that resource are also
                 deleted.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '486':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the resource to add tags to.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: |-
                    The tags to add to the resource. A tag is an array of key-value pairs.
                             Tag keys can have a maximum character length of 128 characters, and tag values can have
                                a maximum length of 256 characters.
                  type: array
                  items:
                    $ref: '#/components/schemas/TagRef'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v20190125/untag#resourceArn':
    put:
      operationId: UntagResource
      description: Deletes specified tags from a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceOutput'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ForbiddenException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
        '482':
          description: InternalServerErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
        '483':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The Amazon Resource Name (ARN) of the resource to delete tags from.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tagKeys
              properties:
                tagKeys:
                  description: The keys of the tags to be removed.
                  type: array
                  items:
                    $ref: '#/components/schemas/TagKey'
                  minItems: 0
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateMeshOutput:
      type: object
      required:
        - mesh
      properties:
        mesh:
          $ref: '#/components/schemas/MeshData'
          description: The full description of your service mesh following the create call.
      description: ''
    EgressFilter:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/EgressFilterType'
          description: |-
            The egress filter type. By default, the type is <code>DROP_ALL</code>, which allows
                     egress only from virtual nodes to other defined resources in the service mesh (and any
                     traffic to <code>*.amazonaws.com</code> for AWS API calls). You can set the egress filter
                     type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside or outside of the
                     service mesh.
      description: An object that represents the egress filter rules for a service mesh.
    TagRef:
      type: object
      required:
        - key
      properties:
        key:
          $ref: '#/components/schemas/TagKey'
          description: |-
            One part of a key-value pair that make up a tag. A <code>key</code> is a general label
                     that acts like a category for more specific tag values.
        value:
          $ref: '#/components/schemas/TagValue'
          description: |-
            The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a
                     descriptor within a tag category (key).
      description: |-
        Optional metadata that you apply to a resource to assist with categorization and
                 organization. Each tag consists of a key and an optional value, both of which you define.
                 Tag keys can have a maximum character length of 128 characters, and tag values can have
                    a maximum length of 256 characters.
    BadRequestException: {}
    ConflictException: {}
    ForbiddenException: {}
    InternalServerErrorException: {}
    LimitExceededException: {}
    NotFoundException: {}
    ServiceUnavailableException: {}
    TooManyRequestsException: {}
    CreateRouteOutput:
      type: object
      required:
        - route
      properties:
        route:
          $ref: '#/components/schemas/RouteData'
          description: The full description of your mesh following the create call.
      description: ''
    GrpcRoute:
      type: object
      required:
        - action
        - match
      properties:
        action:
          $ref: '#/components/schemas/GrpcRouteAction'
          description: An object that represents the action to take if a match is determined.
        match:
          $ref: '#/components/schemas/GrpcRouteMatch'
          description: An object that represents the criteria for determining a request match.
        retryPolicy:
          $ref: '#/components/schemas/GrpcRetryPolicy'
          description: An object that represents a retry policy.
      description: An object that represents a gRPC route type.
    HttpRoute:
      type: object
      required:
        - action
        - match
      properties:
        action:
          $ref: '#/components/schemas/HttpRouteAction'
          description: An object that represents the action to take if a match is determined.
        match:
          $ref: '#/components/schemas/HttpRouteMatch'
          description: An object that represents the criteria for determining a request match.
        retryPolicy:
          $ref: '#/components/schemas/HttpRetryPolicy'
          description: An object that represents a retry policy.
      description: An object that represents an HTTP or HTTP/2 route type.
    RoutePriority:
      type: integer
      minimum: 0
      maximum: 1000
    TcpRoute:
      type: object
      required:
        - action
      properties:
        action:
          $ref: '#/components/schemas/TcpRouteAction'
          description: The action to take if a match is determined.
      description: An object that represents a TCP route type.
    CreateVirtualNodeOutput:
      type: object
      required:
        - virtualNode
      properties:
        virtualNode:
          $ref: '#/components/schemas/VirtualNodeData'
          description: The full description of your virtual node following the create call.
      description: ''
    BackendDefaults:
      type: object
      properties:
        clientPolicy:
          $ref: '#/components/schemas/ClientPolicy'
          description: A reference to an object that represents a client policy.
      description: An object that represents the default properties for a backend.
    Backends:
      type: array
      items:
        $ref: '#/components/schemas/Backend'
    Listeners:
      type: array
      items:
        $ref: '#/components/schemas/Listener'
      minItems: 0
      maxItems: 1
    Logging:
      type: object
      properties:
        accessLog:
          $ref: '#/components/schemas/AccessLog'
          description: The access log configuration for a virtual node.
      description: An object that represents the logging information for a virtual node.
    ServiceDiscovery:
      type: object
      properties:
        awsCloudMap:
          $ref: '#/components/schemas/AwsCloudMapServiceDiscovery'
          description: Specifies any AWS Cloud Map information for the virtual node.
        dns:
          $ref: '#/components/schemas/DnsServiceDiscovery'
          description: Specifies the DNS information for the virtual node.
      description: An object that represents the service discovery information for a virtual node.
    CreateVirtualRouterOutput:
      type: object
      required:
        - virtualRouter
      properties:
        virtualRouter:
          $ref: '#/components/schemas/VirtualRouterData'
          description: The full description of your virtual router following the create call.
      description: ''
    VirtualRouterListeners:
      type: array
      items:
        $ref: '#/components/schemas/VirtualRouterListener'
      minItems: 1
      maxItems: 1
    CreateVirtualServiceOutput:
      type: object
      required:
        - virtualService
      properties:
        virtualService:
          $ref: '#/components/schemas/VirtualServiceData'
          description: The full description of your virtual service following the create call.
      description: ''
    VirtualServiceProvider:
      type: object
      properties:
        virtualNode:
          $ref: '#/components/schemas/VirtualNodeServiceProvider'
          description: The virtual node associated with a virtual service.
        virtualRouter:
          $ref: '#/components/schemas/VirtualRouterServiceProvider'
          description: The virtual router associated with a virtual service.
      description: An object that represents the provider for a virtual service.
    DeleteMeshOutput:
      type: object
      required:
        - mesh
      properties:
        mesh:
          $ref: '#/components/schemas/MeshData'
          description: The service mesh that was deleted.
      description: ''
    ResourceInUseException: {}
    DeleteRouteOutput:
      type: object
      required:
        - route
      properties:
        route:
          $ref: '#/components/schemas/RouteData'
          description: The route that was deleted.
      description: ''
    DeleteVirtualNodeOutput:
      type: object
      required:
        - virtualNode
      properties:
        virtualNode:
          $ref: '#/components/schemas/VirtualNodeData'
          description: The virtual node that was deleted.
      description: ''
    DeleteVirtualRouterOutput:
      type: object
      required:
        - virtualRouter
      properties:
        virtualRouter:
          $ref: '#/components/schemas/VirtualRouterData'
          description: The virtual router that was deleted.
      description: ''
    DeleteVirtualServiceOutput:
      type: object
      required:
        - virtualService
      properties:
        virtualService:
          $ref: '#/components/schemas/VirtualServiceData'
          description: The virtual service that was deleted.
      description: ''
    DescribeMeshOutput:
      type: object
      required:
        - mesh
      properties:
        mesh:
          $ref: '#/components/schemas/MeshData'
          description: The full description of your service mesh.
      description: ''
    DescribeRouteOutput:
      type: object
      required:
        - route
      properties:
        route:
          $ref: '#/components/schemas/RouteData'
          description: The full description of your route.
      description: ''
    DescribeVirtualNodeOutput:
      type: object
      required:
        - virtualNode
      properties:
        virtualNode:
          $ref: '#/components/schemas/VirtualNodeData'
          description: The full description of your virtual node.
      description: ''
    DescribeVirtualRouterOutput:
      type: object
      required:
        - virtualRouter
      properties:
        virtualRouter:
          $ref: '#/components/schemas/VirtualRouterData'
          description: The full description of your virtual router.
      description: ''
    DescribeVirtualServiceOutput:
      type: object
      required:
        - virtualService
      properties:
        virtualService:
          $ref: '#/components/schemas/VirtualServiceData'
          description: The full description of your virtual service.
      description: ''
    ListMeshesOutput:
      type: object
      required:
        - meshes
      properties:
        meshes:
          $ref: '#/components/schemas/MeshList'
          description: The list of existing service meshes.
        nextToken:
          $ref: '#/components/schemas/String'
          description: |-
            The <code>nextToken</code> value to include in a future <code>ListMeshes</code> request.
                     When the results of a <code>ListMeshes</code> request exceed <code>limit</code>, you can
                     use this value to retrieve the next page of results. This value is <code>null</code> when
                     there are no more results to return.
      description: ''
    ListRoutesOutput:
      type: object
      required:
        - routes
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: |-
            The <code>nextToken</code> value to include in a future <code>ListRoutes</code> request.
                     When the results of a <code>ListRoutes</code> request exceed <code>limit</code>, you can
                     use this value to retrieve the next page of results. This value is <code>null</code> when
                     there are no more results to return.
        routes:
          $ref: '#/components/schemas/RouteList'
          description: The list of existing routes for the specified service mesh and virtual router.
      description: ''
    ListTagsForResourceOutput:
      type: object
      required:
        - tags
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: |-
            The <code>nextToken</code> value to include in a future <code>ListTagsForResource</code>
                     request. When the results of a <code>ListTagsForResource</code> request exceed
                        <code>limit</code>, you can use this value to retrieve the next page of results. This
                     value is <code>null</code> when there are no more results to return.
        tags:
          $ref: '#/components/schemas/TagList'
          description: The tags for the resource.
      description: ''
    ListVirtualNodesOutput:
      type: object
      required:
        - virtualNodes
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: |-
            The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code>
                     request. When the results of a <code>ListVirtualNodes</code> request exceed
                        <code>limit</code>, you can use this value to retrieve the next page of results. This
                     value is <code>null</code> when there are no more results to return.
        virtualNodes:
          $ref: '#/components/schemas/VirtualNodeList'
          description: The list of existing virtual nodes for the specified service mesh.
      description: ''
    ListVirtualRoutersOutput:
      type: object
      required:
        - virtualRouters
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: |-
            The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code>
                     request. When the results of a <code>ListVirtualRouters</code> request exceed
                        <code>limit</code>, you can use this value to retrieve the next page of results. This
                     value is <code>null</code> when there are no more results to return.
        virtualRouters:
          $ref: '#/components/schemas/VirtualRouterList'
          description: The list of existing virtual routers for the specified service mesh.
      description: ''
    ListVirtualServicesOutput:
      type: object
      required:
        - virtualServices
      properties:
        nextToken:
          $ref: '#/components/schemas/String'
          description: |-
            The <code>nextToken</code> value to include in a future <code>ListVirtualServices</code>
                     request. When the results of a <code>ListVirtualServices</code> request exceed
                        <code>limit</code>, you can use this value to retrieve the next page of results. This
                     value is <code>null</code> when there are no more results to return.
        virtualServices:
          $ref: '#/components/schemas/VirtualServiceList'
          description: The list of existing virtual services for the specified service mesh.
      description: ''
    TagResourceOutput:
      type: object
      properties: {}
      description: ''
    TooManyTagsException: {}
    UntagResourceOutput:
      type: object
      properties: {}
      description: ''
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    UpdateMeshOutput:
      type: object
      required:
        - mesh
      properties:
        mesh:
          $ref: '#/components/schemas/MeshData'
      description: ''
    UpdateRouteOutput:
      type: object
      required:
        - route
      properties:
        route:
          $ref: '#/components/schemas/RouteData'
          description: A full description of the route that was updated.
      description: ''
    UpdateVirtualNodeOutput:
      type: object
      required:
        - virtualNode
      properties:
        virtualNode:
          $ref: '#/components/schemas/VirtualNodeData'
          description: A full description of the virtual node that was updated.
      description: ''
    UpdateVirtualRouterOutput:
      type: object
      required:
        - virtualRouter
      properties:
        virtualRouter:
          $ref: '#/components/schemas/VirtualRouterData'
          description: A full description of the virtual router that was updated.
      description: ''
    UpdateVirtualServiceOutput:
      type: object
      required:
        - virtualService
      properties:
        virtualService:
          $ref: '#/components/schemas/VirtualServiceData'
          description: A full description of the virtual service that was updated.
      description: ''
    PortMapping:
      type: object
      required:
        - port
        - protocol
      properties:
        port:
          $ref: '#/components/schemas/PortNumber'
          description: The port used for the port mapping.
        protocol:
          $ref: '#/components/schemas/PortProtocol'
          description: The protocol used for the port mapping. Specify one protocol.
      description: An object that represents a port mapping.
    VirtualRouterListener:
      type: object
      required:
        - portMapping
      properties:
        portMapping:
          $ref: '#/components/schemas/PortMapping'
      description: An object that represents a virtual router listener.
    VirtualRouterStatusCode:
      type: string
      enum:
        - ACTIVE
        - DELETED
        - INACTIVE
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 0
      maxItems: 50
    GrpcRetryPolicyEvents:
      type: array
      items:
        $ref: '#/components/schemas/GrpcRetryPolicyEvent'
      minItems: 1
      maxItems: 5
    HttpRetryPolicyEvents:
      type: array
      items:
        $ref: '#/components/schemas/HttpRetryPolicyEvent'
      minItems: 1
      maxItems: 25
    MaxRetries:
      type: integer
      minimum: 0
    Duration:
      type: object
      properties:
        unit:
          $ref: '#/components/schemas/DurationUnit'
          description: A unit of time.
        value:
          $ref: '#/components/schemas/DurationValue'
          description: A number of time units.
      description: An object that represents a duration of time.
    TcpRetryPolicyEvents:
      type: array
      items:
        $ref: '#/components/schemas/TcpRetryPolicyEvent'
      minItems: 1
      maxItems: 1
    GrpcRetryPolicy:
      type: object
      required:
        - maxRetries
        - perRetryTimeout
      properties:
        grpcRetryEvents:
          $ref: '#/components/schemas/GrpcRetryPolicyEvents'
          description: Specify at least one of the valid values.
        httpRetryEvents:
          $ref: '#/components/schemas/HttpRetryPolicyEvents'
          description: |-
            <p>Specify at least one of the following values.</p>
                     <ul>
                        <li>
                           <p>
                              <b>server-error</b> – HTTP status codes 500, 501,
                              502, 503, 504, 505, 506, 507, 508, 510, and 511</p>
                        </li>
                        <li>
                           <p>
                              <b>gateway-error</b> – HTTP status codes 502,
                              503, and 504</p>
                        </li>
                        <li>
                           <p>
                              <b>client-error</b> – HTTP status code 409</p>
                        </li>
                        <li>
                           <p>
                              <b>stream-error</b> – Retry on refused
                              stream</p>
                        </li>
                     </ul>
        maxRetries:
          $ref: '#/components/schemas/MaxRetries'
          description: The maximum number of retry attempts.
        perRetryTimeout:
          $ref: '#/components/schemas/Duration'
          description: An object that represents a duration of time.
        tcpRetryEvents:
          $ref: '#/components/schemas/TcpRetryPolicyEvents'
          description: Specify a valid value.
      description: 'An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.'
    VirtualNodeData:
      type: object
      required:
        - meshName
        - metadata
        - spec
        - status
        - virtualNodeName
      properties:
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual node resides in.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the virtual node.
        spec:
          $ref: '#/components/schemas/VirtualNodeSpec'
          description: The specifications of the virtual node.
        status:
          $ref: '#/components/schemas/VirtualNodeStatus'
          description: The current status for the virtual node.
        virtualNodeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node.
      description: An object that represents a virtual node returned by a describe operation.
    AccessLog:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/FileAccessLog'
          description: The file object to send virtual node access logs to.
      description: An object that represents the access logging information for a virtual node.
    Long:
      type: integer
    VirtualRouterData:
      type: object
      required:
        - meshName
        - metadata
        - spec
        - status
        - virtualRouterName
      properties:
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual router resides in.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the virtual router.
        spec:
          $ref: '#/components/schemas/VirtualRouterSpec'
          description: The specifications of the virtual router.
        status:
          $ref: '#/components/schemas/VirtualRouterStatus'
          description: The current status of the virtual router.
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router.
      description: An object that represents a virtual router returned by a describe operation.
    String:
      type: string
    VirtualRouterList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualRouterRef'
    Arn:
      type: string
    Timestamp:
      type: string
      format: date-time
    AccountId:
      type: string
      minLength: 12
      maxLength: 12
    ResourceMetadata:
      type: object
      required:
        - arn
        - createdAt
        - lastUpdatedAt
        - meshOwner
        - resourceOwner
        - uid
        - version
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the resource.
        createdAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was created.
        lastUpdatedAt:
          $ref: '#/components/schemas/Timestamp'
          description: The Unix epoch timestamp in seconds for when the resource was last updated.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
                           the ID of the mesh owner, or another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
        uid:
          $ref: '#/components/schemas/String'
          description: The unique identifier for the resource.
        version:
          $ref: '#/components/schemas/Long'
          description: |-
            The version of the resource. Resources are created at version 1, and this version is
                     incremented each time that they're updated.
      description: An object that represents metadata for a resource.
    RouteList:
      type: array
      items:
        $ref: '#/components/schemas/RouteRef'
    ClientPolicy:
      type: object
      properties:
        tls:
          $ref: '#/components/schemas/ClientPolicyTls'
          description: A reference to an object that represents a Transport Layer Security (TLS) client policy.
      description: An object that represents a client policy.
    ServiceName:
      type: string
    VirtualServiceBackend:
      type: object
      required:
        - virtualServiceName
      properties:
        clientPolicy:
          $ref: '#/components/schemas/ClientPolicy'
          description: A reference to an object that represents the client policy for a backend.
        virtualServiceName:
          $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service that is acting as a virtual node backend.
      description: An object that represents a virtual service backend for a virtual node.
    GrpcRouteMetadata:
      type: object
      required:
        - name
      properties:
        invert:
          $ref: '#/components/schemas/Boolean'
          description: Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.
        match:
          $ref: '#/components/schemas/GrpcRouteMetadataMatchMethod'
          description: An object that represents the data to match from the request.
        name:
          $ref: '#/components/schemas/HeaderName'
          description: The name of the route.
      description: An object that represents the match metadata for the route.
    GrpcRouteMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/GrpcRouteMetadata'
      minItems: 1
      maxItems: 10
    ListenerTlsMode:
      type: string
      enum:
        - DISABLED
        - PERMISSIVE
        - STRICT
    HealthCheckThreshold:
      type: integer
      minimum: 2
      maximum: 10
    HealthCheckIntervalMillis:
      type: integer
      minimum: 5000
      maximum: 300000
    PortNumber:
      type: integer
      minimum: 1
      maximum: 65535
    PortProtocol:
      type: string
      enum:
        - grpc
        - http
        - http2
        - tcp
    HealthCheckTimeoutMillis:
      type: integer
      minimum: 2000
      maximum: 60000
    HealthCheckPolicy:
      type: object
      required:
        - healthyThreshold
        - intervalMillis
        - protocol
        - timeoutMillis
        - unhealthyThreshold
      properties:
        healthyThreshold:
          $ref: '#/components/schemas/HealthCheckThreshold'
          description: |-
            The number of consecutive successful health checks that must occur before declaring
                     listener healthy.
        intervalMillis:
          $ref: '#/components/schemas/HealthCheckIntervalMillis'
          description: The time period in milliseconds between each health check execution.
        path:
          $ref: '#/components/schemas/String'
          description: |-
            The destination path for the health check request. This value is only used if the specified 
                     protocol is HTTP or HTTP/2. For any other protocol, this value is ignored.
        port:
          $ref: '#/components/schemas/PortNumber'
          description: |-
            The destination port for the health check request. This port must match the port defined
                     in the <a>PortMapping</a> for the listener.
        protocol:
          $ref: '#/components/schemas/PortProtocol'
          description: 'The protocol for the health check request. If you specify <code>grpc</code>, then your service must conform to the <a href="https://github.com/grpc/grpc/blob/master/doc/health-checking.md">GRPC Health Checking Protocol</a>.'
        timeoutMillis:
          $ref: '#/components/schemas/HealthCheckTimeoutMillis'
          description: |-
            The amount of time to wait when receiving a response from the health check, in
                     milliseconds.
        unhealthyThreshold:
          $ref: '#/components/schemas/HealthCheckThreshold'
          description: |-
            The number of consecutive failed health checks that must occur before declaring a
                     virtual node unhealthy. 
      description: An object that represents the health check policy for a virtual node's listener.
    EgressFilterType:
      type: string
      enum:
        - ALLOW_ALL
        - DROP_ALL
    VirtualServiceRef:
      type: object
      required:
        - arn
        - meshName
        - meshOwner
        - resourceOwner
        - virtualServiceName
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the virtual service.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual service resides in.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
                           the ID of the mesh owner, or another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
        virtualServiceName:
          $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service.
      description: An object that represents a virtual service returned by a list operation.
    VirtualServiceList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualServiceRef'
    ClientPolicyTls:
      type: object
      required:
        - validation
      properties:
        enforce:
          $ref: '#/components/schemas/Boolean'
          description: 'Whether the policy is enforced. The default is <code>True</code>, if a value isn''t specified.'
        ports:
          $ref: '#/components/schemas/PortSet'
          description: The range of ports that the policy is enforced for.
        validation:
          $ref: '#/components/schemas/TlsValidationContext'
          description: A reference to an object that represents a TLS validation context.
      description: An object that represents a Transport Layer Security (TLS) client policy.
    Boolean:
      type: boolean
    HttpRetryPolicyEvent:
      type: string
      minLength: 1
      maxLength: 25
    VirtualServiceData:
      type: object
      required:
        - meshName
        - metadata
        - spec
        - status
        - virtualServiceName
      properties:
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual service resides in.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
        spec:
          $ref: '#/components/schemas/VirtualServiceSpec'
          description: The specifications of the virtual service.
        status:
          $ref: '#/components/schemas/VirtualServiceStatus'
          description: The current status of the virtual service.
        virtualServiceName:
          $ref: '#/components/schemas/ServiceName'
          description: The name of the virtual service.
      description: An object that represents a virtual service returned by a describe operation.
    CertificateAuthorityArns:
      type: array
      items:
        $ref: '#/components/schemas/Arn'
      minItems: 1
      maxItems: 3
    AwsCloudMapName:
      type: string
      pattern: '((?=^.{1,127}$)^([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9])(.([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9]))*$)|(^.$)'
      minLength: 1
      maxLength: 1024
    RouteData:
      type: object
      required:
        - meshName
        - metadata
        - routeName
        - spec
        - status
        - virtualRouterName
      properties:
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the route resides in.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the route.
        routeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the route.
        spec:
          $ref: '#/components/schemas/RouteSpec'
          description: The specifications of the route.
        status:
          $ref: '#/components/schemas/RouteStatus'
          description: The status of the route.
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The virtual router that the route is associated with.
      description: An object that represents a route returned by a describe operation.
    Hostname:
      type: string
    DnsServiceDiscovery:
      type: object
      required:
        - hostname
      properties:
        hostname:
          $ref: '#/components/schemas/Hostname'
          description: 'Specifies the DNS service discovery hostname for the virtual node. '
      description: |-
        An object that represents the DNS service discovery information for your virtual
                 node.
    ResourceName:
      type: string
      minLength: 1
      maxLength: 255
    DeleteRouteInput:
      type: object
      title: DeleteRouteInput
      properties: {}
      description: ''
    VirtualNodeSpec:
      type: object
      properties:
        backendDefaults:
          $ref: '#/components/schemas/BackendDefaults'
          description: A reference to an object that represents the defaults for backends.
        backends:
          $ref: '#/components/schemas/Backends'
          description: The backends that the virtual node is expected to send outbound traffic to.
        listeners:
          $ref: '#/components/schemas/Listeners'
          description: |-
            The listener that the virtual node is expected to receive inbound traffic from.
                     You can specify one listener.
        logging:
          $ref: '#/components/schemas/Logging'
          description: The inbound and outbound access logging information for the virtual node.
        serviceDiscovery:
          $ref: '#/components/schemas/ServiceDiscovery'
          description: |-
            The service discovery information for the virtual node. If your virtual node does not
                     expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>,
                     then you must specify service discovery information.
      description: An object that represents the specification of a virtual node.
    VirtualNodeStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/VirtualNodeStatusCode'
          description: The current status of the virtual node.
      description: An object that represents the current status of the virtual node.
    TcpRetryPolicyEvent:
      type: string
      enum:
        - connection-error
    Backend:
      type: object
      properties:
        virtualService:
          $ref: '#/components/schemas/VirtualServiceBackend'
          description: 'Specifies a virtual service to use as a backend for a virtual node. '
      description: |-
        An object that represents the backends that a virtual node is expected to send outbound
                 traffic to. 
    ListMeshesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListMeshesInput:
      type: object
      title: ListMeshesInput
      properties: {}
      description: ''
    VirtualRouterSpec:
      type: object
      properties:
        listeners:
          $ref: '#/components/schemas/VirtualRouterListeners'
          description: |-
            The listeners that the virtual router is expected to receive inbound traffic from.
                     You can specify one listener.
      description: An object that represents the specification of a virtual router.
    VirtualRouterStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/VirtualRouterStatusCode'
          description: The current status of the virtual router.
      description: 'An object that represents the status of a virtual router. '
    MeshSpec:
      type: object
      properties:
        egressFilter:
          $ref: '#/components/schemas/EgressFilter'
          description: The egress filter rules for the service mesh.
      description: An object that represents the specification of a service mesh.
    UpdateMeshInput:
      type: object
      title: UpdateMeshInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/MeshSpec'
          description: The service mesh specification to apply.
      description: ''
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/TagRef'
      minItems: 0
      maxItems: 50
    CreateVirtualRouterInput:
      type: object
      required:
        - spec
        - virtualRouterName
      title: CreateVirtualRouterInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/VirtualRouterSpec'
          description: The virtual router specification to apply.
        tags:
          tags:
            - not-preview
          $ref: '#/components/schemas/TagList'
          description: |-
            Optional metadata that you can apply to the virtual router to assist with categorization
                     and organization. Each tag consists of a key and an optional value, both of which you
                     define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                        a maximum length of 256 characters.
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The name to use for the virtual router.
      description: ''
    MeshData:
      type: object
      required:
        - meshName
        - metadata
        - spec
        - status
      properties:
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
          description: The associated metadata for the service mesh.
        spec:
          $ref: '#/components/schemas/MeshSpec'
          description: The associated specification for the service mesh.
        status:
          $ref: '#/components/schemas/MeshStatus'
          description: The status of the service mesh.
      description: An object that represents a service mesh returned by a describe operation.
    VirtualServiceStatusCode:
      type: string
      enum:
        - ACTIVE
        - DELETED
        - INACTIVE
    VirtualServiceStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/VirtualServiceStatusCode'
          description: The current status of the virtual service.
      description: An object that represents the status of a virtual service.
    ListenerTlsAcmCertificate:
      type: object
      required:
        - certificateArn
      properties:
        certificateArn:
          $ref: '#/components/schemas/Arn'
          description: 'The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual-node-tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.'
      description: An object that represents an AWS Certicate Manager (ACM) certificate.
    ListenerTlsFileCertificate:
      type: object
      required:
        - certificateChain
        - privateKey
      properties:
        certificateChain:
          $ref: '#/components/schemas/FilePath'
          description: The certificate chain for the certificate.
        privateKey:
          $ref: '#/components/schemas/FilePath'
          description: The private key for a certificate stored on the file system of the virtual node that the proxy is running on.
      description: 'An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual-node-tls.html#virtual-node-tls-prerequisites">Transport Layer Security (TLS)</a>.'
    ListenerTlsCertificate:
      type: object
      properties:
        acm:
          $ref: '#/components/schemas/ListenerTlsAcmCertificate'
          description: A reference to an object that represents an AWS Certicate Manager (ACM) certificate.
        file:
          $ref: '#/components/schemas/ListenerTlsFileCertificate'
          description: A reference to an object that represents a local file certificate.
      description: An object that represents a listener's Transport Layer Security (TLS) certificate.
    AwsCloudMapInstanceAttributeKey:
      type: string
      pattern: '^[a-zA-Z0-9!-~]+$'
      minLength: 1
      maxLength: 255
    MeshList:
      type: array
      items:
        $ref: '#/components/schemas/MeshRef'
    PortSet:
      type: array
      items:
        $ref: '#/components/schemas/PortNumber'
    HttpMethod:
      type: string
      enum:
        - CONNECT
        - DELETE
        - GET
        - HEAD
        - OPTIONS
        - PATCH
        - POST
        - PUT
        - TRACE
    MeshRef:
      type: object
      required:
        - arn
        - meshName
        - meshOwner
        - resourceOwner
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) of the service mesh.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
                           the ID of the mesh owner, or another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
      description: An object that represents a service mesh returned by a list operation.
    TlsValidationContextAcmTrust:
      type: object
      required:
        - certificateAuthorityArns
      properties:
        certificateAuthorityArns:
          $ref: '#/components/schemas/CertificateAuthorityArns'
          description: One or more ACM Amazon Resource Name (ARN)s.
      description: An object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
    TlsValidationContextFileTrust:
      type: object
      required:
        - certificateChain
      properties:
        certificateChain:
          $ref: '#/components/schemas/FilePath'
          description: The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on.
      description: An object that represents a Transport Layer Security (TLS) validation context trust for a local file.
    TlsValidationContextTrust:
      type: object
      properties:
        acm:
          $ref: '#/components/schemas/TlsValidationContextAcmTrust'
          description: A reference to an object that represents a TLS validation context trust for an AWS Certicate Manager (ACM) certificate.
        file:
          $ref: '#/components/schemas/TlsValidationContextFileTrust'
          description: An object that represents a TLS validation context trust for a local file.
      description: An object that represents a Transport Layer Security (TLS) validation context trust.
    AwsCloudMapInstanceAttributeValue:
      type: string
      pattern: '^([a-zA-Z0-9!-~][ ta-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$'
      minLength: 1
      maxLength: 1024
    PercentInt:
      type: integer
      minimum: 0
      maximum: 100
    WeightedTarget:
      type: object
      required:
        - virtualNode
        - weight
      properties:
        virtualNode:
          $ref: '#/components/schemas/ResourceName'
          description: The virtual node to associate with the weighted target.
        weight:
          $ref: '#/components/schemas/PercentInt'
          description: The relative weight of the weighted target.
      description: |-
        An object that represents a target and its relative weight. Traffic is distributed across
                 targets according to their relative weight. For example, a weighted target with a relative
                 weight of 50 receives five times as much traffic as one with a relative weight of
                 10. The total weight for all targets combined must be less than or equal to 100.
    RouteRef:
      type: object
      required:
        - arn
        - meshName
        - meshOwner
        - resourceOwner
        - routeName
        - virtualRouterName
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the route.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the route resides in.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
                           the ID of the mesh owner, or another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
        routeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the route.
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The virtual router that the route is associated with.
      description: An object that represents a route returned by a list operation.
    DeleteVirtualNodeInput:
      type: object
      title: DeleteVirtualNodeInput
      properties: {}
      description: ''
    RouteSpec:
      type: object
      properties:
        grpcRoute:
          $ref: '#/components/schemas/GrpcRoute'
          description: An object that represents the specification of a gRPC route.
        http2Route:
          $ref: '#/components/schemas/HttpRoute'
          description: An object that represents the specification of an HTTP/2 route.
        httpRoute:
          $ref: '#/components/schemas/HttpRoute'
          description: An object that represents the specification of an HTTP route.
        priority:
          $ref: '#/components/schemas/RoutePriority'
          description: |-
            The priority for the route. Routes are matched based on the specified value, where 0 is
                     the highest priority.
        tcpRoute:
          $ref: '#/components/schemas/TcpRoute'
          description: An object that represents the specification of a TCP route.
      description: An object that represents a route specification. Specify one route type.
    RouteStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/RouteStatusCode'
          description: The current status for the route.
      description: An object that represents the current status of a route.
    RouteStatusCode:
      type: string
      enum:
        - ACTIVE
        - DELETED
        - INACTIVE
    HeaderName:
      type: string
      minLength: 1
      maxLength: 50
    GrpcRetryPolicyEvent:
      type: string
      enum:
        - cancelled
        - deadline-exceeded
        - internal
        - resource-exhausted
        - unavailable
    HeaderMatch:
      type: string
      minLength: 1
      maxLength: 255
    MatchRange:
      type: object
      required:
        - end
        - start
      properties:
        end:
          $ref: '#/components/schemas/Long'
          description: The end of the range.
        start:
          $ref: '#/components/schemas/Long'
          description: The start of the range.
      description: 'An object that represents the range of values to match on. The first character of the range is included in the range, though the last character is not. For example, if the range specified were 1-100, only values 1-99 would be matched.'
    HeaderMatchMethod:
      type: object
      properties:
        exact:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must match the specified value exactly.
        prefix:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must begin with the specified characters.
        range:
          $ref: '#/components/schemas/MatchRange'
          description: An object that represents the range of values to match on.
        regex:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must include the specified characters.
        suffix:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must end with the specified characters.
      description: |-
        An object that represents the method and value to match with the header value sent in a
                 request. Specify one match method.
    DurationValue:
      type: integer
      minimum: 0
    TagResourceInput:
      type: object
      required:
        - tags
      title: TagResourceInput
      properties:
        tags:
          $ref: '#/components/schemas/TagList'
          description: |-
            The tags to add to the resource. A tag is an array of key-value pairs.
                     Tag keys can have a maximum character length of 128 characters, and tag values can have
                        a maximum length of 256 characters.
      description: ''
    VirtualNodeServiceProvider:
      type: object
      required:
        - virtualNodeName
      properties:
        virtualNodeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node that is acting as a service provider.
      description: An object that represents a virtual node service provider.
    VirtualRouterServiceProvider:
      type: object
      required:
        - virtualRouterName
      properties:
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router that is acting as a service provider.
      description: An object that represents a virtual node service provider.
    MethodName:
      type: string
      minLength: 1
      maxLength: 50
    GrpcRouteMatch:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/GrpcRouteMetadataList'
          description: An object that represents the data to match from the request.
        methodName:
          $ref: '#/components/schemas/MethodName'
          description: 'The method name to match from the request. If you specify a name, you must also specify a <code>serviceName</code>.'
        serviceName:
          $ref: '#/components/schemas/ServiceName'
          description: The fully qualified domain name for the service to match from the request.
      description: An object that represents the criteria for determining a request match.
    AwsCloudMapInstanceAttributes:
      type: array
      items:
        $ref: '#/components/schemas/AwsCloudMapInstanceAttribute'
    AwsCloudMapServiceDiscovery:
      type: object
      required:
        - namespaceName
        - serviceName
      properties:
        attributes:
          $ref: '#/components/schemas/AwsCloudMapInstanceAttributes'
          description: |-
            A string map that contains attributes with values that you can use to filter instances
                     by any custom attribute that you specified when you registered the instance. Only instances
                     that match all of the specified key/value pairs will be returned.
        namespaceName:
          $ref: '#/components/schemas/AwsCloudMapName'
          description: The name of the AWS Cloud Map namespace to use.
        serviceName:
          $ref: '#/components/schemas/AwsCloudMapName'
          description: The name of the AWS Cloud Map service to use.
      description: |-
        An object that represents the AWS Cloud Map service discovery information for your virtual
                 node.
    MeshStatusCode:
      type: string
      enum:
        - ACTIVE
        - DELETED
        - INACTIVE
    MeshStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/MeshStatusCode'
          description: The current mesh status.
      description: An object that represents the status of a service mesh.
    CreateVirtualNodeInput:
      type: object
      required:
        - spec
        - virtualNodeName
      title: CreateVirtualNodeInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/VirtualNodeSpec'
          description: The virtual node specification to apply.
        tags:
          tags:
            - not-preview
          $ref: '#/components/schemas/TagList'
          description: |-
            Optional metadata that you can apply to the virtual node to assist with categorization
                     and organization. Each tag consists of a key and an optional value, both of which you
                     define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                        a maximum length of 256 characters.
        virtualNodeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name to use for the virtual node.
      description: ''
    FilePath:
      type: string
      minLength: 1
      maxLength: 255
    FileAccessLog:
      type: object
      required:
        - path
      properties:
        path:
          $ref: '#/components/schemas/FilePath'
          description: |-
            <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send
                     access logs to standard out and configure your Envoy container to use a log driver, such as
                        <code>awslogs</code>, to export the access logs to a log storage service such as Amazon
                     CloudWatch Logs. You can also specify a path in the Envoy container's file system to write
                     the files to disk.</p>
                     <note>
                        <p>The Envoy process must have write permissions to the path that you specify here.
                        Otherwise, Envoy fails to bootstrap properly.</p>
                     </note>
      description: An object that represents an access log file.
    DeleteVirtualServiceInput:
      type: object
      title: DeleteVirtualServiceInput
      properties: {}
      description: ''
    TlsValidationContext:
      type: object
      required:
        - trust
      properties:
        trust:
          $ref: '#/components/schemas/TlsValidationContextTrust'
          description: A reference to an object that represents a TLS validation context trust.
      description: An object that represents a Transport Layer Security (TLS) validation context.
    TagsLimit:
      type: integer
      minimum: 1
      maximum: 50
    UpdateVirtualNodeInput:
      type: object
      required:
        - spec
      title: UpdateVirtualNodeInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/VirtualNodeSpec'
          description: The new virtual node specification to apply. This overwrites the existing data.
      description: ''
    ListenerTls:
      type: object
      required:
        - certificate
        - mode
      properties:
        certificate:
          $ref: '#/components/schemas/ListenerTlsCertificate'
          description: A reference to an object that represents a listener's TLS certificate.
        mode:
          $ref: '#/components/schemas/ListenerTlsMode'
          description: |-
            <p>Specify one of the following modes.</p>
                     <ul>
                        <li>
                           <p>
                              <b/>STRICT – Listener only accepts connections with TLS enabled. </p>
                        </li>
                        <li>
                           <p>
                              <b/>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p>
                        </li>
                        <li>
                           <p>
                              <b/>DISABLED –  Listener only accepts connections without TLS. </p>
                        </li>
                     </ul>
      description: An object that represents the Transport Layer Security (TLS) properties for a listener.
    DeleteMeshInput:
      type: object
      title: DeleteMeshInput
      properties: {}
      description: ''
    VirtualServiceSpec:
      type: object
      properties:
        provider:
          $ref: '#/components/schemas/VirtualServiceProvider'
          description: |-
            The App Mesh object that is acting as the provider for a virtual service. You can specify
                     a single virtual node or virtual router.
      description: An object that represents the specification of a virtual service.
    CreateVirtualServiceInput:
      type: object
      required:
        - spec
        - virtualServiceName
      title: CreateVirtualServiceInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/VirtualServiceSpec'
          description: The virtual service specification to apply.
        tags:
          tags:
            - not-preview
          $ref: '#/components/schemas/TagList'
          description: |-
            Optional metadata that you can apply to the virtual service to assist with
                     categorization and organization. Each tag consists of a key and an optional value, both of
                     which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                        a maximum length of 256 characters.
        virtualServiceName:
          $ref: '#/components/schemas/ServiceName'
          description: The name to use for the virtual service.
      description: ''
    UpdateVirtualRouterInput:
      type: object
      required:
        - spec
      title: UpdateVirtualRouterInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/VirtualRouterSpec'
          description: The new virtual router specification to apply. This overwrites the existing data.
      description: ''
    ListTagsForResourceInput:
      type: object
      title: ListTagsForResourceInput
      properties: {}
      description: ''
    DeleteVirtualRouterInput:
      type: object
      title: DeleteVirtualRouterInput
      properties: {}
      description: ''
    DescribeRouteInput:
      type: object
      title: DescribeRouteInput
      properties: {}
      description: ''
    Listener:
      type: object
      required:
        - portMapping
      properties:
        healthCheck:
          $ref: '#/components/schemas/HealthCheckPolicy'
          description: The health check information for the listener.
        portMapping:
          $ref: '#/components/schemas/PortMapping'
          description: The port mapping information for the listener.
        tls:
          $ref: '#/components/schemas/ListenerTls'
          description: A reference to an object that represents the Transport Layer Security (TLS) properties for a listener.
      description: An object that represents a listener for a virtual node.
    VirtualNodeStatusCode:
      type: string
      enum:
        - ACTIVE
        - DELETED
        - INACTIVE
    UpdateVirtualServiceInput:
      type: object
      required:
        - spec
      title: UpdateVirtualServiceInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/VirtualServiceSpec'
          description: |-
            The new virtual service specification to apply. This overwrites the existing
                     data.
      description: ''
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    WeightedTargets:
      type: array
      items:
        $ref: '#/components/schemas/WeightedTarget'
      minItems: 1
      maxItems: 10
    HttpRouteAction:
      type: object
      required:
        - weightedTargets
      properties:
        weightedTargets:
          $ref: '#/components/schemas/WeightedTargets'
          description: An object that represents the targets that traffic is routed to when a request matches the route.
      description: An object that represents the action to take if a match is determined.
    ListRoutesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListRoutesInput:
      type: object
      title: ListRoutesInput
      properties: {}
      description: ''
    VirtualRouterRef:
      type: object
      required:
        - arn
        - meshName
        - meshOwner
        - resourceOwner
        - virtualRouterName
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the virtual router.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual router resides in.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
                           the ID of the mesh owner, or another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
        virtualRouterName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual router.
      description: An object that represents a virtual router returned by a list operation.
    HttpRouteHeader:
      type: object
      required:
        - name
      properties:
        invert:
          $ref: '#/components/schemas/Boolean'
          description: Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.
        match:
          $ref: '#/components/schemas/HeaderMatchMethod'
          description: The <code>HeaderMatchMethod</code> object.
        name:
          $ref: '#/components/schemas/HeaderName'
          description: A name for the HTTP header in the client request that will be matched on.
      description: An object that represents the HTTP header in the request.
    AwsCloudMapInstanceAttribute:
      type: object
      required:
        - key
        - value
      properties:
        key:
          $ref: '#/components/schemas/AwsCloudMapInstanceAttributeKey'
          description: |-
            The name of an AWS Cloud Map service instance attribute key. Any AWS Cloud Map service
                     instance that contains the specified key and value is returned.
        value:
          $ref: '#/components/schemas/AwsCloudMapInstanceAttributeValue'
          description: |-
            The value of an AWS Cloud Map service instance attribute key. Any AWS Cloud Map service
                     instance that contains the specified key and value is returned.
      description: |-
        An object that represents the AWS Cloud Map attribute information for your virtual
                 node.
    VirtualNodeRef:
      type: object
      required:
        - arn
        - meshName
        - meshOwner
        - resourceOwner
        - virtualNodeName
      properties:
        arn:
          $ref: '#/components/schemas/Arn'
          description: The full Amazon Resource Name (ARN) for the virtual node.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the service mesh that the virtual node resides in.
        meshOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
                           the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
        resourceOwner:
          $ref: '#/components/schemas/AccountId'
          description: |-
            The AWS IAM account ID of the resource owner. If the account ID is not your own, then it's
                           the ID of the mesh owner, or another account that the mesh is shared with. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with Shared Meshes</a>.
        virtualNodeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name of the virtual node.
      description: An object that represents a virtual node returned by a list operation.
    CreateMeshInput:
      type: object
      required:
        - meshName
      title: CreateMeshInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        meshName:
          $ref: '#/components/schemas/ResourceName'
          description: The name to use for the service mesh.
        spec:
          $ref: '#/components/schemas/MeshSpec'
          description: The service mesh specification to apply.
        tags:
          tags:
            - not-preview
          $ref: '#/components/schemas/TagList'
          description: |-
            Optional metadata that you can apply to the service mesh to assist with categorization
                     and organization. Each tag consists of a key and an optional value, both of which you
                     define. Tag keys can have a maximum character length of 128 characters, and tag values can have
                        a maximum length of 256 characters.
      description: ''
    GrpcRouteAction:
      type: object
      required:
        - weightedTargets
      properties:
        weightedTargets:
          $ref: '#/components/schemas/WeightedTargets'
          description: An object that represents the targets that traffic is routed to when a request matches the route.
      description: An object that represents the action to take if a match is determined.
    GrpcRouteMetadataMatchMethod:
      type: object
      properties:
        exact:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must match the specified value exactly.
        prefix:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must begin with the specified characters.
        range:
          $ref: '#/components/schemas/MatchRange'
          description: An object that represents the range of values to match on.
        regex:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must include the specified characters.
        suffix:
          $ref: '#/components/schemas/HeaderMatch'
          description: The value sent by the client must end with the specified characters.
      description: An object that represents the match method. Specify one of the match values.
    DescribeVirtualServiceInput:
      type: object
      title: DescribeVirtualServiceInput
      properties: {}
      description: ''
    ListVirtualServicesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListVirtualRoutersLimit:
      type: integer
      minimum: 1
      maximum: 100
    TcpRouteAction:
      type: object
      required:
        - weightedTargets
      properties:
        weightedTargets:
          $ref: '#/components/schemas/WeightedTargets'
          description: An object that represents the targets that traffic is routed to when a request matches the route.
      description: An object that represents the action to take if a match is determined.
    VirtualNodeList:
      type: array
      items:
        $ref: '#/components/schemas/VirtualNodeRef'
    ListVirtualRoutersInput:
      type: object
      title: ListVirtualRoutersInput
      properties: {}
      description: ''
    DurationUnit:
      type: string
      enum:
        - ms
        - s
    ListVirtualServicesInput:
      type: object
      title: ListVirtualServicesInput
      properties: {}
      description: ''
    ListVirtualNodesLimit:
      type: integer
      minimum: 1
      maximum: 100
    ListVirtualNodesInput:
      type: object
      title: ListVirtualNodesInput
      properties: {}
      description: ''
    HttpRouteHeaders:
      type: array
      items:
        $ref: '#/components/schemas/HttpRouteHeader'
      minItems: 1
      maxItems: 10
    HttpScheme:
      type: string
      enum:
        - http
        - https
    HttpRouteMatch:
      type: object
      required:
        - prefix
      properties:
        headers:
          $ref: '#/components/schemas/HttpRouteHeaders'
          description: An object that represents the client request headers to match on.
        method:
          $ref: '#/components/schemas/HttpMethod'
          description: The client request method to match on. Specify only one.
        prefix:
          $ref: '#/components/schemas/String'
          description: |-
            Specifies the path to match requests with. This parameter must always start with
                        <code>/</code>, which by itself matches all requests to the virtual service name. You
                     can also match for path-based routing of requests. For example, if your virtual service
                     name is <code>my-service.local</code> and you want the route to match requests to
                        <code>my-service.local/metrics</code>, your prefix should be
                     <code>/metrics</code>.
        scheme:
          $ref: '#/components/schemas/HttpScheme'
          description: The client request scheme to match on. Specify only one.
      description: |-
        An object that represents the requirements for a route to match HTTP requests for a virtual
                 router.
    DescribeVirtualNodeInput:
      type: object
      title: DescribeVirtualNodeInput
      properties: {}
      description: ''
    HttpRetryPolicy:
      type: object
      required:
        - maxRetries
        - perRetryTimeout
      properties:
        httpRetryEvents:
          $ref: '#/components/schemas/HttpRetryPolicyEvents'
          description: |-
            <p>Specify at least one of the following values.</p>
                     <ul>
                        <li>
                           <p>
                              <b>server-error</b> – HTTP status codes 500, 501,
                              502, 503, 504, 505, 506, 507, 508, 510, and 511</p>
                        </li>
                        <li>
                           <p>
                              <b>gateway-error</b> – HTTP status codes 502,
                              503, and 504</p>
                        </li>
                        <li>
                           <p>
                              <b>client-error</b> – HTTP status code 409</p>
                        </li>
                        <li>
                           <p>
                              <b>stream-error</b> – Retry on refused
                              stream</p>
                        </li>
                     </ul>
        maxRetries:
          $ref: '#/components/schemas/MaxRetries'
          description: The maximum number of retry attempts.
        perRetryTimeout:
          $ref: '#/components/schemas/Duration'
          description: An object that represents a duration of time.
        tcpRetryEvents:
          $ref: '#/components/schemas/TcpRetryPolicyEvents'
          description: Specify a valid value.
      description: 'An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.'
    DescribeVirtualRouterInput:
      type: object
      title: DescribeVirtualRouterInput
      properties: {}
      description: ''
    CreateRouteInput:
      type: object
      required:
        - routeName
        - spec
      title: CreateRouteInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        routeName:
          $ref: '#/components/schemas/ResourceName'
          description: The name to use for the route.
        spec:
          $ref: '#/components/schemas/RouteSpec'
          description: The route specification to apply.
        tags:
          tags:
            - not-preview
          $ref: '#/components/schemas/TagList'
          description: |-
            Optional metadata that you can apply to the route to assist with categorization and
                     organization. Each tag consists of a key and an optional value, both of which you define.
                     Tag keys can have a maximum character length of 128 characters, and tag values can have
                        a maximum length of 256 characters.
      description: ''
    UpdateRouteInput:
      type: object
      required:
        - spec
      title: UpdateRouteInput
      properties:
        clientToken:
          $ref: '#/components/schemas/String'
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/RouteSpec'
          description: The new route specification to apply. This overwrites the existing data.
      description: ''
    DescribeMeshInput:
      type: object
      title: DescribeMeshInput
      properties: {}
      description: ''
    UntagResourceInput:
      type: object
      required:
        - tagKeys
      title: UntagResourceInput
      properties:
        tagKeys:
          $ref: '#/components/schemas/TagKeyList'
          description: The keys of the tags to be removed.
      description: ''
security:
  - hmac: []
