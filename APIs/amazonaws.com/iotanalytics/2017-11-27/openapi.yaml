openapi: 3.0.0
info:
  version: '2017-11-27'
  x-release: v4
  title: AWS IoT Analytics
  description: '<p>AWS IoT Analytics allows you to collect large amounts of device data, process messages, and store them. You can then query the data and run sophisticated analytics on it. AWS IoT Analytics enables advanced data exploration through integration with Jupyter Notebooks and data visualization through integration with Amazon QuickSight.</p> <p>Traditional analytics and business intelligence tools are designed to process structured data. IoT data often comes from devices that record noisy processes (such as temperature, motion, or sound). As a result the data from these devices can have significant gaps, corrupted messages, and false readings that must be cleaned up before analysis can occur. Also, IoT data is often only meaningful in the context of other data from external sources. </p> <p>AWS IoT Analytics automates the steps required to analyze data from IoT devices. AWS IoT Analytics filters, transforms, and enriches IoT data before storing it in a time-series data store for analysis. You can set up the service to collect only the data you need from your devices, apply mathematical transforms to process the data, and enrich the data with device-specific metadata such as device type and location before storing it. Then, you can analyze your data by running queries using the built-in SQL query engine, or perform more complex analytics and machine learning inference. AWS IoT Analytics includes pre-built models for common IoT use cases so you can answer questions like which devices are about to fail or which customers are at risk of abandoning their wearable devices.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: iotanalytics
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iotanalytics-2017-11-27.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/iotanalytics/'
servers:
  - url: 'http://iotanalytics.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS IoT Analytics multi-region endpoint
  - url: 'https://iotanalytics.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS IoT Analytics multi-region endpoint
  - url: 'http://iotanalytics.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT Analytics endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://iotanalytics.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT Analytics endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /messages/batch:
    post:
      operationId: BatchPutMessage
      description: Sends messages to a channel.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPutMessageResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - channelName
                - messages
              properties:
                channelName:
                  description: The name of the channel where the messages are sent.
                  type: string
                  pattern: '^[a-zA-Z0-9_]+$'
                  minLength: 1
                  maxLength: 128
                messages:
                  description: '<p>The list of messages to be sent. Each message has format: ''{ "messageId": "string", "payload": "string"}''.</p> <p>Note that the field names of message payloads (data) that you send to AWS IoT Analytics:</p> <ul> <li> <p>Must contain only alphanumeric characters and undescores (_); no other special characters are allowed.</p> </li> <li> <p>Must begin with an alphabetic character or single underscore (_).</p> </li> <li> <p>Cannot contain hyphens (-).</p> </li> <li> <p>In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$". </p> </li> <li> <p>Cannot be greater than 255 characters.</p> </li> <li> <p>Are case-insensitive. (Fields named "foo" and "FOO" in the same payload are considered duplicates.)</p> </li> </ul> <p>For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads. </p>'
                  type: array
                  items:
                    $ref: '#/components/schemas/Message'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/pipelines/{pipelineName}/reprocessing/{reprocessingId}':
    delete:
      operationId: CancelPipelineReprocessing
      description: Cancels the reprocessing of data through the pipeline.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelPipelineReprocessingResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: pipelineName
          in: path
          required: true
          description: The name of pipeline for which data reprocessing is canceled.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
        - name: reprocessingId
          in: path
          required: true
          description: The ID of the reprocessing task (returned by "StartPipelineReprocessing").
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /channels:
    post:
      operationId: CreateChannel
      description: 'Creates a channel. A channel collects data from an MQTT topic and archives the raw, unprocessed messages before publishing the data to a pipeline.'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChannelResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - channelName
              properties:
                channelName:
                  description: The name of the channel.
                  type: string
                  pattern: '^[a-zA-Z0-9_]+$'
                  minLength: 1
                  maxLength: 128
                channelStorage:
                  description: 'Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.'
                  type: object
                  properties:
                    serviceManagedS3:
                      $ref: '#/components/schemas/ServiceManagedChannelS3Storage'
                      description: Use this to store channel data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the channel.
                    customerManagedS3:
                      $ref: '#/components/schemas/CustomerManagedChannelS3Storage'
                      description: 'Use this to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the channel.'
                retentionPeriod:
                  description: 'How long, in days, message data is kept.'
                  type: object
                  properties:
                    unlimited:
                      $ref: '#/components/schemas/UnlimitedRetentionPeriod'
                      description: 'If true, message data is kept indefinitely.'
                    numberOfDays:
                      $ref: '#/components/schemas/RetentionPeriodInDays'
                      description: The number of days that message data is kept. The "unlimited" parameter must be false.
                tags:
                  description: Metadata which can be used to manage the channel.
                  type: array
                  items:
                    $ref: '#/components/schemas/Tag'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListChannels
      description: Retrieves a list of channels.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChannelsResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: <p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>
          schema:
            type: integer
            minimum: 1
            maximum: 250
  /datasets:
    post:
      operationId: CreateDataset
      description: Creates a data set. A data set stores data retrieved from a data store by applying a "queryAction" (a SQL query) or a "containerAction" (executing a containerized application). This operation creates the skeleton of a data set. The data set can be populated manually by calling "CreateDatasetContent" or automatically according to a "trigger" you specify.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDatasetResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - datasetName
                - actions
              properties:
                datasetName:
                  description: The name of the data set.
                  type: string
                  pattern: '^[a-zA-Z0-9_]+$'
                  minLength: 1
                  maxLength: 128
                actions:
                  description: A list of actions that create the data set contents.
                  type: array
                  items:
                    $ref: '#/components/schemas/DatasetAction'
                  minItems: 1
                  maxItems: 1
                triggers:
                  description: A list of triggers. A trigger causes data set contents to be populated at a specified time interval or when another data set's contents are created. The list of triggers can be empty or contain up to five <b>DataSetTrigger</b> objects.
                  type: array
                  items:
                    $ref: '#/components/schemas/DatasetTrigger'
                  minItems: 0
                  maxItems: 5
                contentDeliveryRules:
                  description: When data set contents are created they are delivered to destinations specified here.
                  type: array
                  items:
                    $ref: '#/components/schemas/DatasetContentDeliveryRule'
                  minItems: 0
                  maxItems: 20
                retentionPeriod:
                  description: 'How long, in days, message data is kept.'
                  type: object
                  properties:
                    unlimited:
                      $ref: '#/components/schemas/UnlimitedRetentionPeriod'
                      description: 'If true, message data is kept indefinitely.'
                    numberOfDays:
                      $ref: '#/components/schemas/RetentionPeriodInDays'
                      description: The number of days that message data is kept. The "unlimited" parameter must be false.
                versioningConfiguration:
                  description: Information about the versioning of data set contents.
                  type: object
                  properties:
                    unlimited:
                      $ref: '#/components/schemas/UnlimitedVersioning'
                      description: 'If true, unlimited versions of data set contents will be kept.'
                    maxVersions:
                      $ref: '#/components/schemas/MaxVersions'
                      description: How many versions of data set contents will be kept. The "unlimited" parameter must be false.
                tags:
                  description: Metadata which can be used to manage the data set.
                  type: array
                  items:
                    $ref: '#/components/schemas/Tag'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListDatasets
      description: Retrieves information about data sets.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatasetsResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: <p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>
          schema:
            type: integer
            minimum: 1
            maximum: 250
  '/datasets/{datasetName}/content':
    post:
      operationId: CreateDatasetContent
      description: Creates the content of a data set by applying a "queryAction" (a SQL query) or a "containerAction" (executing a containerized application).
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDatasetContentResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteDatasetContent
      description: Deletes the content of the specified data set.
      responses:
        '204':
          description: Success
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set whose content is deleted.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
        - name: versionId
          in: query
          required: false
          description: 'The version of the data set whose content is deleted. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to delete the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.'
          schema:
            type: string
            minLength: 7
            maxLength: 36
    get:
      operationId: GetDatasetContent
      description: Retrieves the contents of a data set as pre-signed URIs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDatasetContentResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set whose contents are retrieved.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
        - name: versionId
          in: query
          required: false
          description: 'The version of the data set whose contents are retrieved. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to retrieve the contents of the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.'
          schema:
            type: string
            minLength: 7
            maxLength: 36
  /datastores:
    post:
      operationId: CreateDatastore
      description: 'Creates a data store, which is a repository for messages.'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDatastoreResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - datastoreName
              properties:
                datastoreName:
                  description: The name of the data store.
                  type: string
                  pattern: '^[a-zA-Z0-9_]+$'
                  minLength: 1
                  maxLength: 128
                datastoreStorage:
                  description: 'Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.'
                  type: object
                  properties:
                    serviceManagedS3:
                      $ref: '#/components/schemas/ServiceManagedDatastoreS3Storage'
                      description: Use this to store data store data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.
                    customerManagedS3:
                      $ref: '#/components/schemas/CustomerManagedDatastoreS3Storage'
                      description: 'Use this to store data store data in an S3 bucket that you manage. When customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.'
                retentionPeriod:
                  description: 'How long, in days, message data is kept.'
                  type: object
                  properties:
                    unlimited:
                      $ref: '#/components/schemas/UnlimitedRetentionPeriod'
                      description: 'If true, message data is kept indefinitely.'
                    numberOfDays:
                      $ref: '#/components/schemas/RetentionPeriodInDays'
                      description: The number of days that message data is kept. The "unlimited" parameter must be false.
                tags:
                  description: Metadata which can be used to manage the data store.
                  type: array
                  items:
                    $ref: '#/components/schemas/Tag'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListDatastores
      description: Retrieves a list of data stores.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatastoresResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: <p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>
          schema:
            type: integer
            minimum: 1
            maximum: 250
  /pipelines:
    post:
      operationId: CreatePipeline
      description: 'Creates a pipeline. A pipeline consumes messages from a channel and allows you to process the messages before storing them in a data store. You must specify both a <code>channel</code> and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in the <code>pipelineActivities</code> array.'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePipelineResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pipelineName
                - pipelineActivities
              properties:
                pipelineName:
                  description: The name of the pipeline.
                  type: string
                  pattern: '^[a-zA-Z0-9_]+$'
                  minLength: 1
                  maxLength: 128
                pipelineActivities:
                  description: '<p>A list of "PipelineActivity" objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <b>PipelineActivity</b> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity, for example:</p> <p> <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]</code> </p>'
                  type: array
                  items:
                    $ref: '#/components/schemas/PipelineActivity'
                  minItems: 1
                  maxItems: 25
                tags:
                  description: Metadata which can be used to manage the pipeline.
                  type: array
                  items:
                    $ref: '#/components/schemas/Tag'
                  minItems: 1
                  maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListPipelines
      description: Retrieves a list of pipelines.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPipelinesResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: <p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>
          schema:
            type: integer
            minimum: 1
            maximum: 250
  '/channels/{channelName}':
    delete:
      operationId: DeleteChannel
      description: Deletes the specified channel.
      responses:
        '204':
          description: Success
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: channelName
          in: path
          required: true
          description: The name of the channel to delete.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeChannel
      description: Retrieves information about a channel.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeChannelResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: channelName
          in: path
          required: true
          description: The name of the channel whose information is retrieved.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
        - name: includeStatistics
          in: query
          required: false
          description: 'If true, additional statistical information about the channel is included in the response. This feature cannot be used with a channel whose S3 storage is customer-managed.'
          schema:
            type: boolean
    put:
      operationId: UpdateChannel
      description: Updates the settings of a channel.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: channelName
          in: path
          required: true
          description: The name of the channel to be updated.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                channelStorage:
                  description: 'Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.'
                  type: object
                  properties:
                    serviceManagedS3:
                      $ref: '#/components/schemas/ServiceManagedChannelS3Storage'
                      description: Use this to store channel data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the channel.
                    customerManagedS3:
                      $ref: '#/components/schemas/CustomerManagedChannelS3Storage'
                      description: 'Use this to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the channel.'
                retentionPeriod:
                  description: 'How long, in days, message data is kept.'
                  type: object
                  properties:
                    unlimited:
                      $ref: '#/components/schemas/UnlimitedRetentionPeriod'
                      description: 'If true, message data is kept indefinitely.'
                    numberOfDays:
                      $ref: '#/components/schemas/RetentionPeriodInDays'
                      description: The number of days that message data is kept. The "unlimited" parameter must be false.
  '/datasets/{datasetName}':
    delete:
      operationId: DeleteDataset
      description: <p>Deletes the specified data set.</p> <p>You do not have to delete the content of the data set before you perform this operation.</p>
      responses:
        '204':
          description: Success
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set to delete.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeDataset
      description: Retrieves information about a data set.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeDatasetResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set whose information is retrieved.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
    put:
      operationId: UpdateDataset
      description: Updates the settings of a data set.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set to update.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - actions
              properties:
                actions:
                  description: A list of "DatasetAction" objects.
                  type: array
                  items:
                    $ref: '#/components/schemas/DatasetAction'
                  minItems: 1
                  maxItems: 1
                triggers:
                  description: A list of "DatasetTrigger" objects. The list can be empty or can contain up to five <b>DataSetTrigger</b> objects.
                  type: array
                  items:
                    $ref: '#/components/schemas/DatasetTrigger'
                  minItems: 0
                  maxItems: 5
                contentDeliveryRules:
                  description: When data set contents are created they are delivered to destinations specified here.
                  type: array
                  items:
                    $ref: '#/components/schemas/DatasetContentDeliveryRule'
                  minItems: 0
                  maxItems: 20
                retentionPeriod:
                  description: 'How long, in days, message data is kept.'
                  type: object
                  properties:
                    unlimited:
                      $ref: '#/components/schemas/UnlimitedRetentionPeriod'
                      description: 'If true, message data is kept indefinitely.'
                    numberOfDays:
                      $ref: '#/components/schemas/RetentionPeriodInDays'
                      description: The number of days that message data is kept. The "unlimited" parameter must be false.
                versioningConfiguration:
                  description: Information about the versioning of data set contents.
                  type: object
                  properties:
                    unlimited:
                      $ref: '#/components/schemas/UnlimitedVersioning'
                      description: 'If true, unlimited versions of data set contents will be kept.'
                    maxVersions:
                      $ref: '#/components/schemas/MaxVersions'
                      description: How many versions of data set contents will be kept. The "unlimited" parameter must be false.
  '/datastores/{datastoreName}':
    delete:
      operationId: DeleteDatastore
      description: Deletes the specified data store.
      responses:
        '204':
          description: Success
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: datastoreName
          in: path
          required: true
          description: The name of the data store to delete.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeDatastore
      description: Retrieves information about a data store.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeDatastoreResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: datastoreName
          in: path
          required: true
          description: The name of the data store
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
        - name: includeStatistics
          in: query
          required: false
          description: 'If true, additional statistical information about the data store is included in the response. This feature cannot be used with a data store whose S3 storage is customer-managed.'
          schema:
            type: boolean
    put:
      operationId: UpdateDatastore
      description: Updates the settings of a data store.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: datastoreName
          in: path
          required: true
          description: The name of the data store to be updated.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                retentionPeriod:
                  description: 'How long, in days, message data is kept.'
                  type: object
                  properties:
                    unlimited:
                      $ref: '#/components/schemas/UnlimitedRetentionPeriod'
                      description: 'If true, message data is kept indefinitely.'
                    numberOfDays:
                      $ref: '#/components/schemas/RetentionPeriodInDays'
                      description: The number of days that message data is kept. The "unlimited" parameter must be false.
                datastoreStorage:
                  description: 'Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.'
                  type: object
                  properties:
                    serviceManagedS3:
                      $ref: '#/components/schemas/ServiceManagedDatastoreS3Storage'
                      description: Use this to store data store data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.
                    customerManagedS3:
                      $ref: '#/components/schemas/CustomerManagedDatastoreS3Storage'
                      description: 'Use this to store data store data in an S3 bucket that you manage. When customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.'
  '/pipelines/{pipelineName}':
    delete:
      operationId: DeletePipeline
      description: Deletes the specified pipeline.
      responses:
        '204':
          description: Success
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: pipelineName
          in: path
          required: true
          description: The name of the pipeline to delete.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribePipeline
      description: Retrieves information about a pipeline.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribePipelineResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: pipelineName
          in: path
          required: true
          description: The name of the pipeline whose information is retrieved.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
    put:
      operationId: UpdatePipeline
      description: 'Updates the settings of a pipeline. You must specify both a <code>channel</code> and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in the <code>pipelineActivities</code> array.'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      parameters:
        - name: pipelineName
          in: path
          required: true
          description: The name of the pipeline to update.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pipelineActivities
              properties:
                pipelineActivities:
                  description: '<p>A list of "PipelineActivity" objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <b>PipelineActivity</b> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity, for example:</p> <p> <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]</code> </p>'
                  type: array
                  items:
                    $ref: '#/components/schemas/PipelineActivity'
                  minItems: 1
                  maxItems: 25
  /logging:
    get:
      operationId: DescribeLoggingOptions
      description: Retrieves the current settings of the AWS IoT Analytics logging options.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeLoggingOptionsResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters: []
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    put:
      operationId: PutLoggingOptions
      description: '<p>Sets or updates the AWS IoT Analytics logging options.</p> <p>Note that if you update the value of any <code>loggingOptions</code> field, it takes up to one minute for the change to take effect. Also, if you change the policy attached to the role you specified in the roleArn field (for example, to correct an invalid policy) it takes up to 5 minutes for that change to take effect. </p>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - loggingOptions
              properties:
                loggingOptions:
                  description: Information about logging options.
                  type: object
                  properties:
                    roleArn:
                      $ref: '#/components/schemas/RoleArn'
                      description: The ARN of the role that grants permission to AWS IoT Analytics to perform logging.
                    level:
                      $ref: '#/components/schemas/LoggingLevel'
                      description: 'The logging level. Currently, only "ERROR" is supported.'
                    enabled:
                      $ref: '#/components/schemas/LoggingEnabled'
                      description: 'If true, logging is enabled for AWS IoT Analytics.'
  '/datasets/{datasetName}/contents':
    get:
      operationId: ListDatasetContents
      description: Lists information about data set contents that have been created.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatasetContentsResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: datasetName
          in: path
          required: true
          description: The name of the data set whose contents information you want to list.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return in this request.
          schema:
            type: integer
            minimum: 1
            maximum: 250
        - name: scheduledOnOrAfter
          in: query
          required: false
          description: A filter to limit results to those data set contents whose creation is scheduled on or after the given time. See the field <code>triggers.schedule</code> in the CreateDataset request. (timestamp)
          schema:
            type: string
            format: date-time
        - name: scheduledBefore
          in: query
          required: false
          description: A filter to limit results to those data set contents whose creation is scheduled before the given time. See the field <code>triggers.schedule</code> in the CreateDataset request. (timestamp)
          schema:
            type: string
            format: date-time
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags#resourceArn':
    get:
      operationId: ListTagsForResource
      description: Lists the tags (metadata) which you have assigned to the resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The ARN of the resource whose tags you want to list.
          schema:
            type: string
            minLength: 20
            maxLength: 2048
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The ARN of the resource whose tags you want to modify.
          schema:
            type: string
            minLength: 20
            maxLength: 2048
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: The new or modified tags for the resource.
                  type: array
                  items:
                    $ref: '#/components/schemas/Tag'
                  minItems: 1
                  maxItems: 50
  /pipelineactivities/run:
    post:
      operationId: RunPipelineActivity
      description: Simulates the results of running a pipeline activity on a message payload.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunPipelineActivityResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pipelineActivity
                - payloads
              properties:
                pipelineActivity:
                  description: An activity that performs a transformation on a message.
                  type: object
                  properties:
                    channel:
                      $ref: '#/components/schemas/ChannelActivity'
                      description: Determines the source of the messages to be processed.
                    lambda:
                      $ref: '#/components/schemas/LambdaActivity'
                      description: Runs a Lambda function to modify the message.
                    datastore:
                      $ref: '#/components/schemas/DatastoreActivity'
                      description: Specifies where to store the processed message data.
                    addAttributes:
                      $ref: '#/components/schemas/AddAttributesActivity'
                      description: Adds other attributes based on existing attributes in the message.
                    removeAttributes:
                      $ref: '#/components/schemas/RemoveAttributesActivity'
                      description: Removes attributes from a message.
                    selectAttributes:
                      $ref: '#/components/schemas/SelectAttributesActivity'
                      description: 'Creates a new message using only the specified attributes from the original message. '
                    filter:
                      $ref: '#/components/schemas/FilterActivity'
                      description: Filters a message based on its attributes.
                    math:
                      $ref: '#/components/schemas/MathActivity'
                      description: Computes an arithmetic expression using the message's attributes and adds it to the message.
                    deviceRegistryEnrich:
                      $ref: '#/components/schemas/DeviceRegistryEnrichActivity'
                      description: Adds data from the AWS IoT device registry to your message.
                    deviceShadowEnrich:
                      $ref: '#/components/schemas/DeviceShadowEnrichActivity'
                      description: Adds information from the AWS IoT Device Shadows service to a message.
                payloads:
                  description: The sample message payloads on which the pipeline activity is run.
                  type: array
                  items:
                    $ref: '#/components/schemas/MessagePayload'
                  minItems: 1
                  maxItems: 10
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/channels/{channelName}/sample':
    get:
      operationId: SampleChannelData
      description: Retrieves a sample of messages from the specified channel ingested during the specified timeframe. Up to 10 messages can be retrieved.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleChannelDataResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: channelName
          in: path
          required: true
          description: The name of the channel whose message samples are retrieved.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
        - name: maxMessages
          in: query
          required: false
          description: 'The number of sample messages to be retrieved. The limit is 10, the default is also 10.'
          schema:
            type: integer
            minimum: 1
            maximum: 10
        - name: startTime
          in: query
          required: false
          description: The start of the time window from which sample messages are retrieved.
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          required: false
          description: The end of the time window from which sample messages are retrieved.
          schema:
            type: string
            format: date-time
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/pipelines/{pipelineName}/reprocessing':
    post:
      operationId: StartPipelineReprocessing
      description: Starts the reprocessing of raw message data through the pipeline.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartPipelineReprocessingResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: ResourceAlreadyExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '482':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '483':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '484':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      parameters:
        - name: pipelineName
          in: path
          required: true
          description: The name of the pipeline on which to start reprocessing.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_]+$'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                startTime:
                  description: The start time (inclusive) of raw message data that is reprocessed.
                  type: string
                  format: date-time
                endTime:
                  description: The end time (exclusive) of raw message data that is reprocessed.
                  type: string
                  format: date-time
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags#resourceArn&tagKeys':
    delete:
      operationId: UntagResource
      description: Removes the given tags (metadata) from the resource.
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: InvalidRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '481':
          description: InternalFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '482':
          description: ServiceUnavailableException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The ARN of the resource whose tags you want to remove.
          schema:
            type: string
            minLength: 20
            maxLength: 2048
        - name: tagKeys
          in: query
          required: true
          description: The keys of those tags which you want to remove.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TagKey'
            minItems: 1
            maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchPutMessageResponse:
      type: object
      properties:
        batchPutMessageErrorEntries:
          $ref: '#/components/schemas/BatchPutMessageErrorEntries'
          description: A list of any errors encountered when sending the messages to the channel.
    Message:
      type: object
      required:
        - messageId
        - payload
      properties:
        messageId:
          $ref: '#/components/schemas/MessageId'
          description: The ID you wish to assign to the message. Each "messageId" must be unique within each batch sent.
        payload:
          $ref: '#/components/schemas/MessagePayload'
          description: The payload of the message. This may be a JSON string or a Base64-encoded string representing binary data (in which case you must decode it by means of a pipeline activity).
      description: Information about a message.
    ResourceNotFoundException: {}
    InvalidRequestException: {}
    InternalFailureException: {}
    ServiceUnavailableException: {}
    ThrottlingException: {}
    CancelPipelineReprocessingResponse:
      type: object
      properties: {}
    CreateChannelResponse:
      type: object
      properties:
        channelName:
          $ref: '#/components/schemas/ChannelName'
          description: The name of the channel.
        channelArn:
          $ref: '#/components/schemas/ChannelArn'
          description: The ARN of the channel.
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: 'How long, in days, message data is kept for the channel.'
    ServiceManagedChannelS3Storage:
      type: object
      properties: {}
      description: Use this to store channel data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the channel.
    CustomerManagedChannelS3Storage:
      type: object
      required:
        - bucket
        - roleArn
      properties:
        bucket:
          $ref: '#/components/schemas/BucketName'
          description: The name of the Amazon S3 bucket in which channel data is stored.
        keyPrefix:
          $ref: '#/components/schemas/S3KeyPrefix'
          description: '[Optional] The prefix used to create the keys of the channel data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a ''/''.'
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The ARN of the role which grants AWS IoT Analytics permission to interact with your Amazon S3 resources.
      description: 'Use this to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the channel.'
    UnlimitedRetentionPeriod:
      type: boolean
    RetentionPeriodInDays:
      type: integer
      minimum: 1
    Tag:
      type: object
      required:
        - key
        - value
      properties:
        key:
          $ref: '#/components/schemas/TagKey'
          description: The tag's key.
        value:
          $ref: '#/components/schemas/TagValue'
          description: The tag's value.
      description: A set of key/value pairs which are used to manage the resource.
    ResourceAlreadyExistsException: {}
    LimitExceededException: {}
    CreateDatasetResponse:
      type: object
      properties:
        datasetName:
          $ref: '#/components/schemas/DatasetName'
          description: The name of the data set.
        datasetArn:
          $ref: '#/components/schemas/DatasetArn'
          description: The ARN of the data set.
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: 'How long, in days, data set contents are kept for the data set.'
    DatasetAction:
      type: object
      properties:
        actionName:
          $ref: '#/components/schemas/DatasetActionName'
          description: The name of the data set action by which data set contents are automatically created.
        queryAction:
          $ref: '#/components/schemas/SqlQueryDatasetAction'
          description: An "SqlQueryDatasetAction" object that uses an SQL query to automatically create data set contents.
        containerAction:
          $ref: '#/components/schemas/ContainerDatasetAction'
          description: Information which allows the system to run a containerized application in order to create the data set contents. The application must be in a Docker container along with any needed support libraries.
      description: A "DatasetAction" object that specifies how data set contents are automatically created.
    DatasetTrigger:
      type: object
      properties:
        schedule:
          $ref: '#/components/schemas/Schedule'
          description: The "Schedule" when the trigger is initiated.
        dataset:
          $ref: '#/components/schemas/TriggeringDataset'
          description: The data set whose content creation triggers the creation of this data set's contents.
      description: The "DatasetTrigger" that specifies when the data set is automatically updated.
    DatasetContentDeliveryRule:
      type: object
      required:
        - destination
      properties:
        entryName:
          $ref: '#/components/schemas/EntryName'
          description: The name of the data set content delivery rules entry.
        destination:
          $ref: '#/components/schemas/DatasetContentDeliveryDestination'
          description: The destination to which data set contents are delivered.
      description: When data set contents are created they are delivered to destination specified here.
    UnlimitedVersioning:
      type: boolean
    MaxVersions:
      type: integer
      minimum: 1
      maximum: 1000
    CreateDatasetContentResponse:
      type: object
      properties:
        versionId:
          $ref: '#/components/schemas/DatasetContentVersion'
          description: The version ID of the data set contents which are being created.
    CreateDatastoreResponse:
      type: object
      properties:
        datastoreName:
          $ref: '#/components/schemas/DatastoreName'
          description: The name of the data store.
        datastoreArn:
          $ref: '#/components/schemas/DatastoreArn'
          description: The ARN of the data store.
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: 'How long, in days, message data is kept for the data store.'
    ServiceManagedDatastoreS3Storage:
      type: object
      properties: {}
      description: Use this to store data store data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.
    CustomerManagedDatastoreS3Storage:
      type: object
      required:
        - bucket
        - roleArn
      properties:
        bucket:
          $ref: '#/components/schemas/BucketName'
          description: The name of the Amazon S3 bucket in which data store data is stored.
        keyPrefix:
          $ref: '#/components/schemas/S3KeyPrefix'
          description: '[Optional] The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a ''/''.'
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The ARN of the role which grants AWS IoT Analytics permission to interact with your Amazon S3 resources.
      description: 'Use this to store data store data in an S3 bucket that you manage. When customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.'
    CreatePipelineResponse:
      type: object
      properties:
        pipelineName:
          $ref: '#/components/schemas/PipelineName'
          description: The name of the pipeline.
        pipelineArn:
          $ref: '#/components/schemas/PipelineArn'
          description: The ARN of the pipeline.
    PipelineActivity:
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/ChannelActivity'
          description: Determines the source of the messages to be processed.
        lambda:
          $ref: '#/components/schemas/LambdaActivity'
          description: Runs a Lambda function to modify the message.
        datastore:
          $ref: '#/components/schemas/DatastoreActivity'
          description: Specifies where to store the processed message data.
        addAttributes:
          $ref: '#/components/schemas/AddAttributesActivity'
          description: Adds other attributes based on existing attributes in the message.
        removeAttributes:
          $ref: '#/components/schemas/RemoveAttributesActivity'
          description: Removes attributes from a message.
        selectAttributes:
          $ref: '#/components/schemas/SelectAttributesActivity'
          description: 'Creates a new message using only the specified attributes from the original message. '
        filter:
          $ref: '#/components/schemas/FilterActivity'
          description: Filters a message based on its attributes.
        math:
          $ref: '#/components/schemas/MathActivity'
          description: Computes an arithmetic expression using the message's attributes and adds it to the message.
        deviceRegistryEnrich:
          $ref: '#/components/schemas/DeviceRegistryEnrichActivity'
          description: Adds data from the AWS IoT device registry to your message.
        deviceShadowEnrich:
          $ref: '#/components/schemas/DeviceShadowEnrichActivity'
          description: Adds information from the AWS IoT Device Shadows service to a message.
      description: An activity that performs a transformation on a message.
    DescribeChannelResponse:
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/Channel'
          description: An object that contains information about the channel.
        statistics:
          $ref: '#/components/schemas/ChannelStatistics'
          description: Statistics about the channel. Included if the 'includeStatistics' parameter is set to true in the request.
    DescribeDatasetResponse:
      type: object
      properties:
        dataset:
          $ref: '#/components/schemas/Dataset'
          description: An object that contains information about the data set.
    DescribeDatastoreResponse:
      type: object
      properties:
        datastore:
          $ref: '#/components/schemas/Datastore'
          description: Information about the data store.
        statistics:
          $ref: '#/components/schemas/DatastoreStatistics'
          description: Additional statistical information about the data store. Included if the 'includeStatistics' parameter is set to true in the request.
    DescribeLoggingOptionsResponse:
      type: object
      properties:
        loggingOptions:
          $ref: '#/components/schemas/LoggingOptions'
          description: The current settings of the AWS IoT Analytics logging options.
    DescribePipelineResponse:
      type: object
      properties:
        pipeline:
          $ref: '#/components/schemas/Pipeline'
          description: A "Pipeline" object that contains information about the pipeline.
    GetDatasetContentResponse:
      type: object
      properties:
        entries:
          $ref: '#/components/schemas/DatasetEntries'
          description: A list of "DatasetEntry" objects.
        timestamp:
          $ref: '#/components/schemas/Timestamp'
          description: The time when the request was made.
        status:
          $ref: '#/components/schemas/DatasetContentStatus'
          description: The status of the data set content.
    ListChannelsResponse:
      type: object
      properties:
        channelSummaries:
          $ref: '#/components/schemas/ChannelSummaries'
          description: A list of "ChannelSummary" objects.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The token to retrieve the next set of results, or <code>null</code> if there are no more results.'
    ListDatasetContentsResponse:
      type: object
      properties:
        datasetContentSummaries:
          $ref: '#/components/schemas/DatasetContentSummaries'
          description: Summary information about data set contents that have been created.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The token to retrieve the next set of results, or <code>null</code> if there are no more results.'
    ListDatasetsResponse:
      type: object
      properties:
        datasetSummaries:
          $ref: '#/components/schemas/DatasetSummaries'
          description: A list of "DatasetSummary" objects.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The token to retrieve the next set of results, or <code>null</code> if there are no more results.'
    ListDatastoresResponse:
      type: object
      properties:
        datastoreSummaries:
          $ref: '#/components/schemas/DatastoreSummaries'
          description: A list of "DatastoreSummary" objects.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The token to retrieve the next set of results, or <code>null</code> if there are no more results.'
    ListPipelinesResponse:
      type: object
      properties:
        pipelineSummaries:
          $ref: '#/components/schemas/PipelineSummaries'
          description: A list of "PipelineSummary" objects.
        nextToken:
          $ref: '#/components/schemas/NextToken'
          description: 'The token to retrieve the next set of results, or <code>null</code> if there are no more results.'
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          $ref: '#/components/schemas/TagList'
          description: The tags (metadata) which you have assigned to the resource.
    RoleArn:
      type: string
      minLength: 20
      maxLength: 2048
    LoggingLevel:
      type: string
      enum:
        - ERROR
    LoggingEnabled:
      type: boolean
    RunPipelineActivityResponse:
      type: object
      properties:
        payloads:
          $ref: '#/components/schemas/MessagePayloads'
          description: 'The enriched or transformed sample message payloads as base64-encoded strings. (The results of running the pipeline activity on each input sample message payload, encoded in base64.)'
        logResult:
          $ref: '#/components/schemas/LogResult'
          description: 'In case the pipeline activity fails, the log message that is generated.'
    ChannelActivity:
      type: object
      required:
        - name
        - channelName
      properties:
        name:
          $ref: '#/components/schemas/ActivityName'
          description: The name of the 'channel' activity.
        channelName:
          $ref: '#/components/schemas/ChannelName'
          description: The name of the channel from which the messages are processed.
        next:
          $ref: '#/components/schemas/ActivityName'
          description: The next activity in the pipeline.
      description: The activity that determines the source of the messages to be processed.
    LambdaActivity:
      type: object
      required:
        - name
        - lambdaName
        - batchSize
      properties:
        name:
          $ref: '#/components/schemas/ActivityName'
          description: The name of the 'lambda' activity.
        lambdaName:
          $ref: '#/components/schemas/LambdaName'
          description: The name of the Lambda function that is run on the message.
        batchSize:
          $ref: '#/components/schemas/ActivityBatchSize'
          description: '<p>The number of messages passed to the Lambda function for processing.</p> <p>The AWS Lambda function must be able to process all of these messages within five minutes, which is the maximum timeout duration for Lambda functions.</p>'
        next:
          $ref: '#/components/schemas/ActivityName'
          description: The next activity in the pipeline.
      description: An activity that runs a Lambda function to modify the message.
    DatastoreActivity:
      type: object
      required:
        - name
        - datastoreName
      properties:
        name:
          $ref: '#/components/schemas/ActivityName'
          description: The name of the 'datastore' activity.
        datastoreName:
          $ref: '#/components/schemas/DatastoreName'
          description: The name of the data store where processed messages are stored.
      description: The 'datastore' activity that specifies where to store the processed data.
    AddAttributesActivity:
      type: object
      required:
        - name
        - attributes
      properties:
        name:
          $ref: '#/components/schemas/ActivityName'
          description: The name of the 'addAttributes' activity.
        attributes:
          $ref: '#/components/schemas/AttributeNameMapping'
          description: '<p>A list of 1-50 "AttributeNameMapping" objects that map an existing attribute to a new attribute.</p> <note> <p>The existing attributes remain in the message, so if you want to remove the originals, use "RemoveAttributeActivity".</p> </note>'
        next:
          $ref: '#/components/schemas/ActivityName'
          description: The next activity in the pipeline.
      description: An activity that adds other attributes based on existing attributes in the message.
    RemoveAttributesActivity:
      type: object
      required:
        - name
        - attributes
      properties:
        name:
          $ref: '#/components/schemas/ActivityName'
          description: The name of the 'removeAttributes' activity.
        attributes:
          $ref: '#/components/schemas/AttributeNames'
          description: A list of 1-50 attributes to remove from the message.
        next:
          $ref: '#/components/schemas/ActivityName'
          description: The next activity in the pipeline.
      description: An activity that removes attributes from a message.
    SelectAttributesActivity:
      type: object
      required:
        - name
        - attributes
      properties:
        name:
          $ref: '#/components/schemas/ActivityName'
          description: The name of the 'selectAttributes' activity.
        attributes:
          $ref: '#/components/schemas/AttributeNames'
          description: A list of the attributes to select from the message.
        next:
          $ref: '#/components/schemas/ActivityName'
          description: The next activity in the pipeline.
      description: Creates a new message using only the specified attributes from the original message.
    FilterActivity:
      type: object
      required:
        - name
        - filter
      properties:
        name:
          $ref: '#/components/schemas/ActivityName'
          description: The name of the 'filter' activity.
        filter:
          $ref: '#/components/schemas/FilterExpression'
          description: An expression that looks like a SQL WHERE clause that must return a Boolean value.
        next:
          $ref: '#/components/schemas/ActivityName'
          description: The next activity in the pipeline.
      description: An activity that filters a message based on its attributes.
    MathActivity:
      type: object
      required:
        - name
        - attribute
        - math
      properties:
        name:
          $ref: '#/components/schemas/ActivityName'
          description: The name of the 'math' activity.
        attribute:
          $ref: '#/components/schemas/AttributeName'
          description: The name of the attribute that contains the result of the math operation.
        math:
          $ref: '#/components/schemas/MathExpression'
          description: An expression that uses one or more existing attributes and must return an integer value.
        next:
          $ref: '#/components/schemas/ActivityName'
          description: The next activity in the pipeline.
      description: An activity that computes an arithmetic expression using the message's attributes.
    DeviceRegistryEnrichActivity:
      type: object
      required:
        - name
        - attribute
        - thingName
        - roleArn
      properties:
        name:
          $ref: '#/components/schemas/ActivityName'
          description: The name of the 'deviceRegistryEnrich' activity.
        attribute:
          $ref: '#/components/schemas/AttributeName'
          description: The name of the attribute that is added to the message.
        thingName:
          $ref: '#/components/schemas/AttributeName'
          description: The name of the IoT device whose registry information is added to the message.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The ARN of the role that allows access to the device's registry information.
        next:
          $ref: '#/components/schemas/ActivityName'
          description: The next activity in the pipeline.
      description: An activity that adds data from the AWS IoT device registry to your message.
    DeviceShadowEnrichActivity:
      type: object
      required:
        - name
        - attribute
        - thingName
        - roleArn
      properties:
        name:
          $ref: '#/components/schemas/ActivityName'
          description: The name of the 'deviceShadowEnrich' activity.
        attribute:
          $ref: '#/components/schemas/AttributeName'
          description: The name of the attribute that is added to the message.
        thingName:
          $ref: '#/components/schemas/AttributeName'
          description: The name of the IoT device whose shadow information is added to the message.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The ARN of the role that allows access to the device's shadow.
        next:
          $ref: '#/components/schemas/ActivityName'
          description: The next activity in the pipeline.
      description: An activity that adds information from the AWS IoT Device Shadows service to a message.
    MessagePayload:
      type: string
    SampleChannelDataResponse:
      type: object
      properties:
        payloads:
          $ref: '#/components/schemas/MessagePayloads'
          description: The list of message samples. Each sample message is returned as a base64-encoded string.
    StartPipelineReprocessingResponse:
      type: object
      properties:
        reprocessingId:
          $ref: '#/components/schemas/ReprocessingId'
          description: The ID of the pipeline reprocessing activity that was started.
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      minLength: 1
      maxLength: 256
    ActivityBatchSize:
      type: integer
      minimum: 1
      maximum: 1000
    ActivityName:
      type: string
      minLength: 1
      maxLength: 128
    AttributeNameMapping:
      type: object
      minProperties: 1
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/AttributeName'
    AttributeName:
      type: string
      minLength: 1
      maxLength: 256
    AttributeNames:
      type: array
      items:
        $ref: '#/components/schemas/AttributeName'
      minItems: 1
      maxItems: 50
    BatchPutMessageErrorEntry:
      type: object
      properties:
        messageId:
          $ref: '#/components/schemas/MessageId'
          description: The ID of the message that caused the error. (See the value corresponding to the "messageId" key in the message object.)
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
          description: The code associated with the error.
        errorMessage:
          $ref: '#/components/schemas/ErrorMessage'
          description: The message associated with the error.
      description: Contains informations about errors.
    BatchPutMessageErrorEntries:
      type: array
      items:
        $ref: '#/components/schemas/BatchPutMessageErrorEntry'
    MessageId:
      type: string
      minLength: 1
      maxLength: 128
    ErrorCode:
      type: string
    ErrorMessage:
      type: string
    ChannelName:
      type: string
      pattern: '^[a-zA-Z0-9_]+$'
      minLength: 1
      maxLength: 128
    Messages:
      type: array
      items:
        $ref: '#/components/schemas/Message'
    BatchPutMessageRequest:
      type: object
      required:
        - channelName
        - messages
      title: BatchPutMessageRequest
      properties:
        channelName:
          $ref: '#/components/schemas/ChannelName'
          description: The name of the channel where the messages are sent.
        messages:
          $ref: '#/components/schemas/Messages'
          description: '<p>The list of messages to be sent. Each message has format: ''{ "messageId": "string", "payload": "string"}''.</p> <p>Note that the field names of message payloads (data) that you send to AWS IoT Analytics:</p> <ul> <li> <p>Must contain only alphanumeric characters and undescores (_); no other special characters are allowed.</p> </li> <li> <p>Must begin with an alphabetic character or single underscore (_).</p> </li> <li> <p>Cannot contain hyphens (-).</p> </li> <li> <p>In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$". </p> </li> <li> <p>Cannot be greater than 255 characters.</p> </li> <li> <p>Are case-insensitive. (Fields named "foo" and "FOO" in the same payload are considered duplicates.)</p> </li> </ul> <p>For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads. </p>'
    BucketKeyExpression:
      type: string
      pattern: '^[a-zA-Z0-9!_.*''()/{}:-]*$'
      minLength: 1
      maxLength: 255
    BucketName:
      type: string
      pattern: '^[a-zA-Z0-9.\-_]*$'
      minLength: 3
      maxLength: 255
    PipelineName:
      type: string
      pattern: '^[a-zA-Z0-9_]+$'
      minLength: 1
      maxLength: 128
    ReprocessingId:
      type: string
    CancelPipelineReprocessingRequest:
      type: object
      title: CancelPipelineReprocessingRequest
      properties: {}
    ChannelStorage:
      type: object
      properties:
        serviceManagedS3:
          $ref: '#/components/schemas/ServiceManagedChannelS3Storage'
          description: Use this to store channel data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the channel.
        customerManagedS3:
          $ref: '#/components/schemas/CustomerManagedChannelS3Storage'
          description: 'Use this to store channel data in an S3 bucket that you manage. If customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the channel.'
      description: 'Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.'
    ChannelArn:
      type: string
    ChannelStatus:
      type: string
      enum:
        - CREATING
        - ACTIVE
        - DELETING
    RetentionPeriod:
      type: object
      properties:
        unlimited:
          $ref: '#/components/schemas/UnlimitedRetentionPeriod'
          description: 'If true, message data is kept indefinitely.'
        numberOfDays:
          $ref: '#/components/schemas/RetentionPeriodInDays'
          description: The number of days that message data is kept. The "unlimited" parameter must be false.
      description: 'How long, in days, message data is kept.'
    Timestamp:
      type: string
      format: date-time
    Channel:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ChannelName'
          description: The name of the channel.
        storage:
          $ref: '#/components/schemas/ChannelStorage'
          description: 'Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.'
        arn:
          $ref: '#/components/schemas/ChannelArn'
          description: The ARN of the channel.
        status:
          $ref: '#/components/schemas/ChannelStatus'
          description: The status of the channel.
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: 'How long, in days, message data is kept for the channel.'
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the channel was created.
        lastUpdateTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the channel was last updated.
      description: 'A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages before publishing the data to a pipeline.'
    EstimatedResourceSize:
      type: object
      properties:
        estimatedSizeInBytes:
          $ref: '#/components/schemas/SizeInBytes'
          description: The estimated size of the resource in bytes.
        estimatedOn:
          $ref: '#/components/schemas/Timestamp'
          description: The time when the estimate of the size of the resource was made.
      description: The estimated size of the resource.
    ChannelStatistics:
      type: object
      properties:
        size:
          $ref: '#/components/schemas/EstimatedResourceSize'
          description: The estimated size of the channel.
      description: Statistics information about the channel.
    ServiceManagedChannelS3StorageSummary:
      type: object
      properties: {}
      description: Used to store channel data in an S3 bucket managed by the AWS IoT Analytics service.
    CustomerManagedChannelS3StorageSummary:
      type: object
      properties:
        bucket:
          $ref: '#/components/schemas/BucketName'
          description: The name of the Amazon S3 bucket in which channel data is stored.
        keyPrefix:
          $ref: '#/components/schemas/S3KeyPrefix'
          description: '[Optional] The prefix used to create the keys of the channel data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a ''/''.'
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The ARN of the role which grants AWS IoT Analytics permission to interact with your Amazon S3 resources.
      description: Used to store channel data in an S3 bucket that you manage.
    ChannelStorageSummary:
      type: object
      properties:
        serviceManagedS3:
          $ref: '#/components/schemas/ServiceManagedChannelS3StorageSummary'
          description: Used to store channel data in an S3 bucket managed by the AWS IoT Analytics service.
        customerManagedS3:
          $ref: '#/components/schemas/CustomerManagedChannelS3StorageSummary'
          description: Used to store channel data in an S3 bucket that you manage.
      description: Where channel data is stored.
    ChannelSummary:
      type: object
      properties:
        channelName:
          $ref: '#/components/schemas/ChannelName'
          description: The name of the channel.
        channelStorage:
          $ref: '#/components/schemas/ChannelStorageSummary'
          description: Where channel data is stored.
        status:
          $ref: '#/components/schemas/ChannelStatus'
          description: The status of the channel.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the channel was created.
        lastUpdateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The last time the channel was updated.
      description: A summary of information about a channel.
    ChannelSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ChannelSummary'
    ComputeType:
      type: string
      enum:
        - ACU_1
        - ACU_2
    Image:
      type: string
      maxLength: 255
    ResourceConfiguration:
      type: object
      required:
        - computeType
        - volumeSizeInGB
      properties:
        computeType:
          $ref: '#/components/schemas/ComputeType'
          description: 'The type of the compute resource used to execute the "containerAction". Possible values are: ACU_1 (vCPU=4, memory=16GiB) or ACU_2 (vCPU=8, memory=32GiB).'
        volumeSizeInGB:
          $ref: '#/components/schemas/VolumeSizeInGB'
          description: 'The size (in GB) of the persistent storage available to the resource instance used to execute the "containerAction" (min: 1, max: 50).'
      description: The configuration of the resource used to execute the "containerAction".
    Variables:
      type: array
      items:
        $ref: '#/components/schemas/Variable'
      minItems: 0
      maxItems: 50
    ContainerDatasetAction:
      type: object
      required:
        - image
        - executionRoleArn
        - resourceConfiguration
      properties:
        image:
          $ref: '#/components/schemas/Image'
          description: The ARN of the Docker container stored in your account. The Docker container contains an application and needed support libraries and is used to generate data set contents.
        executionRoleArn:
          $ref: '#/components/schemas/RoleArn'
          description: 'The ARN of the role which gives permission to the system to access needed resources in order to run the "containerAction". This includes, at minimum, permission to retrieve the data set contents which are the input to the containerized application.'
        resourceConfiguration:
          $ref: '#/components/schemas/ResourceConfiguration'
          description: Configuration of the resource which executes the "containerAction".
        variables:
          $ref: '#/components/schemas/Variables'
          description: 'The values of variables used within the context of the execution of the containerized application (basically, parameters passed to the application). Each variable must have a name and a value given by one of "stringValue", "datasetContentVersionValue", or "outputFileUriValue".'
      description: Information needed to run the "containerAction" to produce data set contents.
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      minItems: 1
      maxItems: 50
    CreateChannelRequest:
      type: object
      required:
        - channelName
      title: CreateChannelRequest
      properties:
        channelName:
          $ref: '#/components/schemas/ChannelName'
          description: The name of the channel.
        channelStorage:
          $ref: '#/components/schemas/ChannelStorage'
          description: 'Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.'
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: 'How long, in days, message data is kept for the channel. When "customerManagedS3" storage is selected, this parameter is ignored.'
        tags:
          $ref: '#/components/schemas/TagList'
          description: Metadata which can be used to manage the channel.
    DatasetName:
      type: string
      pattern: '^[a-zA-Z0-9_]+$'
      minLength: 1
      maxLength: 128
    CreateDatasetContentRequest:
      type: object
      title: CreateDatasetContentRequest
      properties: {}
    DatasetContentVersion:
      type: string
      minLength: 7
      maxLength: 36
    DatasetActions:
      type: array
      items:
        $ref: '#/components/schemas/DatasetAction'
      minItems: 1
      maxItems: 1
    DatasetTriggers:
      type: array
      items:
        $ref: '#/components/schemas/DatasetTrigger'
      minItems: 0
      maxItems: 5
    DatasetContentDeliveryRules:
      type: array
      items:
        $ref: '#/components/schemas/DatasetContentDeliveryRule'
      minItems: 0
      maxItems: 20
    VersioningConfiguration:
      type: object
      properties:
        unlimited:
          $ref: '#/components/schemas/UnlimitedVersioning'
          description: 'If true, unlimited versions of data set contents will be kept.'
        maxVersions:
          $ref: '#/components/schemas/MaxVersions'
          description: How many versions of data set contents will be kept. The "unlimited" parameter must be false.
      description: Information about the versioning of data set contents.
    CreateDatasetRequest:
      type: object
      required:
        - datasetName
        - actions
      title: CreateDatasetRequest
      properties:
        datasetName:
          $ref: '#/components/schemas/DatasetName'
          description: The name of the data set.
        actions:
          $ref: '#/components/schemas/DatasetActions'
          description: A list of actions that create the data set contents.
        triggers:
          $ref: '#/components/schemas/DatasetTriggers'
          description: A list of triggers. A trigger causes data set contents to be populated at a specified time interval or when another data set's contents are created. The list of triggers can be empty or contain up to five <b>DataSetTrigger</b> objects.
        contentDeliveryRules:
          $ref: '#/components/schemas/DatasetContentDeliveryRules'
          description: When data set contents are created they are delivered to destinations specified here.
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: '[Optional] How long, in days, versions of data set contents are kept for the data set. If not specified or set to null, versions of data set contents are retained for at most 90 days. The number of versions of data set contents retained is determined by the <code>versioningConfiguration</code> parameter. (For more information, see https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions)'
        versioningConfiguration:
          $ref: '#/components/schemas/VersioningConfiguration'
          description: '[Optional] How many versions of data set contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the "retentionPeriod" parameter. (For more information, see https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions)'
        tags:
          $ref: '#/components/schemas/TagList'
          description: Metadata which can be used to manage the data set.
    DatasetArn:
      type: string
    DatastoreName:
      type: string
      pattern: '^[a-zA-Z0-9_]+$'
      minLength: 1
      maxLength: 128
    DatastoreStorage:
      type: object
      properties:
        serviceManagedS3:
          $ref: '#/components/schemas/ServiceManagedDatastoreS3Storage'
          description: Use this to store data store data in an S3 bucket managed by the AWS IoT Analytics service. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.
        customerManagedS3:
          $ref: '#/components/schemas/CustomerManagedDatastoreS3Storage'
          description: 'Use this to store data store data in an S3 bucket that you manage. When customer managed storage is selected, the "retentionPeriod" parameter is ignored. The choice of service-managed or customer-managed S3 storage cannot be changed after creation of the data store.'
      description: 'Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.'
    CreateDatastoreRequest:
      type: object
      required:
        - datastoreName
      title: CreateDatastoreRequest
      properties:
        datastoreName:
          $ref: '#/components/schemas/DatastoreName'
          description: The name of the data store.
        datastoreStorage:
          $ref: '#/components/schemas/DatastoreStorage'
          description: 'Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.'
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: 'How long, in days, message data is kept for the data store. When "customerManagedS3" storage is selected, this parameter is ignored.'
        tags:
          $ref: '#/components/schemas/TagList'
          description: Metadata which can be used to manage the data store.
    DatastoreArn:
      type: string
    PipelineActivities:
      type: array
      items:
        $ref: '#/components/schemas/PipelineActivity'
      minItems: 1
      maxItems: 25
    CreatePipelineRequest:
      type: object
      required:
        - pipelineName
        - pipelineActivities
      title: CreatePipelineRequest
      properties:
        pipelineName:
          $ref: '#/components/schemas/PipelineName'
          description: The name of the pipeline.
        pipelineActivities:
          $ref: '#/components/schemas/PipelineActivities'
          description: '<p>A list of "PipelineActivity" objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <b>PipelineActivity</b> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity, for example:</p> <p> <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]</code> </p>'
        tags:
          $ref: '#/components/schemas/TagList'
          description: Metadata which can be used to manage the pipeline.
    PipelineArn:
      type: string
    S3KeyPrefix:
      type: string
      pattern: '^[a-zA-Z0-9!_.*''()/{}:-]*/$'
      minLength: 1
      maxLength: 255
    CustomerManagedDatastoreS3StorageSummary:
      type: object
      properties:
        bucket:
          $ref: '#/components/schemas/BucketName'
          description: The name of the Amazon S3 bucket in which data store data is stored.
        keyPrefix:
          $ref: '#/components/schemas/S3KeyPrefix'
          description: '[Optional] The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). The prefix must end with a ''/''.'
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The ARN of the role which grants AWS IoT Analytics permission to interact with your Amazon S3 resources.
      description: Used to store data store data in an S3 bucket that you manage.
    DatasetStatus:
      type: string
      enum:
        - CREATING
        - ACTIVE
        - DELETING
    Dataset:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DatasetName'
          description: The name of the data set.
        arn:
          $ref: '#/components/schemas/DatasetArn'
          description: The ARN of the data set.
        actions:
          $ref: '#/components/schemas/DatasetActions'
          description: The "DatasetAction" objects that automatically create the data set contents.
        triggers:
          $ref: '#/components/schemas/DatasetTriggers'
          description: The "DatasetTrigger" objects that specify when the data set is automatically updated.
        contentDeliveryRules:
          $ref: '#/components/schemas/DatasetContentDeliveryRules'
          description: When data set contents are created they are delivered to destinations specified here.
        status:
          $ref: '#/components/schemas/DatasetStatus'
          description: The status of the data set.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the data set was created.
        lastUpdateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The last time the data set was updated.
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: '[Optional] How long, in days, message data is kept for the data set.'
        versioningConfiguration:
          $ref: '#/components/schemas/VersioningConfiguration'
          description: '[Optional] How many versions of data set contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the "retentionPeriod" parameter. (For more information, see https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions)'
      description: Information about a data set.
    DatasetActionName:
      type: string
      pattern: '^[a-zA-Z0-9_]+$'
      minLength: 1
      maxLength: 128
    SqlQueryDatasetAction:
      type: object
      required:
        - sqlQuery
      properties:
        sqlQuery:
          $ref: '#/components/schemas/SqlQuery'
          description: A SQL query string.
        filters:
          $ref: '#/components/schemas/QueryFilters'
          description: Pre-filters applied to message data.
      description: The SQL query to modify the message.
    DatasetActionSummary:
      type: object
      properties:
        actionName:
          $ref: '#/components/schemas/DatasetActionName'
          description: The name of the action which automatically creates the data set's contents.
        actionType:
          $ref: '#/components/schemas/DatasetActionType'
          description: The type of action by which the data set's contents are automatically created.
      description: Information about the action which automatically creates the data set's contents.
    DatasetActionSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DatasetActionSummary'
      minItems: 1
      maxItems: 1
    DatasetActionType:
      type: string
      enum:
        - QUERY
        - CONTAINER
    IotEventsDestinationConfiguration:
      type: object
      required:
        - inputName
        - roleArn
      properties:
        inputName:
          $ref: '#/components/schemas/IotEventsInputName'
          description: The name of the AWS IoT Events input to which data set contents are delivered.
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The ARN of the role which grants AWS IoT Analytics permission to deliver data set contents to an AWS IoT Events input.
      description: Configuration information for delivery of data set contents to AWS IoT Events.
    S3DestinationConfiguration:
      type: object
      required:
        - bucket
        - key
        - roleArn
      properties:
        bucket:
          $ref: '#/components/schemas/BucketName'
          description: The name of the Amazon S3 bucket to which data set contents are delivered.
        key:
          $ref: '#/components/schemas/BucketKeyExpression'
          description: 'The key of the data set contents object. Each object in an Amazon S3 bucket has a key that is its unique identifier within the bucket (each object in a bucket has exactly one key). To produce a unique key, you can use "!{iotanalytics:scheduledTime}" to insert the time of the scheduled SQL query run, or "!{iotanalytics:versioned} to insert a unique hash identifying the data set, for example: "/DataSet/!{iotanalytics:scheduledTime}/!{iotanalytics:versioned}.csv".'
        glueConfiguration:
          $ref: '#/components/schemas/GlueConfiguration'
          description: 'Configuration information for coordination with the AWS Glue ETL (extract, transform and load) service.'
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The ARN of the role which grants AWS IoT Analytics permission to interact with your Amazon S3 and AWS Glue resources.
      description: Configuration information for delivery of data set contents to Amazon S3.
    DatasetContentDeliveryDestination:
      type: object
      properties:
        iotEventsDestinationConfiguration:
          $ref: '#/components/schemas/IotEventsDestinationConfiguration'
          description: Configuration information for delivery of data set contents to AWS IoT Events.
        s3DestinationConfiguration:
          $ref: '#/components/schemas/S3DestinationConfiguration'
          description: Configuration information for delivery of data set contents to Amazon S3.
      description: The destination to which data set contents are delivered.
    EntryName:
      type: string
    DatasetContentState:
      type: string
      enum:
        - CREATING
        - SUCCEEDED
        - FAILED
    Reason:
      type: string
    DatasetContentStatus:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/DatasetContentState'
          description: 'The state of the data set contents. Can be one of "READY", "CREATING", "SUCCEEDED" or "FAILED".'
        reason:
          $ref: '#/components/schemas/Reason'
          description: The reason the data set contents are in this state.
      description: The state of the data set contents and the reason they are in this state.
    DatasetContentSummary:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/DatasetContentVersion'
          description: The version of the data set contents.
        status:
          $ref: '#/components/schemas/DatasetContentStatus'
          description: The status of the data set contents.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: The actual time the creation of the data set contents was started.
        scheduleTime:
          $ref: '#/components/schemas/Timestamp'
          description: The time the creation of the data set contents was scheduled to start.
        completionTime:
          $ref: '#/components/schemas/Timestamp'
          description: The time the dataset content status was updated to SUCCEEDED or FAILED.
      description: Summary information about data set contents.
    DatasetContentSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DatasetContentSummary'
    DatasetContentVersionValue:
      type: object
      required:
        - datasetName
      properties:
        datasetName:
          $ref: '#/components/schemas/DatasetName'
          description: The name of the data set whose latest contents are used as input to the notebook or application.
      description: The data set whose latest contents are used as input to the notebook or application.
    DatasetEntry:
      type: object
      properties:
        entryName:
          $ref: '#/components/schemas/EntryName'
          description: The name of the data set item.
        dataURI:
          $ref: '#/components/schemas/PresignedURI'
          description: The pre-signed URI of the data set item.
      description: The reference to a data set entry.
    DatasetEntries:
      type: array
      items:
        $ref: '#/components/schemas/DatasetEntry'
    PresignedURI:
      type: string
    DatasetSummary:
      type: object
      properties:
        datasetName:
          $ref: '#/components/schemas/DatasetName'
          description: The name of the data set.
        status:
          $ref: '#/components/schemas/DatasetStatus'
          description: The status of the data set.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: The time the data set was created.
        lastUpdateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The last time the data set was updated.
        triggers:
          $ref: '#/components/schemas/DatasetTriggers'
          description: A list of triggers. A trigger causes data set content to be populated at a specified time interval or when another data set is populated. The list of triggers can be empty or contain up to five DataSetTrigger objects
        actions:
          $ref: '#/components/schemas/DatasetActionSummaries'
          description: A list of "DataActionSummary" objects.
      description: A summary of information about a data set.
    DatasetSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DatasetSummary'
    Schedule:
      type: object
      properties:
        expression:
          $ref: '#/components/schemas/ScheduleExpression'
          description: 'The expression that defines when to trigger an update. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html"> Schedule Expressions for Rules</a> in the Amazon CloudWatch Events User Guide.'
      description: The schedule for when to trigger an update.
    TriggeringDataset:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/DatasetName'
          description: The name of the data set whose content generation triggers the new data set content generation.
      description: Information about the data set whose content generation triggers the new data set content generation.
    DatastoreStatus:
      type: string
      enum:
        - CREATING
        - ACTIVE
        - DELETING
    Datastore:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/DatastoreName'
          description: The name of the data store.
        storage:
          $ref: '#/components/schemas/DatastoreStorage'
          description: 'Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.'
        arn:
          $ref: '#/components/schemas/DatastoreArn'
          description: The ARN of the data store.
        status:
          $ref: '#/components/schemas/DatastoreStatus'
          description: '<p>The status of a data store:</p> <dl> <dt>CREATING</dt> <dd> <p>The data store is being created.</p> </dd> <dt>ACTIVE</dt> <dd> <p>The data store has been created and can be used.</p> </dd> <dt>DELETING</dt> <dd> <p>The data store is being deleted.</p> </dd> </dl>'
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: 'How long, in days, message data is kept for the data store. When "customerManagedS3" storage is selected, this parameter is ignored.'
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the data store was created.
        lastUpdateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The last time the data store was updated.
      description: Information about a data store.
    DatastoreStatistics:
      type: object
      properties:
        size:
          $ref: '#/components/schemas/EstimatedResourceSize'
          description: The estimated size of the data store.
      description: Statistical information about the data store.
    ServiceManagedDatastoreS3StorageSummary:
      type: object
      properties: {}
      description: Used to store data store data in an S3 bucket managed by the AWS IoT Analytics service.
    DatastoreStorageSummary:
      type: object
      properties:
        serviceManagedS3:
          $ref: '#/components/schemas/ServiceManagedDatastoreS3StorageSummary'
          description: Used to store data store data in an S3 bucket managed by the AWS IoT Analytics service.
        customerManagedS3:
          $ref: '#/components/schemas/CustomerManagedDatastoreS3StorageSummary'
          description: Used to store data store data in an S3 bucket that you manage.
      description: Where data store data is stored.
    DatastoreSummary:
      type: object
      properties:
        datastoreName:
          $ref: '#/components/schemas/DatastoreName'
          description: The name of the data store.
        datastoreStorage:
          $ref: '#/components/schemas/DatastoreStorageSummary'
          description: Where data store data is stored.
        status:
          $ref: '#/components/schemas/DatastoreStatus'
          description: The status of the data store.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the data store was created.
        lastUpdateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The last time the data store was updated.
      description: A summary of information about a data store.
    DatastoreSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DatastoreSummary'
    DeleteChannelRequest:
      type: object
      title: DeleteChannelRequest
      properties: {}
    DeleteDatasetContentRequest:
      type: object
      title: DeleteDatasetContentRequest
      properties: {}
    DeleteDatasetRequest:
      type: object
      title: DeleteDatasetRequest
      properties: {}
    DeleteDatastoreRequest:
      type: object
      title: DeleteDatastoreRequest
      properties: {}
    DeletePipelineRequest:
      type: object
      title: DeletePipelineRequest
      properties: {}
    OffsetSeconds:
      type: integer
    TimeExpression:
      type: string
    DeltaTime:
      type: object
      required:
        - offsetSeconds
        - timeExpression
      properties:
        offsetSeconds:
          $ref: '#/components/schemas/OffsetSeconds'
          description: 'The number of seconds of estimated "in flight" lag time of message data. When you create data set contents using message data from a specified time frame, some message data may still be "in flight" when processing begins, and so will not arrive in time to be processed. Use this field to make allowances for the "in flight" time of your message data, so that data not processed from a previous time frame will be included with the next time frame. Without this, missed message data would be excluded from processing during the next time frame as well, because its timestamp places it within the previous time frame.'
        timeExpression:
          $ref: '#/components/schemas/TimeExpression'
          description: 'An expression by which the time of the message data may be determined. This may be the name of a timestamp field, or a SQL expression which is used to derive the time the message data was generated.'
      description: Used to limit data to that which has arrived since the last execution of the action.
    IncludeStatisticsFlag:
      type: boolean
    DescribeChannelRequest:
      type: object
      title: DescribeChannelRequest
      properties: {}
    DescribeDatasetRequest:
      type: object
      title: DescribeDatasetRequest
      properties: {}
    DescribeDatastoreRequest:
      type: object
      title: DescribeDatastoreRequest
      properties: {}
    DescribeLoggingOptionsRequest:
      type: object
      title: DescribeLoggingOptionsRequest
      properties: {}
    LoggingOptions:
      type: object
      required:
        - roleArn
        - level
        - enabled
      properties:
        roleArn:
          $ref: '#/components/schemas/RoleArn'
          description: The ARN of the role that grants permission to AWS IoT Analytics to perform logging.
        level:
          $ref: '#/components/schemas/LoggingLevel'
          description: 'The logging level. Currently, only "ERROR" is supported.'
        enabled:
          $ref: '#/components/schemas/LoggingEnabled'
          description: 'If true, logging is enabled for AWS IoT Analytics.'
      description: Information about logging options.
    DescribePipelineRequest:
      type: object
      title: DescribePipelineRequest
      properties: {}
    Pipeline:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/PipelineName'
          description: The name of the pipeline.
        arn:
          $ref: '#/components/schemas/PipelineArn'
          description: The ARN of the pipeline.
        activities:
          $ref: '#/components/schemas/PipelineActivities'
          description: The activities that perform transformations on the messages.
        reprocessingSummaries:
          $ref: '#/components/schemas/ReprocessingSummaries'
          description: A summary of information about the pipeline reprocessing.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the pipeline was created.
        lastUpdateTime:
          $ref: '#/components/schemas/Timestamp'
          description: The last time the pipeline was updated.
      description: Contains information about a pipeline.
    DoubleValue:
      type: number
      format: double
    EndTime:
      type: string
      format: date-time
    SizeInBytes:
      type: number
      format: double
    FilterExpression:
      type: string
      minLength: 1
      maxLength: 256
    GetDatasetContentRequest:
      type: object
      title: GetDatasetContentRequest
      properties: {}
    GlueTableName:
      type: string
      minLength: 1
      maxLength: 150
      x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
    GlueDatabaseName:
      type: string
      minLength: 1
      maxLength: 150
      x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
    GlueConfiguration:
      type: object
      required:
        - tableName
        - databaseName
      properties:
        tableName:
          $ref: '#/components/schemas/GlueTableName'
          description: 'The name of the table in your AWS Glue Data Catalog which is used to perform the ETL (extract, transform and load) operations. (An AWS Glue Data Catalog table contains partitioned data and descriptions of data sources and targets.)'
        databaseName:
          $ref: '#/components/schemas/GlueDatabaseName'
          description: The name of the database in your AWS Glue Data Catalog in which the table is located. (An AWS Glue Data Catalog database contains Glue Data tables.)
      description: 'Configuration information for coordination with the AWS Glue ETL (extract, transform and load) service.'
    IotEventsInputName:
      type: string
      pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
      minLength: 1
      maxLength: 128
    LambdaName:
      type: string
      pattern: '^[a-zA-Z0-9_-]+$'
      minLength: 1
      maxLength: 64
    NextToken:
      type: string
    MaxResults:
      type: integer
      minimum: 1
      maximum: 250
    ListChannelsRequest:
      type: object
      title: ListChannelsRequest
      properties: {}
    ListDatasetContentsRequest:
      type: object
      title: ListDatasetContentsRequest
      properties: {}
    ListDatasetsRequest:
      type: object
      title: ListDatasetsRequest
      properties: {}
    ListDatastoresRequest:
      type: object
      title: ListDatastoresRequest
      properties: {}
    ListPipelinesRequest:
      type: object
      title: ListPipelinesRequest
      properties: {}
    PipelineSummaries:
      type: array
      items:
        $ref: '#/components/schemas/PipelineSummary'
    ResourceArn:
      type: string
      minLength: 20
      maxLength: 2048
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    LogResult:
      type: string
    MathExpression:
      type: string
      minLength: 1
      maxLength: 256
    MaxMessages:
      type: integer
      minimum: 1
      maximum: 10
    MessagePayloads:
      type: array
      items:
        $ref: '#/components/schemas/MessagePayload'
      minItems: 1
      maxItems: 10
    OutputFileName:
      type: string
      pattern: '[\w\.-]{1,255}'
    OutputFileUriValue:
      type: object
      required:
        - fileName
      properties:
        fileName:
          $ref: '#/components/schemas/OutputFileName'
          description: 'The URI of the location where data set contents are stored, usually the URI of a file in an S3 bucket.'
      description: The value of the variable as a structure that specifies an output file URI.
    ReprocessingSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ReprocessingSummary'
    PipelineSummary:
      type: object
      properties:
        pipelineName:
          $ref: '#/components/schemas/PipelineName'
          description: The name of the pipeline.
        reprocessingSummaries:
          $ref: '#/components/schemas/ReprocessingSummaries'
          description: A summary of information about the pipeline reprocessing.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the pipeline was created.
        lastUpdateTime:
          $ref: '#/components/schemas/Timestamp'
          description: When the pipeline was last updated.
      description: A summary of information about a pipeline.
    PutLoggingOptionsRequest:
      type: object
      required:
        - loggingOptions
      title: PutLoggingOptionsRequest
      properties:
        loggingOptions:
          $ref: '#/components/schemas/LoggingOptions'
          description: The new values of the AWS IoT Analytics logging options.
    QueryFilter:
      type: object
      properties:
        deltaTime:
          $ref: '#/components/schemas/DeltaTime'
          description: Used to limit data to that which has arrived since the last execution of the action.
      description: 'Information which is used to filter message data, to segregate it according to the time frame in which it arrives.'
    QueryFilters:
      type: array
      items:
        $ref: '#/components/schemas/QueryFilter'
      minItems: 0
      maxItems: 1
    ReprocessingStatus:
      type: string
      enum:
        - RUNNING
        - SUCCEEDED
        - CANCELLED
        - FAILED
    ReprocessingSummary:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ReprocessingId'
          description: The 'reprocessingId' returned by "StartPipelineReprocessing".
        status:
          $ref: '#/components/schemas/ReprocessingStatus'
          description: The status of the pipeline reprocessing.
        creationTime:
          $ref: '#/components/schemas/Timestamp'
          description: The time the pipeline reprocessing was created.
      description: Information about pipeline reprocessing.
    VolumeSizeInGB:
      type: integer
      minimum: 1
      maximum: 50
    RunPipelineActivityRequest:
      type: object
      required:
        - pipelineActivity
        - payloads
      title: RunPipelineActivityRequest
      properties:
        pipelineActivity:
          $ref: '#/components/schemas/PipelineActivity'
          description: 'The pipeline activity that is run. This must not be a ''channel'' activity or a ''datastore'' activity because these activities are used in a pipeline only to load the original message and to store the (possibly) transformed message. If a ''lambda'' activity is specified, only short-running Lambda functions (those with a timeout of less than 30 seconds or less) can be used.'
        payloads:
          $ref: '#/components/schemas/MessagePayloads'
          description: The sample message payloads on which the pipeline activity is run.
    StartTime:
      type: string
      format: date-time
    SampleChannelDataRequest:
      type: object
      title: SampleChannelDataRequest
      properties: {}
    ScheduleExpression:
      type: string
    SqlQuery:
      type: string
    StartPipelineReprocessingRequest:
      type: object
      title: StartPipelineReprocessingRequest
      properties:
        startTime:
          $ref: '#/components/schemas/StartTime'
          description: The start time (inclusive) of raw message data that is reprocessed.
        endTime:
          $ref: '#/components/schemas/EndTime'
          description: The end time (exclusive) of raw message data that is reprocessed.
    StringValue:
      type: string
      minLength: 0
      maxLength: 1024
    TagValue:
      type: string
      minLength: 1
      maxLength: 256
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 1
      maxItems: 50
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          $ref: '#/components/schemas/TagList'
          description: The new or modified tags for the resource.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateChannelRequest:
      type: object
      title: UpdateChannelRequest
      properties:
        channelStorage:
          $ref: '#/components/schemas/ChannelStorage'
          description: 'Where channel data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after creation of the channel.'
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: 'How long, in days, message data is kept for the channel. The retention period cannot be updated if the channel''s S3 storage is customer-managed.'
    UpdateDatasetRequest:
      type: object
      required:
        - actions
      title: UpdateDatasetRequest
      properties:
        actions:
          $ref: '#/components/schemas/DatasetActions'
          description: A list of "DatasetAction" objects.
        triggers:
          $ref: '#/components/schemas/DatasetTriggers'
          description: A list of "DatasetTrigger" objects. The list can be empty or can contain up to five <b>DataSetTrigger</b> objects.
        contentDeliveryRules:
          $ref: '#/components/schemas/DatasetContentDeliveryRules'
          description: When data set contents are created they are delivered to destinations specified here.
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: 'How long, in days, data set contents are kept for the data set.'
        versioningConfiguration:
          $ref: '#/components/schemas/VersioningConfiguration'
          description: '[Optional] How many versions of data set contents are kept. If not specified or set to null, only the latest version plus the latest succeeded version (if they are different) are kept for the time period specified by the "retentionPeriod" parameter. (For more information, see https://docs.aws.amazon.com/iotanalytics/latest/userguide/getting-started.html#aws-iot-analytics-dataset-versions)'
    UpdateDatastoreRequest:
      type: object
      title: UpdateDatastoreRequest
      properties:
        retentionPeriod:
          $ref: '#/components/schemas/RetentionPeriod'
          description: 'How long, in days, message data is kept for the data store. The retention period cannot be updated if the data store''s S3 storage is customer-managed.'
        datastoreStorage:
          $ref: '#/components/schemas/DatastoreStorage'
          description: 'Where data store data is stored. You may choose one of "serviceManagedS3" or "customerManagedS3" storage. If not specified, the default is "serviceManagedS3". This cannot be changed after the data store is created.'
    UpdatePipelineRequest:
      type: object
      required:
        - pipelineActivities
      title: UpdatePipelineRequest
      properties:
        pipelineActivities:
          $ref: '#/components/schemas/PipelineActivities'
          description: '<p>A list of "PipelineActivity" objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <b>PipelineActivity</b> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity, for example:</p> <p> <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]</code> </p>'
    VariableName:
      type: string
      minLength: 1
      maxLength: 256
    Variable:
      type: object
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/VariableName'
          description: The name of the variable.
        stringValue:
          $ref: '#/components/schemas/StringValue'
          description: The value of the variable as a string.
        doubleValue:
          $ref: '#/components/schemas/DoubleValue'
          description: The value of the variable as a double (numeric).
        datasetContentVersionValue:
          $ref: '#/components/schemas/DatasetContentVersionValue'
          description: The value of the variable as a structure that specifies a data set content version.
        outputFileUriValue:
          $ref: '#/components/schemas/OutputFileUriValue'
          description: The value of the variable as a structure that specifies an output file URI.
      description: 'An instance of a variable to be passed to the "containerAction" execution. Each variable must have a name and a value given by one of "stringValue", "datasetContentVersionValue", or "outputFileUriValue".'
security:
  - hmac: []
