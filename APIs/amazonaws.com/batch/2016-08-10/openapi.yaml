openapi: 3.0.0
info:
  version: '2016-08-10'
  x-release: v4
  title: AWS Batch
  description: '<p>AWS Batch enables you to run batch computing workloads on the AWS Cloud. Batch computing is a common way for developers, scientists, and engineers to access large amounts of compute resources, and AWS Batch removes the undifferentiated heavy lifting of configuring and managing the required infrastructure. AWS Batch will be familiar to users of traditional batch computing software. This service can efficiently provision resources in response to jobs submitted in order to eliminate capacity constraints, reduce compute costs, and deliver results quickly.</p> <p>As a fully managed service, AWS Batch enables developers, scientists, and engineers to run batch computing workloads of any scale. AWS Batch automatically provisions compute resources and optimizes the workload distribution based on the quantity and scale of the workloads. With AWS Batch, there is no need to install or manage batch computing software, which allows you to focus on analyzing results and solving problems. AWS Batch reduces operational complexities, saves time, and reduces costs, which makes it easy for developers, scientists, and engineers to run their batch jobs in the AWS Cloud.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: batch
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/batch-2016-08-10.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/batch/'
servers:
  - url: 'http://batch.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Batch multi-region endpoint
  - url: 'https://batch.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS Batch multi-region endpoint
  - url: 'http://batch.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Batch endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://batch.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS Batch endpoint for China (Beijing) and China (Ningxia)
paths:
  /v1/canceljob:
    post:
      operationId: CancelJob
      description: 'Cancels a job in an AWS Batch job queue. Jobs that are in the <code>SUBMITTED</code>, <code>PENDING</code>, or <code>RUNNABLE</code> state are cancelled. Jobs that have progressed to <code>STARTING</code> or <code>RUNNING</code> are not cancelled (but the API operation still succeeds, even if no job is cancelled); these jobs must be terminated with the <a>TerminateJob</a> operation.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelJobResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobId
                - reason
              properties:
                jobId:
                  description: The AWS Batch job ID of the job to cancel.
                  type: string
                reason:
                  description: A message to attach to the job that explains the reason for canceling it. This message is returned by future <a>DescribeJobs</a> operations on the job. This message is also recorded in the AWS Batch activity logs.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/createcomputeenvironment:
    post:
      operationId: CreateComputeEnvironment
      description: '<p>Creates an AWS Batch compute environment. You can create <code>MANAGED</code> or <code>UNMANAGED</code> compute environments.</p> <p>In a managed compute environment, AWS Batch manages the capacity and instance types of the compute resources within the environment. This is based on the compute resource specification that you define or the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch template</a> that you specify when you create the compute environment. You can choose to use Amazon EC2 On-Demand Instances or Spot Instances in your managed compute environment. You can optionally set a maximum price so that Spot Instances only launch when the Spot Instance price is below a specified percentage of the On-Demand price.</p> <note> <p>Multi-node parallel jobs are not supported on Spot Instances.</p> </note> <p>In an unmanaged compute environment, you can manage your own compute resources. This provides more compute resource configuration options, such as using a custom AMI, but you must ensure that your AMI meets the Amazon ECS container instance AMI specification. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container_instance_AMIs.html">Container Instance AMIs</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. After you have created your unmanaged compute environment, you can use the <a>DescribeComputeEnvironments</a> operation to find the Amazon ECS cluster that is associated with it. Then, manually launch your container instances into that Amazon ECS cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_container_instance.html">Launching an Amazon ECS Container Instance</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <note> <p>AWS Batch does not upgrade the AMIs in a compute environment after it is created (for example, when a newer version of the Amazon ECS-optimized AMI is available). You are responsible for the management of the guest operating system (including updates and security patches) and any additional application software or utilities that you install on the compute resources. To use a new AMI for your AWS Batch jobs:</p> <ol> <li> <p>Create a new compute environment with the new AMI.</p> </li> <li> <p>Add the compute environment to an existing job queue.</p> </li> <li> <p>Remove the old compute environment from your job queue.</p> </li> <li> <p>Delete the old compute environment.</p> </li> </ol> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateComputeEnvironmentResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - computeEnvironmentName
                - type
                - serviceRole
              properties:
                computeEnvironmentName:
                  description: 'The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.'
                  type: string
                type:
                  description: 'The type of the compute environment. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the <i>AWS Batch User Guide</i>.'
                  type: string
                  enum:
                    - MANAGED
                    - UNMANAGED
                state:
                  description: 'The state of the compute environment. If the state is <code>ENABLED</code>, then the compute environment accepts jobs from a queue and can scale out automatically based on queues.'
                  type: string
                  enum:
                    - ENABLED
                    - DISABLED
                computeResources:
                  description: An object representing an AWS Batch compute resource.
                  type: object
                  properties:
                    type:
                      $ref: '#/components/schemas/CRType'
                      description: 'The type of compute environment: <code>EC2</code> or <code>SPOT</code>.'
                    allocationStrategy:
                      $ref: '#/components/schemas/CRAllocationStrategy'
                      description: 'The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. This could be due to availability of the instance type in the region or <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 service limits</a>. If this is not specified, the default is <code>BEST_FIT</code>, which will use only the best fitting instance type, waiting for additional capacity if it''s not available. This allocation strategy keeps costs lower but can limit scaling. If you are using Spot Fleets with <code>BEST_FIT</code> then the Spot Fleet IAM Role must be specified. <code>BEST_FIT_PROGRESSIVE</code> will select additional instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types with a lower cost per vCPU. <code>SPOT_CAPACITY_OPTIMIZED</code> is only available for Spot Instance compute resources and will select additional instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types that are less likely to be interrupted. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html ">Allocation Strategies</a> in the <i>AWS Batch User Guide</i>.'
                    minvCpus:
                      $ref: '#/components/schemas/Integer'
                      description: The minimum number of Amazon EC2 vCPUs that an environment should maintain (even if the compute environment is <code>DISABLED</code>).
                    maxvCpus:
                      $ref: '#/components/schemas/Integer'
                      description: The maximum number of Amazon EC2 vCPUs that an environment can reach.
                    desiredvCpus:
                      $ref: '#/components/schemas/Integer'
                      description: The desired number of Amazon EC2 vCPUS in the compute environment.
                    instanceTypes:
                      $ref: '#/components/schemas/StringList'
                      description: 'The instances types that may be launched. You can specify instance families to launch any instance type within those families (for example, <code>c5</code> or <code>p3</code>), or you can specify specific sizes within a family (such as <code>c5.8xlarge</code>). You can also choose <code>optimal</code> to pick instance types (from the C, M, and R instance families) on the fly that match the demand of your job queues.'
                    imageId:
                      $ref: '#/components/schemas/String'
                      description: The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
                    subnets:
                      $ref: '#/components/schemas/StringList'
                      description: 'The VPC subnets into which the compute resources are launched. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">VPCs and Subnets</a> in the <i>Amazon VPC User Guide</i>.'
                    securityGroupIds:
                      $ref: '#/components/schemas/StringList'
                      description: 'The Amazon EC2 security groups associated with instances launched in the compute environment. One or more security groups must be specified, either in <code>securityGroupIds</code> or using a launch template referenced in <code>launchTemplate</code>. If security groups are specified using both <code>securityGroupIds</code> and <code>launchTemplate</code>, the values in <code>securityGroupIds</code> will be used.'
                    ec2KeyPair:
                      $ref: '#/components/schemas/String'
                      description: The Amazon EC2 key pair that is used for instances launched in the compute environment.
                    instanceRole:
                      $ref: '#/components/schemas/String'
                      description: 'The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example, <code> <i>ecsInstanceRole</i> </code> or <code>arn:aws:iam::<i>&lt;aws_account_id&gt;</i>:instance-profile/<i>ecsInstanceRole</i> </code>. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html">Amazon ECS Instance Role</a> in the <i>AWS Batch User Guide</i>.'
                    tags:
                      $ref: '#/components/schemas/TagsMap'
                      description: 'Key-value pair tags to be applied to resources that are launched in the compute environment. For AWS Batch, these take the form of "String1": "String2", where String1 is the tag key and String2 is the tag value—for example, { "Name": "AWS Batch Instance - C4OnDemand" }.'
                    placementGroup:
                      $ref: '#/components/schemas/String'
                      description: 'The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.'
                    bidPercentage:
                      $ref: '#/components/schemas/Integer'
                      description: 'The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, then the Spot price must be below 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. If you leave this field empty, the default value is 100% of the On-Demand price.'
                    spotIamFleetRole:
                      $ref: '#/components/schemas/String'
                      description: 'The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a <code>SPOT</code> compute environment. This role is required if the allocation strategy set to <code>BEST_FIT</code> or if the allocation strategy is not specified. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html">Amazon EC2 Spot Fleet Role</a> in the <i>AWS Batch User Guide</i>.'
                    launchTemplate:
                      $ref: '#/components/schemas/LaunchTemplateSpecification'
                      description: 'The launch template to use for your compute resources. Any other compute resource parameters that you specify in a <a>CreateComputeEnvironment</a> API operation override the same parameters in the launch template. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html">Launch Template Support</a> in the <i>AWS Batch User Guide</i>.'
                serviceRole:
                  description: '<p>The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.</p> <p>If your specified role has a path other than <code>/</code>, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path.</p> <note> <p>Depending on how you created your AWS Batch service role, its ARN may contain the <code>service-role</code> path prefix. When you only specify the name of the service role, AWS Batch assumes that your ARN does not use the <code>service-role</code> path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.</p> </note>'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/createjobqueue:
    post:
      operationId: CreateJobQueue
      description: '<p>Creates an AWS Batch job queue. When you create a job queue, you associate one or more compute environments to the queue and assign an order of preference for the compute environments.</p> <p>You also set a priority to the job queue that determines the order in which the AWS Batch scheduler places jobs onto its associated compute environments. For example, if a compute environment is associated with more than one job queue, the job queue with a higher priority is given preference for scheduling jobs to that compute environment.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateJobQueueResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobQueueName
                - priority
                - computeEnvironmentOrder
              properties:
                jobQueueName:
                  description: The name of the job queue.
                  type: string
                state:
                  description: 'The state of the job queue. If the job queue state is <code>ENABLED</code>, it is able to accept jobs.'
                  type: string
                  enum:
                    - ENABLED
                    - DISABLED
                priority:
                  description: 'The priority of the job queue. Job queues with a higher priority (or a higher integer value for the <code>priority</code> parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order, for example, a job queue with a priority value of <code>10</code> is given scheduling preference over a job queue with a priority value of <code>1</code>.'
                  type: integer
                computeEnvironmentOrder:
                  description: The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment should execute a given job. Compute environments must be in the <code>VALID</code> state before you can associate them with a job queue. You can associate up to three compute environments with a job queue.
                  type: array
                  items:
                    $ref: '#/components/schemas/ComputeEnvironmentOrder'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/deletecomputeenvironment:
    post:
      operationId: DeleteComputeEnvironment
      description: '<p>Deletes an AWS Batch compute environment.</p> <p>Before you can delete a compute environment, you must set its state to <code>DISABLED</code> with the <a>UpdateComputeEnvironment</a> API operation and disassociate it from any job queues with the <a>UpdateJobQueue</a> API operation.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteComputeEnvironmentResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - computeEnvironment
              properties:
                computeEnvironment:
                  description: The name or Amazon Resource Name (ARN) of the compute environment to delete.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/deletejobqueue:
    post:
      operationId: DeleteJobQueue
      description: <p>Deletes the specified job queue. You must first disable submissions for a queue with the <a>UpdateJobQueue</a> operation. All jobs in the queue are terminated when you delete a job queue.</p> <p>It is not necessary to disassociate compute environments from a queue before submitting a <code>DeleteJobQueue</code> request.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteJobQueueResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobQueue
              properties:
                jobQueue:
                  description: The short name or full Amazon Resource Name (ARN) of the queue to delete.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/deregisterjobdefinition:
    post:
      operationId: DeregisterJobDefinition
      description: Deregisters an AWS Batch job definition. Job definitions will be permanently deleted after 180 days.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeregisterJobDefinitionResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobDefinition
              properties:
                jobDefinition:
                  description: 'The name and revision (<code>name:revision</code>) or full Amazon Resource Name (ARN) of the job definition to deregister.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/describecomputeenvironments:
    post:
      operationId: DescribeComputeEnvironments
      description: '<p>Describes one or more of your compute environments.</p> <p>If you are using an unmanaged compute environment, you can use the <code>DescribeComputeEnvironment</code> operation to determine the <code>ecsClusterArn</code> that you should launch your Amazon ECS container instances into.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeComputeEnvironmentsResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                computeEnvironments:
                  description: A list of up to 100 compute environment names or full Amazon Resource Name (ARN) entries.
                  type: array
                  items:
                    $ref: '#/components/schemas/String'
                maxResults:
                  description: 'The maximum number of cluster results returned by <code>DescribeComputeEnvironments</code> in paginated output. When this parameter is used, <code>DescribeComputeEnvironments</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeComputeEnvironments</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeComputeEnvironments</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
                  type: integer
                nextToken:
                  description: <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeComputeEnvironments</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/describejobdefinitions:
    post:
      operationId: DescribeJobDefinitions
      description: Describes a list of job definitions. You can specify a <code>status</code> (such as <code>ACTIVE</code>) to only return job definitions that match that status.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeJobDefinitionsResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobDefinitions:
                  description: A list of up to 100 job definition names or full Amazon Resource Name (ARN) entries.
                  type: array
                  items:
                    $ref: '#/components/schemas/String'
                maxResults:
                  description: 'The maximum number of results returned by <code>DescribeJobDefinitions</code> in paginated output. When this parameter is used, <code>DescribeJobDefinitions</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeJobDefinitions</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeJobDefinitions</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
                  type: integer
                jobDefinitionName:
                  description: The name of the job definition to describe.
                  type: string
                status:
                  description: The status with which to filter job definitions.
                  type: string
                nextToken:
                  description: <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeJobDefinitions</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/describejobqueues:
    post:
      operationId: DescribeJobQueues
      description: Describes one or more of your job queues.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeJobQueuesResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobQueues:
                  description: A list of up to 100 queue names or full queue Amazon Resource Name (ARN) entries.
                  type: array
                  items:
                    $ref: '#/components/schemas/String'
                maxResults:
                  description: 'The maximum number of results returned by <code>DescribeJobQueues</code> in paginated output. When this parameter is used, <code>DescribeJobQueues</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeJobQueues</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeJobQueues</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
                  type: integer
                nextToken:
                  description: <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeJobQueues</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/describejobs:
    post:
      operationId: DescribeJobs
      description: Describes a list of AWS Batch jobs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeJobsResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobs
              properties:
                jobs:
                  description: A list of up to 100 job IDs.
                  type: array
                  items:
                    $ref: '#/components/schemas/String'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/listjobs:
    post:
      operationId: ListJobs
      description: '<p>Returns a list of AWS Batch jobs.</p> <p>You must specify only one of the following:</p> <ul> <li> <p>a job queue ID to return a list of jobs in that job queue</p> </li> <li> <p>a multi-node parallel job ID to return a list of that job''s nodes</p> </li> <li> <p>an array job ID to return a list of that job''s children</p> </li> </ul> <p>You can filter the results by job status with the <code>jobStatus</code> parameter. If you do not specify a status, only <code>RUNNING</code> jobs are returned.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListJobsResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobQueue:
                  description: The name or full Amazon Resource Name (ARN) of the job queue with which to list jobs.
                  type: string
                arrayJobId:
                  description: The job ID for an array job. Specifying an array job ID with this parameter lists all child jobs from within the specified array.
                  type: string
                multiNodeJobId:
                  description: The job ID for a multi-node parallel job. Specifying a multi-node parallel job ID with this parameter lists all nodes that are associated with the specified job.
                  type: string
                jobStatus:
                  description: 'The job status with which to filter jobs in the specified queue. If you do not specify a status, only <code>RUNNING</code> jobs are returned.'
                  type: string
                  enum:
                    - SUBMITTED
                    - PENDING
                    - RUNNABLE
                    - STARTING
                    - RUNNING
                    - SUCCEEDED
                    - FAILED
                maxResults:
                  description: 'The maximum number of results returned by <code>ListJobs</code> in paginated output. When this parameter is used, <code>ListJobs</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListJobs</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>ListJobs</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
                  type: integer
                nextToken:
                  description: <p>The <code>nextToken</code> value returned from a previous paginated <code>ListJobs</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/registerjobdefinition:
    post:
      operationId: RegisterJobDefinition
      description: Registers an AWS Batch job definition.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterJobDefinitionResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobDefinitionName
                - type
              properties:
                jobDefinitionName:
                  description: 'The name of the job definition to register. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.'
                  type: string
                type:
                  description: The type of job definition.
                  type: string
                  enum:
                    - container
                    - multinode
                parameters:
                  description: Default parameter substitution placeholders to set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                containerProperties:
                  description: Container properties are used in job definitions to describe the container that is launched as part of a job.
                  type: object
                  properties:
                    image:
                      $ref: '#/components/schemas/String'
                      description: '<p>The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with <code> <i>repository-url</i>/<i>image</i>:<i>tag</i> </code>. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to <code>Image</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>IMAGE</code> parameter of <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p> <ul> <li> <p>Images in Amazon ECR repositories use the full registry and repository URI (for example, <code>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;</code>).</p> </li> <li> <p>Images in official repositories on Docker Hub use a single name (for example, <code>ubuntu</code> or <code>mongo</code>).</p> </li> <li> <p>Images in other repositories on Docker Hub are qualified with an organization name (for example, <code>amazon/amazon-ecs-agent</code>).</p> </li> <li> <p>Images in other online repositories are qualified further by a domain name (for example, <code>quay.io/assemblyline/ubuntu</code>).</p> </li> </ul>'
                    vcpus:
                      $ref: '#/components/schemas/Integer'
                      description: 'The number of vCPUs reserved for the container. This parameter maps to <code>CpuShares</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--cpu-shares</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. Each vCPU is equivalent to 1,024 CPU shares. You must specify at least one vCPU.'
                    memory:
                      $ref: '#/components/schemas/Integer'
                      description: '<p>The hard limit (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. This parameter maps to <code>Memory</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--memory</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. You must specify at least 4 MiB of memory for a job.</p> <note> <p>If you are trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html">Memory Management</a> in the <i>AWS Batch User Guide</i>.</p> </note>'
                    command:
                      $ref: '#/components/schemas/StringList'
                      description: 'The command that is passed to the container. This parameter maps to <code>Cmd</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>COMMAND</code> parameter to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. For more information, see <a href="https://docs.docker.com/engine/reference/builder/#cmd">https://docs.docker.com/engine/reference/builder/#cmd</a>.'
                    jobRoleArn:
                      $ref: '#/components/schemas/String'
                      description: The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions.
                    volumes:
                      $ref: '#/components/schemas/Volumes'
                      description: A list of data volumes used in a job.
                    environment:
                      $ref: '#/components/schemas/EnvironmentVariables'
                      description: '<p>The environment variables to pass to a container. This parameter maps to <code>Env</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--env</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p> <important> <p>We do not recommend using plaintext environment variables for sensitive information, such as credential data.</p> </important> <note> <p>Environment variables must not start with <code>AWS_BATCH</code>; this naming convention is reserved for variables that are set by the AWS Batch service.</p> </note>'
                    mountPoints:
                      $ref: '#/components/schemas/MountPoints'
                      description: 'The mount points for data volumes in your container. This parameter maps to <code>Volumes</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--volume</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.'
                    readonlyRootFilesystem:
                      $ref: '#/components/schemas/Boolean'
                      description: 'When this parameter is true, the container is given read-only access to its root file system. This parameter maps to <code>ReadonlyRootfs</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--read-only</code> option to <code>docker run</code>.'
                    privileged:
                      $ref: '#/components/schemas/Boolean'
                      description: 'When this parameter is true, the container is given elevated privileges on the host container instance (similar to the <code>root</code> user). This parameter maps to <code>Privileged</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--privileged</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.'
                    ulimits:
                      $ref: '#/components/schemas/Ulimits'
                      description: 'A list of <code>ulimits</code> to set in the container. This parameter maps to <code>Ulimits</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--ulimit</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.'
                    user:
                      $ref: '#/components/schemas/String'
                      description: 'The user name to use inside the container. This parameter maps to <code>User</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--user</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.'
                    instanceType:
                      $ref: '#/components/schemas/String'
                      description: The instance type to use for a multi-node parallel job. Currently all node groups in a multi-node parallel job must use the same instance type. This parameter is not valid for single-node container jobs.
                    resourceRequirements:
                      $ref: '#/components/schemas/ResourceRequirements'
                      description: 'The type and amount of a resource to assign to a container. Currently, the only supported resource is <code>GPU</code>.'
                    linuxParameters:
                      $ref: '#/components/schemas/LinuxParameters'
                      description: 'Linux-specific modifications that are applied to the container, such as details for device mappings.'
                nodeProperties:
                  description: An object representing the node properties of a multi-node parallel job.
                  type: object
                  properties:
                    numNodes:
                      $ref: '#/components/schemas/Integer'
                      description: The number of nodes associated with a multi-node parallel job.
                    mainNode:
                      $ref: '#/components/schemas/Integer'
                      description: Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
                    nodeRangeProperties:
                      $ref: '#/components/schemas/NodeRangeProperties'
                      description: A list of node ranges and their properties associated with a multi-node parallel job.
                retryStrategy:
                  description: The retry strategy associated with a job.
                  type: object
                  properties:
                    attempts:
                      $ref: '#/components/schemas/Integer'
                      description: 'The number of times to move a job to the <code>RUNNABLE</code> status. You may specify between 1 and 10 attempts. If the value of <code>attempts</code> is greater than one, the job is retried on failure the same number of attempts as the value.'
                timeout:
                  description: An object representing a job timeout configuration.
                  type: object
                  properties:
                    attemptDurationSeconds:
                      $ref: '#/components/schemas/Integer'
                      description: The time duration in seconds (measured from the job attempt's <code>startedAt</code> timestamp) after which AWS Batch terminates your jobs if they have not finished.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/submitjob:
    post:
      operationId: SubmitJob
      description: Submits an AWS Batch job from a job definition. Parameters specified during <a>SubmitJob</a> override parameters defined in the job definition.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitJobResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobName
                - jobQueue
                - jobDefinition
              properties:
                jobName:
                  description: 'The name of the job. The first character must be alphanumeric, and up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.'
                  type: string
                jobQueue:
                  description: The job queue into which the job is submitted. You can specify either the name or the Amazon Resource Name (ARN) of the queue.
                  type: string
                arrayProperties:
                  description: An object representing an AWS Batch array job.
                  type: object
                  properties:
                    size:
                      $ref: '#/components/schemas/Integer'
                      description: The size of the array job.
                dependsOn:
                  description: 'A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a <code>SEQUENTIAL</code> type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an <code>N_TO_N</code> type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.'
                  type: array
                  items:
                    $ref: '#/components/schemas/JobDependency'
                jobDefinition:
                  description: 'The job definition used by this job. This value can be one of <code>name</code>, <code>name:revision</code>, or the Amazon Resource Name (ARN) for the job definition. If <code>name</code> is specified without a revision then the latest active revision is used.'
                  type: string
                parameters:
                  description: Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/String'
                containerOverrides:
                  description: The overrides that should be sent to a container.
                  type: object
                  properties:
                    vcpus:
                      $ref: '#/components/schemas/Integer'
                      description: The number of vCPUs to reserve for the container. This value overrides the value set in the job definition.
                    memory:
                      $ref: '#/components/schemas/Integer'
                      description: The number of MiB of memory reserved for the job. This value overrides the value set in the job definition.
                    command:
                      $ref: '#/components/schemas/StringList'
                      description: The command to send to the container that overrides the default command from the Docker image or the job definition.
                    instanceType:
                      $ref: '#/components/schemas/String'
                      description: The instance type to use for a multi-node parallel job. This parameter is not valid for single-node container jobs.
                    environment:
                      $ref: '#/components/schemas/EnvironmentVariables'
                      description: '<p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.</p> <note> <p>Environment variables must not start with <code>AWS_BATCH</code>; this naming convention is reserved for variables that are set by the AWS Batch service.</p> </note>'
                    resourceRequirements:
                      $ref: '#/components/schemas/ResourceRequirements'
                      description: 'The type and amount of a resource to assign to a container. This value overrides the value set in the job definition. Currently, the only supported resource is <code>GPU</code>.'
                nodeOverrides:
                  description: Object representing any node overrides to a job definition that is used in a <a>SubmitJob</a> API operation.
                  type: object
                  properties:
                    numNodes:
                      $ref: '#/components/schemas/Integer'
                      description: '<p>The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are specified in the job definition. To use this override:</p> <ul> <li> <p>There must be at least one node range in your job definition that has an open upper boundary (such as <code>:</code> or <code>n:</code>).</p> </li> <li> <p>The lower boundary of the node range specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li> <li> <p>The main node index specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li> </ul>'
                    nodePropertyOverrides:
                      $ref: '#/components/schemas/NodePropertyOverrides'
                      description: The node property overrides for the job.
                retryStrategy:
                  description: The retry strategy associated with a job.
                  type: object
                  properties:
                    attempts:
                      $ref: '#/components/schemas/Integer'
                      description: 'The number of times to move a job to the <code>RUNNABLE</code> status. You may specify between 1 and 10 attempts. If the value of <code>attempts</code> is greater than one, the job is retried on failure the same number of attempts as the value.'
                timeout:
                  description: An object representing a job timeout configuration.
                  type: object
                  properties:
                    attemptDurationSeconds:
                      $ref: '#/components/schemas/Integer'
                      description: The time duration in seconds (measured from the job attempt's <code>startedAt</code> timestamp) after which AWS Batch terminates your jobs if they have not finished.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/terminatejob:
    post:
      operationId: TerminateJob
      description: 'Terminates a job in a job queue. Jobs that are in the <code>STARTING</code> or <code>RUNNING</code> state are terminated, which causes them to transition to <code>FAILED</code>. Jobs that have not progressed to the <code>STARTING</code> state are cancelled.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TerminateJobResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobId
                - reason
              properties:
                jobId:
                  description: The AWS Batch job ID of the job to terminate.
                  type: string
                reason:
                  description: A message to attach to the job that explains the reason for canceling it. This message is returned by future <a>DescribeJobs</a> operations on the job. This message is also recorded in the AWS Batch activity logs.
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/updatecomputeenvironment:
    post:
      operationId: UpdateComputeEnvironment
      description: Updates an AWS Batch compute environment.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateComputeEnvironmentResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - computeEnvironment
              properties:
                computeEnvironment:
                  description: The name or full Amazon Resource Name (ARN) of the compute environment to update.
                  type: string
                state:
                  description: The state of the compute environment. Compute environments in the <code>ENABLED</code> state can accept jobs from a queue and scale in or out automatically based on the workload demand of its associated queues.
                  type: string
                  enum:
                    - ENABLED
                    - DISABLED
                computeResources:
                  description: An object representing the attributes of a compute environment that can be updated.
                  type: object
                  properties:
                    minvCpus:
                      $ref: '#/components/schemas/Integer'
                      description: The minimum number of Amazon EC2 vCPUs that an environment should maintain.
                    maxvCpus:
                      $ref: '#/components/schemas/Integer'
                      description: The maximum number of Amazon EC2 vCPUs that an environment can reach.
                    desiredvCpus:
                      $ref: '#/components/schemas/Integer'
                      description: The desired number of Amazon EC2 vCPUS in the compute environment.
                serviceRole:
                  description: '<p>The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.</p> <p>If your specified role has a path other than <code>/</code>, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path.</p> <note> <p>Depending on how you created your AWS Batch service role, its ARN may contain the <code>service-role</code> path prefix. When you only specify the name of the service role, AWS Batch assumes that your ARN does not use the <code>service-role</code> path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.</p> </note>'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /v1/updatejobqueue:
    post:
      operationId: UpdateJobQueue
      description: Updates a job queue.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateJobQueueResponse'
        '480':
          description: ClientException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientException'
        '481':
          description: ServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobQueue
              properties:
                jobQueue:
                  description: The name or the Amazon Resource Name (ARN) of the job queue.
                  type: string
                state:
                  description: Describes the queue's ability to accept new jobs.
                  type: string
                  enum:
                    - ENABLED
                    - DISABLED
                priority:
                  description: 'The priority of the job queue. Job queues with a higher priority (or a higher integer value for the <code>priority</code> parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order, for example, a job queue with a priority value of <code>10</code> is given scheduling preference over a job queue with a priority value of <code>1</code>.'
                  type: integer
                computeEnvironmentOrder:
                  description: Details the set of compute environments mapped to a job queue and their order relative to each other. This is one of the parameters used by the job scheduler to determine which compute environment should execute a given job.
                  type: array
                  items:
                    $ref: '#/components/schemas/ComputeEnvironmentOrder'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CancelJobResponse:
      type: object
      example: {}
      properties: {}
    ClientException: {}
    ServerException: {}
    CreateComputeEnvironmentResponse:
      type: object
      example:
        computeEnvironmentArn: 'arn:aws:batch:us-east-1:012345678910:compute-environment/M4Spot'
        computeEnvironmentName: M4Spot
      properties:
        computeEnvironmentName:
          $ref: '#/components/schemas/String'
          description: The name of the compute environment.
        computeEnvironmentArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the compute environment.
    CRType:
      type: string
      enum:
        - EC2
        - SPOT
    CRAllocationStrategy:
      type: string
      enum:
        - BEST_FIT
        - BEST_FIT_PROGRESSIVE
        - SPOT_CAPACITY_OPTIMIZED
    Integer:
      type: integer
    StringList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    String:
      type: string
    TagsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    LaunchTemplateSpecification:
      type: object
      properties:
        launchTemplateId:
          $ref: '#/components/schemas/String'
          description: The ID of the launch template.
        launchTemplateName:
          $ref: '#/components/schemas/String'
          description: The name of the launch template.
        version:
          $ref: '#/components/schemas/String'
          description: '<p>The version number of the launch template.</p> <p>Default: The default version of the launch template.</p>'
      description: 'An object representing a launch template associated with a compute resource. You must specify either the launch template ID or launch template name in the request, but not both.'
    CreateJobQueueResponse:
      type: object
      required:
        - jobQueueName
        - jobQueueArn
      example:
        jobQueueArn: 'arn:aws:batch:us-east-1:012345678910:job-queue/HighPriority'
        jobQueueName: HighPriority
      properties:
        jobQueueName:
          $ref: '#/components/schemas/String'
          description: The name of the job queue.
        jobQueueArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job queue.
    ComputeEnvironmentOrder:
      type: object
      required:
        - order
        - computeEnvironment
      properties:
        order:
          $ref: '#/components/schemas/Integer'
          description: The order of the compute environment.
        computeEnvironment:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the compute environment.
      description: 'The order in which compute environments are tried for job placement within a queue. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.'
    DeleteComputeEnvironmentResponse:
      type: object
      example: {}
      properties: {}
    DeleteJobQueueResponse:
      type: object
      example: {}
      properties: {}
    DeregisterJobDefinitionResponse:
      type: object
      example: {}
      properties: {}
    DescribeComputeEnvironmentsResponse:
      type: object
      example:
        computeEnvironments:
          - type: MANAGED
            computeEnvironmentArn: 'arn:aws:batch:us-east-1:012345678910:compute-environment/P2OnDemand'
            computeEnvironmentName: P2OnDemand
            computeResources:
              type: EC2
              desiredvCpus: 48
              ec2KeyPair: id_rsa
              instanceRole: ecsInstanceRole
              instanceTypes:
                - p2
              maxvCpus: 128
              minvCpus: 0
              securityGroupIds:
                - sg-cf5093b2
              subnets:
                - subnet-220c0e0a
                - subnet-1a95556d
                - subnet-978f6dce
              tags:
                Name: Batch Instance - P2OnDemand
            ecsClusterArn: 'arn:aws:ecs:us-east-1:012345678910:cluster/P2OnDemand_Batch_2c06f29d-d1fe-3a49-879d-42394c86effc'
            serviceRole: 'arn:aws:iam::012345678910:role/AWSBatchServiceRole'
            state: ENABLED
            status: VALID
            statusReason: ComputeEnvironment Healthy
      properties:
        computeEnvironments:
          $ref: '#/components/schemas/ComputeEnvironmentDetailList'
          description: The list of compute environments.
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>DescribeComputeEnvironments</code> request. When the results of a <code>DescribeJobDefinitions</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
    DescribeJobDefinitionsResponse:
      type: object
      example:
        jobDefinitions:
          - type: container
            containerProperties:
              command:
                - sleep
                - '60'
              environment: []
              image: busybox
              memory: 128
              mountPoints: []
              ulimits: []
              vcpus: 1
              volumes: []
            jobDefinitionArn: 'arn:aws:batch:us-east-1:012345678910:job-definition/sleep60:1'
            jobDefinitionName: sleep60
            revision: 1
            status: ACTIVE
      properties:
        jobDefinitions:
          $ref: '#/components/schemas/JobDefinitionList'
          description: The list of job definitions.
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>DescribeJobDefinitions</code> request. When the results of a <code>DescribeJobDefinitions</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
    DescribeJobQueuesResponse:
      type: object
      example:
        jobQueues:
          - computeEnvironmentOrder:
              - computeEnvironment: 'arn:aws:batch:us-east-1:012345678910:compute-environment/C4OnDemand'
                order: 1
            jobQueueArn: 'arn:aws:batch:us-east-1:012345678910:job-queue/HighPriority'
            jobQueueName: HighPriority
            priority: 1
            state: ENABLED
            status: VALID
            statusReason: JobQueue Healthy
      properties:
        jobQueues:
          $ref: '#/components/schemas/JobQueueDetailList'
          description: The list of job queues.
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>DescribeJobQueues</code> request. When the results of a <code>DescribeJobQueues</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
    DescribeJobsResponse:
      type: object
      example:
        jobs:
          - container:
              command:
                - sleep
                - '60'
              containerInstanceArn: 'arn:aws:ecs:us-east-1:012345678910:container-instance/5406d7cd-58bd-4b8f-9936-48d7c6b1526c'
              environment: []
              exitCode: 0
              image: busybox
              memory: 128
              mountPoints: []
              ulimits: []
              vcpus: 1
              volumes: []
            createdAt: 1480460782010
            dependsOn: []
            jobDefinition: sleep60
            jobId: 24fa2d7a-64c4-49d2-8b47-f8da4fbde8e9
            jobName: example
            jobQueue: 'arn:aws:batch:us-east-1:012345678910:job-queue/HighPriority'
            parameters: {}
            startedAt: 1480460816500
            status: SUCCEEDED
            stoppedAt: 1480460880699
      properties:
        jobs:
          $ref: '#/components/schemas/JobDetailList'
          description: The list of jobs.
    ListJobsResponse:
      type: object
      required:
        - jobSummaryList
      example:
        jobSummaryList:
          - jobId: 68f0c163-fbd4-44e6-9fd1-25b14a434786
            jobName: example
      properties:
        jobSummaryList:
          $ref: '#/components/schemas/JobSummaryList'
          description: A list of job summaries that match the request.
        nextToken:
          $ref: '#/components/schemas/String'
          description: 'The <code>nextToken</code> value to include in a future <code>ListJobs</code> request. When the results of a <code>ListJobs</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.'
    RegisterJobDefinitionResponse:
      type: object
      required:
        - jobDefinitionName
        - jobDefinitionArn
        - revision
      example:
        jobDefinitionArn: 'arn:aws:batch:us-east-1:012345678910:job-definition/sleep10:1'
        jobDefinitionName: sleep10
        revision: 1
      properties:
        jobDefinitionName:
          $ref: '#/components/schemas/String'
          description: The name of the job definition.
        jobDefinitionArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job definition.
        revision:
          $ref: '#/components/schemas/Integer'
          description: The revision of the job definition.
    Volumes:
      type: array
      items:
        $ref: '#/components/schemas/Volume'
    EnvironmentVariables:
      type: array
      items:
        $ref: '#/components/schemas/KeyValuePair'
    MountPoints:
      type: array
      items:
        $ref: '#/components/schemas/MountPoint'
    Boolean:
      type: boolean
    Ulimits:
      type: array
      items:
        $ref: '#/components/schemas/Ulimit'
    ResourceRequirements:
      type: array
      items:
        $ref: '#/components/schemas/ResourceRequirement'
    LinuxParameters:
      type: object
      properties:
        devices:
          $ref: '#/components/schemas/DevicesList'
          description: 'Any host devices to expose to the container. This parameter maps to <code>Devices</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--device</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.'
      description: 'Linux-specific modifications that are applied to the container, such as details for device mappings.'
    NodeRangeProperties:
      type: array
      items:
        $ref: '#/components/schemas/NodeRangeProperty'
    SubmitJobResponse:
      type: object
      required:
        - jobName
        - jobId
      example:
        jobId: 876da822-4198-45f2-a252-6cea32512ea8
        jobName: example
      properties:
        jobName:
          $ref: '#/components/schemas/String'
          description: The name of the job.
        jobId:
          $ref: '#/components/schemas/String'
          description: The unique identifier for the job.
    JobDependency:
      type: object
      properties:
        jobId:
          $ref: '#/components/schemas/String'
          description: The job ID of the AWS Batch job associated with this dependency.
        type:
          $ref: '#/components/schemas/ArrayJobDependency'
          description: The type of the job dependency.
      description: An object representing an AWS Batch job dependency.
    NodePropertyOverrides:
      type: array
      items:
        $ref: '#/components/schemas/NodePropertyOverride'
    TerminateJobResponse:
      type: object
      example: {}
      properties: {}
    UpdateComputeEnvironmentResponse:
      type: object
      example:
        computeEnvironmentArn: 'arn:aws:batch:us-east-1:012345678910:compute-environment/P2OnDemand'
        computeEnvironmentName: P2OnDemand
      properties:
        computeEnvironmentName:
          $ref: '#/components/schemas/String'
          description: The name of the compute environment.
        computeEnvironmentArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the compute environment.
    UpdateJobQueueResponse:
      type: object
      example:
        jobQueueArn: 'arn:aws:batch:us-east-1:012345678910:job-queue/GPGPU'
        jobQueueName: GPGPU
      properties:
        jobQueueName:
          $ref: '#/components/schemas/String'
          description: The name of the job queue.
        jobQueueArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job queue.
    ArrayJobDependency:
      type: string
      enum:
        - N_TO_N
        - SEQUENTIAL
    ArrayJobStatusSummary:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Integer'
    ArrayProperties:
      type: object
      properties:
        size:
          $ref: '#/components/schemas/Integer'
          description: The size of the array job.
      description: An object representing an AWS Batch array job.
    ArrayPropertiesDetail:
      type: object
      properties:
        statusSummary:
          $ref: '#/components/schemas/ArrayJobStatusSummary'
          description: A summary of the number of array job children in each available job status. This parameter is returned for parent array jobs.
        size:
          $ref: '#/components/schemas/Integer'
          description: The size of the array job. This parameter is returned for parent array jobs.
        index:
          $ref: '#/components/schemas/Integer'
          description: The job index within the array that is associated with this job. This parameter is returned for array job children.
      description: An object representing the array properties of a job.
    ArrayPropertiesSummary:
      type: object
      properties:
        size:
          $ref: '#/components/schemas/Integer'
          description: The size of the array job. This parameter is returned for parent array jobs.
        index:
          $ref: '#/components/schemas/Integer'
          description: The job index within the array that is associated with this job. This parameter is returned for children of array jobs.
      description: An object representing the array properties of a job.
    NetworkInterfaceList:
      type: array
      items:
        $ref: '#/components/schemas/NetworkInterface'
    AttemptContainerDetail:
      type: object
      properties:
        containerInstanceArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the Amazon ECS container instance that hosts the job attempt.
        taskArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the Amazon ECS task that is associated with the job attempt. Each container attempt receives a task ARN when they reach the <code>STARTING</code> status.
        exitCode:
          $ref: '#/components/schemas/Integer'
          description: The exit code for the job attempt. A non-zero exit code is considered a failure.
        reason:
          $ref: '#/components/schemas/String'
          description: A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
        logStreamName:
          $ref: '#/components/schemas/String'
          description: The name of the CloudWatch Logs log stream associated with the container. The log group for AWS Batch jobs is <code>/aws/batch/job</code>. Each container attempt receives a log stream name when they reach the <code>RUNNING</code> status.
        networkInterfaces:
          $ref: '#/components/schemas/NetworkInterfaceList'
          description: The network interfaces associated with the job attempt.
      description: An object representing the details of a container that is part of a job attempt.
    Long:
      type: integer
    AttemptDetail:
      type: object
      properties:
        container:
          $ref: '#/components/schemas/AttemptContainerDetail'
          description: Details about the container in this job attempt.
        startedAt:
          $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in seconds and milliseconds) for when the attempt was started (when the attempt transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).
        stoppedAt:
          $ref: '#/components/schemas/Long'
          description: 'The Unix timestamp (in seconds and milliseconds) for when the attempt was stopped (when the attempt transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).'
        statusReason:
          $ref: '#/components/schemas/String'
          description: 'A short, human-readable string to provide additional details about the current status of the job attempt.'
      description: An object representing a job attempt.
    AttemptDetails:
      type: array
      items:
        $ref: '#/components/schemas/AttemptDetail'
    CEState:
      type: string
      enum:
        - ENABLED
        - DISABLED
    CEStatus:
      type: string
      enum:
        - CREATING
        - UPDATING
        - DELETING
        - DELETED
        - VALID
        - INVALID
    CEType:
      type: string
      enum:
        - MANAGED
        - UNMANAGED
    CancelJobRequest:
      type: object
      required:
        - jobId
        - reason
      title: CancelJobRequest
      properties:
        jobId:
          $ref: '#/components/schemas/String'
          description: The AWS Batch job ID of the job to cancel.
        reason:
          $ref: '#/components/schemas/String'
          description: A message to attach to the job that explains the reason for canceling it. This message is returned by future <a>DescribeJobs</a> operations on the job. This message is also recorded in the AWS Batch activity logs.
    ComputeResource:
      type: object
      required:
        - type
        - minvCpus
        - maxvCpus
        - instanceTypes
        - subnets
        - instanceRole
      properties:
        type:
          $ref: '#/components/schemas/CRType'
          description: 'The type of compute environment: <code>EC2</code> or <code>SPOT</code>.'
        allocationStrategy:
          $ref: '#/components/schemas/CRAllocationStrategy'
          description: 'The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. This could be due to availability of the instance type in the region or <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 service limits</a>. If this is not specified, the default is <code>BEST_FIT</code>, which will use only the best fitting instance type, waiting for additional capacity if it''s not available. This allocation strategy keeps costs lower but can limit scaling. If you are using Spot Fleets with <code>BEST_FIT</code> then the Spot Fleet IAM Role must be specified. <code>BEST_FIT_PROGRESSIVE</code> will select additional instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types with a lower cost per vCPU. <code>SPOT_CAPACITY_OPTIMIZED</code> is only available for Spot Instance compute resources and will select additional instance types that are large enough to meet the requirements of the jobs in the queue, with a preference for instance types that are less likely to be interrupted. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html ">Allocation Strategies</a> in the <i>AWS Batch User Guide</i>.'
        minvCpus:
          $ref: '#/components/schemas/Integer'
          description: The minimum number of Amazon EC2 vCPUs that an environment should maintain (even if the compute environment is <code>DISABLED</code>).
        maxvCpus:
          $ref: '#/components/schemas/Integer'
          description: The maximum number of Amazon EC2 vCPUs that an environment can reach.
        desiredvCpus:
          $ref: '#/components/schemas/Integer'
          description: The desired number of Amazon EC2 vCPUS in the compute environment.
        instanceTypes:
          $ref: '#/components/schemas/StringList'
          description: 'The instances types that may be launched. You can specify instance families to launch any instance type within those families (for example, <code>c5</code> or <code>p3</code>), or you can specify specific sizes within a family (such as <code>c5.8xlarge</code>). You can also choose <code>optimal</code> to pick instance types (from the C, M, and R instance families) on the fly that match the demand of your job queues.'
        imageId:
          $ref: '#/components/schemas/String'
          description: The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
        subnets:
          $ref: '#/components/schemas/StringList'
          description: 'The VPC subnets into which the compute resources are launched. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">VPCs and Subnets</a> in the <i>Amazon VPC User Guide</i>.'
        securityGroupIds:
          $ref: '#/components/schemas/StringList'
          description: 'The Amazon EC2 security groups associated with instances launched in the compute environment. One or more security groups must be specified, either in <code>securityGroupIds</code> or using a launch template referenced in <code>launchTemplate</code>. If security groups are specified using both <code>securityGroupIds</code> and <code>launchTemplate</code>, the values in <code>securityGroupIds</code> will be used.'
        ec2KeyPair:
          $ref: '#/components/schemas/String'
          description: The Amazon EC2 key pair that is used for instances launched in the compute environment.
        instanceRole:
          $ref: '#/components/schemas/String'
          description: 'The Amazon ECS instance profile applied to Amazon EC2 instances in a compute environment. You can specify the short name or full Amazon Resource Name (ARN) of an instance profile. For example, <code> <i>ecsInstanceRole</i> </code> or <code>arn:aws:iam::<i>&lt;aws_account_id&gt;</i>:instance-profile/<i>ecsInstanceRole</i> </code>. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/instance_IAM_role.html">Amazon ECS Instance Role</a> in the <i>AWS Batch User Guide</i>.'
        tags:
          $ref: '#/components/schemas/TagsMap'
          description: 'Key-value pair tags to be applied to resources that are launched in the compute environment. For AWS Batch, these take the form of "String1": "String2", where String1 is the tag key and String2 is the tag value—for example, { "Name": "AWS Batch Instance - C4OnDemand" }.'
        placementGroup:
          $ref: '#/components/schemas/String'
          description: 'The Amazon EC2 placement group to associate with your compute resources. If you intend to submit multi-node parallel jobs to your compute environment, you should consider creating a cluster placement group and associate it with your compute resources. This keeps your multi-node parallel job on a logical grouping of instances within a single Availability Zone with high network flow potential. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.'
        bidPercentage:
          $ref: '#/components/schemas/Integer'
          description: 'The maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your maximum percentage is 20%, then the Spot price must be below 20% of the current On-Demand price for that Amazon EC2 instance. You always pay the lowest (market) price and never more than your maximum percentage. If you leave this field empty, the default value is 100% of the On-Demand price.'
        spotIamFleetRole:
          $ref: '#/components/schemas/String'
          description: 'The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a <code>SPOT</code> compute environment. This role is required if the allocation strategy set to <code>BEST_FIT</code> or if the allocation strategy is not specified. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/spot_fleet_IAM_role.html">Amazon EC2 Spot Fleet Role</a> in the <i>AWS Batch User Guide</i>.'
        launchTemplate:
          $ref: '#/components/schemas/LaunchTemplateSpecification'
          description: 'The launch template to use for your compute resources. Any other compute resource parameters that you specify in a <a>CreateComputeEnvironment</a> API operation override the same parameters in the launch template. You must specify either the launch template ID or launch template name in the request, but not both. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html">Launch Template Support</a> in the <i>AWS Batch User Guide</i>.'
      description: An object representing an AWS Batch compute resource.
    ComputeEnvironmentDetail:
      type: object
      required:
        - computeEnvironmentName
        - computeEnvironmentArn
        - ecsClusterArn
      properties:
        computeEnvironmentName:
          $ref: '#/components/schemas/String'
          description: The name of the compute environment.
        computeEnvironmentArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the compute environment.
        ecsClusterArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
        type:
          $ref: '#/components/schemas/CEType'
          description: The type of the compute environment.
        state:
          $ref: '#/components/schemas/CEState'
          description: '<p>The state of the compute environment. The valid values are <code>ENABLED</code> or <code>DISABLED</code>.</p> <p>If the state is <code>ENABLED</code>, then the AWS Batch scheduler can attempt to place jobs from an associated job queue on the compute resources within the environment. If the compute environment is managed, then it can scale its instances out or in automatically, based on the job queue demand.</p> <p>If the state is <code>DISABLED</code>, then the AWS Batch scheduler does not attempt to place jobs within the environment. Jobs in a <code>STARTING</code> or <code>RUNNING</code> state continue to progress normally. Managed compute environments in the <code>DISABLED</code> state do not scale out. However, they scale in to <code>minvCpus</code> value after instances become idle.</p>'
        status:
          $ref: '#/components/schemas/CEStatus'
          description: 'The current status of the compute environment (for example, <code>CREATING</code> or <code>VALID</code>).'
        statusReason:
          $ref: '#/components/schemas/String'
          description: 'A short, human-readable string to provide additional details about the current status of the compute environment.'
        computeResources:
          $ref: '#/components/schemas/ComputeResource'
          description: The compute resources defined for the compute environment.
        serviceRole:
          $ref: '#/components/schemas/String'
          description: The service role associated with the compute environment that allows AWS Batch to make calls to AWS API operations on your behalf.
      description: An object representing an AWS Batch compute environment.
    ComputeEnvironmentDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ComputeEnvironmentDetail'
    ComputeEnvironmentOrders:
      type: array
      items:
        $ref: '#/components/schemas/ComputeEnvironmentOrder'
    ComputeResourceUpdate:
      type: object
      properties:
        minvCpus:
          $ref: '#/components/schemas/Integer'
          description: The minimum number of Amazon EC2 vCPUs that an environment should maintain.
        maxvCpus:
          $ref: '#/components/schemas/Integer'
          description: The maximum number of Amazon EC2 vCPUs that an environment can reach.
        desiredvCpus:
          $ref: '#/components/schemas/Integer'
          description: The desired number of Amazon EC2 vCPUS in the compute environment.
      description: An object representing the attributes of a compute environment that can be updated.
    ContainerDetail:
      type: object
      properties:
        image:
          $ref: '#/components/schemas/String'
          description: The image used to start the container.
        vcpus:
          $ref: '#/components/schemas/Integer'
          description: The number of VCPUs allocated for the job.
        memory:
          $ref: '#/components/schemas/Integer'
          description: The number of MiB of memory reserved for the job.
        command:
          $ref: '#/components/schemas/StringList'
          description: The command that is passed to the container.
        jobRoleArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) associated with the job upon execution.
        volumes:
          $ref: '#/components/schemas/Volumes'
          description: A list of volumes associated with the job.
        environment:
          $ref: '#/components/schemas/EnvironmentVariables'
          description: <p>The environment variables to pass to a container.</p> <note> <p>Environment variables must not start with <code>AWS_BATCH</code>; this naming convention is reserved for variables that are set by the AWS Batch service.</p> </note>
        mountPoints:
          $ref: '#/components/schemas/MountPoints'
          description: The mount points for data volumes in your container.
        readonlyRootFilesystem:
          $ref: '#/components/schemas/Boolean'
          description: 'When this parameter is true, the container is given read-only access to its root file system.'
        ulimits:
          $ref: '#/components/schemas/Ulimits'
          description: A list of <code>ulimit</code> values to set in the container.
        privileged:
          $ref: '#/components/schemas/Boolean'
          description: 'When this parameter is true, the container is given elevated privileges on the host container instance (similar to the <code>root</code> user).'
        user:
          $ref: '#/components/schemas/String'
          description: The user name to use inside the container.
        exitCode:
          $ref: '#/components/schemas/Integer'
          description: The exit code to return upon completion.
        reason:
          $ref: '#/components/schemas/String'
          description: A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
        containerInstanceArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the container instance on which the container is running.
        taskArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the Amazon ECS task that is associated with the container job. Each container attempt receives a task ARN when they reach the <code>STARTING</code> status.
        logStreamName:
          $ref: '#/components/schemas/String'
          description: The name of the CloudWatch Logs log stream associated with the container. The log group for AWS Batch jobs is <code>/aws/batch/job</code>. Each container attempt receives a log stream name when they reach the <code>RUNNING</code> status.
        instanceType:
          $ref: '#/components/schemas/String'
          description: The instance type of the underlying host infrastructure of a multi-node parallel job.
        networkInterfaces:
          $ref: '#/components/schemas/NetworkInterfaceList'
          description: The network interfaces associated with the job.
        resourceRequirements:
          $ref: '#/components/schemas/ResourceRequirements'
          description: 'The type and amount of a resource to assign to a container. Currently, the only supported resource is <code>GPU</code>.'
        linuxParameters:
          $ref: '#/components/schemas/LinuxParameters'
          description: 'Linux-specific modifications that are applied to the container, such as details for device mappings.'
      description: An object representing the details of a container that is part of a job.
    ContainerOverrides:
      type: object
      properties:
        vcpus:
          $ref: '#/components/schemas/Integer'
          description: The number of vCPUs to reserve for the container. This value overrides the value set in the job definition.
        memory:
          $ref: '#/components/schemas/Integer'
          description: The number of MiB of memory reserved for the job. This value overrides the value set in the job definition.
        command:
          $ref: '#/components/schemas/StringList'
          description: The command to send to the container that overrides the default command from the Docker image or the job definition.
        instanceType:
          $ref: '#/components/schemas/String'
          description: The instance type to use for a multi-node parallel job. This parameter is not valid for single-node container jobs.
        environment:
          $ref: '#/components/schemas/EnvironmentVariables'
          description: '<p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the job definition.</p> <note> <p>Environment variables must not start with <code>AWS_BATCH</code>; this naming convention is reserved for variables that are set by the AWS Batch service.</p> </note>'
        resourceRequirements:
          $ref: '#/components/schemas/ResourceRequirements'
          description: 'The type and amount of a resource to assign to a container. This value overrides the value set in the job definition. Currently, the only supported resource is <code>GPU</code>.'
      description: The overrides that should be sent to a container.
    ContainerProperties:
      type: object
      properties:
        image:
          $ref: '#/components/schemas/String'
          description: '<p>The image used to start a container. This string is passed directly to the Docker daemon. Images in the Docker Hub registry are available by default. Other repositories are specified with <code> <i>repository-url</i>/<i>image</i>:<i>tag</i> </code>. Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to <code>Image</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>IMAGE</code> parameter of <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p> <ul> <li> <p>Images in Amazon ECR repositories use the full registry and repository URI (for example, <code>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;</code>).</p> </li> <li> <p>Images in official repositories on Docker Hub use a single name (for example, <code>ubuntu</code> or <code>mongo</code>).</p> </li> <li> <p>Images in other repositories on Docker Hub are qualified with an organization name (for example, <code>amazon/amazon-ecs-agent</code>).</p> </li> <li> <p>Images in other online repositories are qualified further by a domain name (for example, <code>quay.io/assemblyline/ubuntu</code>).</p> </li> </ul>'
        vcpus:
          $ref: '#/components/schemas/Integer'
          description: 'The number of vCPUs reserved for the container. This parameter maps to <code>CpuShares</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--cpu-shares</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. Each vCPU is equivalent to 1,024 CPU shares. You must specify at least one vCPU.'
        memory:
          $ref: '#/components/schemas/Integer'
          description: '<p>The hard limit (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. This parameter maps to <code>Memory</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--memory</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. You must specify at least 4 MiB of memory for a job.</p> <note> <p>If you are trying to maximize your resource utilization by providing your jobs as much memory as possible for a particular instance type, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/memory-management.html">Memory Management</a> in the <i>AWS Batch User Guide</i>.</p> </note>'
        command:
          $ref: '#/components/schemas/StringList'
          description: 'The command that is passed to the container. This parameter maps to <code>Cmd</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>COMMAND</code> parameter to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>. For more information, see <a href="https://docs.docker.com/engine/reference/builder/#cmd">https://docs.docker.com/engine/reference/builder/#cmd</a>.'
        jobRoleArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions.
        volumes:
          $ref: '#/components/schemas/Volumes'
          description: A list of data volumes used in a job.
        environment:
          $ref: '#/components/schemas/EnvironmentVariables'
          description: '<p>The environment variables to pass to a container. This parameter maps to <code>Env</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--env</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.</p> <important> <p>We do not recommend using plaintext environment variables for sensitive information, such as credential data.</p> </important> <note> <p>Environment variables must not start with <code>AWS_BATCH</code>; this naming convention is reserved for variables that are set by the AWS Batch service.</p> </note>'
        mountPoints:
          $ref: '#/components/schemas/MountPoints'
          description: 'The mount points for data volumes in your container. This parameter maps to <code>Volumes</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--volume</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.'
        readonlyRootFilesystem:
          $ref: '#/components/schemas/Boolean'
          description: 'When this parameter is true, the container is given read-only access to its root file system. This parameter maps to <code>ReadonlyRootfs</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--read-only</code> option to <code>docker run</code>.'
        privileged:
          $ref: '#/components/schemas/Boolean'
          description: 'When this parameter is true, the container is given elevated privileges on the host container instance (similar to the <code>root</code> user). This parameter maps to <code>Privileged</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--privileged</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.'
        ulimits:
          $ref: '#/components/schemas/Ulimits'
          description: 'A list of <code>ulimits</code> to set in the container. This parameter maps to <code>Ulimits</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--ulimit</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.'
        user:
          $ref: '#/components/schemas/String'
          description: 'The user name to use inside the container. This parameter maps to <code>User</code> in the <a href="https://docs.docker.com/engine/api/v1.23/#create-a-container">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.23/">Docker Remote API</a> and the <code>--user</code> option to <a href="https://docs.docker.com/engine/reference/run/">docker run</a>.'
        instanceType:
          $ref: '#/components/schemas/String'
          description: The instance type to use for a multi-node parallel job. Currently all node groups in a multi-node parallel job must use the same instance type. This parameter is not valid for single-node container jobs.
        resourceRequirements:
          $ref: '#/components/schemas/ResourceRequirements'
          description: 'The type and amount of a resource to assign to a container. Currently, the only supported resource is <code>GPU</code>.'
        linuxParameters:
          $ref: '#/components/schemas/LinuxParameters'
          description: 'Linux-specific modifications that are applied to the container, such as details for device mappings.'
      description: Container properties are used in job definitions to describe the container that is launched as part of a job.
    ContainerSummary:
      type: object
      properties:
        exitCode:
          $ref: '#/components/schemas/Integer'
          description: The exit code to return upon completion.
        reason:
          $ref: '#/components/schemas/String'
          description: A short (255 max characters) human-readable string to provide additional details about a running or stopped container.
      description: An object representing summary details of a container within a job.
    CreateComputeEnvironmentRequest:
      type: object
      required:
        - computeEnvironmentName
        - type
        - serviceRole
      title: CreateComputeEnvironmentRequest
      properties:
        computeEnvironmentName:
          $ref: '#/components/schemas/String'
          description: 'The name for your compute environment. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.'
        type:
          $ref: '#/components/schemas/CEType'
          description: 'The type of the compute environment. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the <i>AWS Batch User Guide</i>.'
        state:
          $ref: '#/components/schemas/CEState'
          description: 'The state of the compute environment. If the state is <code>ENABLED</code>, then the compute environment accepts jobs from a queue and can scale out automatically based on queues.'
        computeResources:
          $ref: '#/components/schemas/ComputeResource'
          description: 'Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/compute_environments.html">Compute Environments</a> in the <i>AWS Batch User Guide</i>.'
        serviceRole:
          $ref: '#/components/schemas/String'
          description: '<p>The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.</p> <p>If your specified role has a path other than <code>/</code>, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path.</p> <note> <p>Depending on how you created your AWS Batch service role, its ARN may contain the <code>service-role</code> path prefix. When you only specify the name of the service role, AWS Batch assumes that your ARN does not use the <code>service-role</code> path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.</p> </note>'
    JQState:
      type: string
      enum:
        - ENABLED
        - DISABLED
    CreateJobQueueRequest:
      type: object
      required:
        - jobQueueName
        - priority
        - computeEnvironmentOrder
      title: CreateJobQueueRequest
      properties:
        jobQueueName:
          $ref: '#/components/schemas/String'
          description: The name of the job queue.
        state:
          $ref: '#/components/schemas/JQState'
          description: 'The state of the job queue. If the job queue state is <code>ENABLED</code>, it is able to accept jobs.'
        priority:
          $ref: '#/components/schemas/Integer'
          description: 'The priority of the job queue. Job queues with a higher priority (or a higher integer value for the <code>priority</code> parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order, for example, a job queue with a priority value of <code>10</code> is given scheduling preference over a job queue with a priority value of <code>1</code>.'
        computeEnvironmentOrder:
          $ref: '#/components/schemas/ComputeEnvironmentOrders'
          description: The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment should execute a given job. Compute environments must be in the <code>VALID</code> state before you can associate them with a job queue. You can associate up to three compute environments with a job queue.
    DeleteComputeEnvironmentRequest:
      type: object
      required:
        - computeEnvironment
      title: DeleteComputeEnvironmentRequest
      properties:
        computeEnvironment:
          $ref: '#/components/schemas/String'
          description: The name or Amazon Resource Name (ARN) of the compute environment to delete.
    DeleteJobQueueRequest:
      type: object
      required:
        - jobQueue
      title: DeleteJobQueueRequest
      properties:
        jobQueue:
          $ref: '#/components/schemas/String'
          description: The short name or full Amazon Resource Name (ARN) of the queue to delete.
    DeregisterJobDefinitionRequest:
      type: object
      required:
        - jobDefinition
      title: DeregisterJobDefinitionRequest
      properties:
        jobDefinition:
          $ref: '#/components/schemas/String'
          description: 'The name and revision (<code>name:revision</code>) or full Amazon Resource Name (ARN) of the job definition to deregister.'
    DescribeComputeEnvironmentsRequest:
      type: object
      title: DescribeComputeEnvironmentsRequest
      properties:
        computeEnvironments:
          $ref: '#/components/schemas/StringList'
          description: A list of up to 100 compute environment names or full Amazon Resource Name (ARN) entries.
        maxResults:
          $ref: '#/components/schemas/Integer'
          description: 'The maximum number of cluster results returned by <code>DescribeComputeEnvironments</code> in paginated output. When this parameter is used, <code>DescribeComputeEnvironments</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeComputeEnvironments</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeComputeEnvironments</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
        nextToken:
          $ref: '#/components/schemas/String'
          description: <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeComputeEnvironments</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
    DescribeJobDefinitionsRequest:
      type: object
      title: DescribeJobDefinitionsRequest
      properties:
        jobDefinitions:
          $ref: '#/components/schemas/StringList'
          description: A list of up to 100 job definition names or full Amazon Resource Name (ARN) entries.
        maxResults:
          $ref: '#/components/schemas/Integer'
          description: 'The maximum number of results returned by <code>DescribeJobDefinitions</code> in paginated output. When this parameter is used, <code>DescribeJobDefinitions</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeJobDefinitions</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeJobDefinitions</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
        jobDefinitionName:
          $ref: '#/components/schemas/String'
          description: The name of the job definition to describe.
        status:
          $ref: '#/components/schemas/String'
          description: The status with which to filter job definitions.
        nextToken:
          $ref: '#/components/schemas/String'
          description: <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeJobDefinitions</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
    JobDefinitionList:
      type: array
      items:
        $ref: '#/components/schemas/JobDefinition'
    DescribeJobQueuesRequest:
      type: object
      title: DescribeJobQueuesRequest
      properties:
        jobQueues:
          $ref: '#/components/schemas/StringList'
          description: A list of up to 100 queue names or full queue Amazon Resource Name (ARN) entries.
        maxResults:
          $ref: '#/components/schemas/Integer'
          description: 'The maximum number of results returned by <code>DescribeJobQueues</code> in paginated output. When this parameter is used, <code>DescribeJobQueues</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeJobQueues</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>DescribeJobQueues</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
        nextToken:
          $ref: '#/components/schemas/String'
          description: <p>The <code>nextToken</code> value returned from a previous paginated <code>DescribeJobQueues</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
    JobQueueDetailList:
      type: array
      items:
        $ref: '#/components/schemas/JobQueueDetail'
    DescribeJobsRequest:
      type: object
      required:
        - jobs
      title: DescribeJobsRequest
      properties:
        jobs:
          $ref: '#/components/schemas/StringList'
          description: A list of up to 100 job IDs.
    JobDetailList:
      type: array
      items:
        $ref: '#/components/schemas/JobDetail'
    DeviceCgroupPermissions:
      type: array
      items:
        $ref: '#/components/schemas/DeviceCgroupPermission'
    Device:
      type: object
      required:
        - hostPath
      properties:
        hostPath:
          $ref: '#/components/schemas/String'
          description: The path for the device on the host container instance.
        containerPath:
          $ref: '#/components/schemas/String'
          description: The path inside the container at which to expose the host device. By default the <code>hostPath</code> value is used.
        permissions:
          $ref: '#/components/schemas/DeviceCgroupPermissions'
          description: 'The explicit permissions to provide to the container for the device. By default, the container has permissions for <code>read</code>, <code>write</code>, and <code>mknod</code> for the device.'
      description: An object representing a container instance host device.
    DeviceCgroupPermission:
      type: string
      enum:
        - READ
        - WRITE
        - MKNOD
    DevicesList:
      type: array
      items:
        $ref: '#/components/schemas/Device'
    KeyValuePair:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/String'
          description: 'The name of the key-value pair. For environment variables, this is the name of the environment variable.'
        value:
          $ref: '#/components/schemas/String'
          description: 'The value of the key-value pair. For environment variables, this is the value of the environment variable.'
      description: A key-value pair object.
    Host:
      type: object
      properties:
        sourcePath:
          $ref: '#/components/schemas/String'
          description: 'The path on the host container instance that is presented to the container. If this parameter is empty, then the Docker daemon has assigned a host path for you. If this parameter contains a file location, then the data volume persists at the specified location on the host container instance until you delete it manually. If the source path location does not exist on the host container instance, the Docker daemon creates it. If the location does exist, the contents of the source path folder are exported.'
      description: 'Determine whether your data volume persists on the host container instance and where it is stored. If this parameter is empty, then the Docker daemon assigns a host path for your data volume, but the data is not guaranteed to persist after the containers associated with it stop running.'
    JQStatus:
      type: string
      enum:
        - CREATING
        - UPDATING
        - DELETING
        - DELETED
        - VALID
        - INVALID
    ParametersMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    RetryStrategy:
      type: object
      properties:
        attempts:
          $ref: '#/components/schemas/Integer'
          description: 'The number of times to move a job to the <code>RUNNABLE</code> status. You may specify between 1 and 10 attempts. If the value of <code>attempts</code> is greater than one, the job is retried on failure the same number of attempts as the value.'
      description: The retry strategy associated with a job.
    JobTimeout:
      type: object
      properties:
        attemptDurationSeconds:
          $ref: '#/components/schemas/Integer'
          description: The time duration in seconds (measured from the job attempt's <code>startedAt</code> timestamp) after which AWS Batch terminates your jobs if they have not finished.
      description: An object representing a job timeout configuration.
    NodeProperties:
      type: object
      required:
        - numNodes
        - mainNode
        - nodeRangeProperties
      properties:
        numNodes:
          $ref: '#/components/schemas/Integer'
          description: The number of nodes associated with a multi-node parallel job.
        mainNode:
          $ref: '#/components/schemas/Integer'
          description: Specifies the node index for the main node of a multi-node parallel job. This node index value must be fewer than the number of nodes.
        nodeRangeProperties:
          $ref: '#/components/schemas/NodeRangeProperties'
          description: A list of node ranges and their properties associated with a multi-node parallel job.
      description: An object representing the node properties of a multi-node parallel job.
    JobDefinition:
      type: object
      required:
        - jobDefinitionName
        - jobDefinitionArn
        - revision
        - type
      properties:
        jobDefinitionName:
          $ref: '#/components/schemas/String'
          description: The name of the job definition.
        jobDefinitionArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) for the job definition.
        revision:
          $ref: '#/components/schemas/Integer'
          description: The revision of the job definition.
        status:
          $ref: '#/components/schemas/String'
          description: The status of the job definition.
        type:
          $ref: '#/components/schemas/String'
          description: The type of job definition.
        parameters:
          $ref: '#/components/schemas/ParametersMap'
          description: 'Default parameters or parameter substitution placeholders that are set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition. For more information about specifying parameters, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_definition_parameters.html">Job Definition Parameters</a> in the <i>AWS Batch User Guide</i>.'
        retryStrategy:
          $ref: '#/components/schemas/RetryStrategy'
          description: The retry strategy to use for failed jobs that are submitted with this job definition.
        containerProperties:
          $ref: '#/components/schemas/ContainerProperties'
          description: An object with various properties specific to container-based jobs.
        timeout:
          $ref: '#/components/schemas/JobTimeout'
          description: The timeout configuration for jobs that are submitted with this job definition. You can specify a timeout duration after which AWS Batch terminates your jobs if they have not finished.
        nodeProperties:
          $ref: '#/components/schemas/NodeProperties'
          description: An object with various properties specific to multi-node parallel jobs.
      description: An object representing an AWS Batch job definition.
    JobDefinitionType:
      type: string
      enum:
        - container
        - multinode
    JobDependencyList:
      type: array
      items:
        $ref: '#/components/schemas/JobDependency'
    JobStatus:
      type: string
      enum:
        - SUBMITTED
        - PENDING
        - RUNNABLE
        - STARTING
        - RUNNING
        - SUCCEEDED
        - FAILED
    NodeDetails:
      type: object
      properties:
        nodeIndex:
          $ref: '#/components/schemas/Integer'
          description: The node index for the node. Node index numbering begins at zero. This index is also available on the node with the <code>AWS_BATCH_JOB_NODE_INDEX</code> environment variable.
        isMainNode:
          $ref: '#/components/schemas/Boolean'
          description: Specifies whether the current node is the main node for a multi-node parallel job.
      description: An object representing the details of a multi-node parallel job node.
    JobDetail:
      type: object
      required:
        - jobName
        - jobId
        - jobQueue
        - status
        - startedAt
        - jobDefinition
      properties:
        jobName:
          $ref: '#/components/schemas/String'
          description: The name of the job.
        jobId:
          $ref: '#/components/schemas/String'
          description: The ID for the job.
        jobQueue:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job queue with which the job is associated.
        status:
          $ref: '#/components/schemas/JobStatus'
          description: '<p>The current status for the job.</p> <note> <p>If your jobs do not progress to <code>STARTING</code>, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/troubleshooting.html#job_stuck_in_runnable">Jobs Stuck in RUNNABLE Status</a> in the troubleshooting section of the <i>AWS Batch User Guide</i>.</p> </note>'
        attempts:
          $ref: '#/components/schemas/AttemptDetails'
          description: A list of job attempts associated with this job.
        statusReason:
          $ref: '#/components/schemas/String'
          description: 'A short, human-readable string to provide additional details about the current status of the job.'
        createdAt:
          $ref: '#/components/schemas/Long'
          description: 'The Unix timestamp (in seconds and milliseconds) for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the <code>SUBMITTED</code> state (at the time <a>SubmitJob</a> was called). For array child jobs, this is when the child job was spawned by its parent and entered the <code>PENDING</code> state.'
        retryStrategy:
          $ref: '#/components/schemas/RetryStrategy'
          description: The retry strategy to use for this job if an attempt fails.
        startedAt:
          $ref: '#/components/schemas/Long'
          description: The Unix timestamp (in seconds and milliseconds) for when the job was started (when the job transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).
        stoppedAt:
          $ref: '#/components/schemas/Long'
          description: 'The Unix timestamp (in seconds and milliseconds) for when the job was stopped (when the job transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).'
        dependsOn:
          $ref: '#/components/schemas/JobDependencyList'
          description: A list of job IDs on which this job depends.
        jobDefinition:
          $ref: '#/components/schemas/String'
          description: The job definition that is used by this job.
        parameters:
          $ref: '#/components/schemas/ParametersMap'
          description: Additional parameters passed to the job that replace parameter substitution placeholders or override any corresponding parameter defaults from the job definition.
        container:
          $ref: '#/components/schemas/ContainerDetail'
          description: An object representing the details of the container that is associated with the job.
        nodeDetails:
          $ref: '#/components/schemas/NodeDetails'
          description: An object representing the details of a node that is associated with a multi-node parallel job.
        nodeProperties:
          $ref: '#/components/schemas/NodeProperties'
          description: An object representing the node properties of a multi-node parallel job.
        arrayProperties:
          $ref: '#/components/schemas/ArrayPropertiesDetail'
          description: 'The array properties of the job, if it is an array job.'
        timeout:
          $ref: '#/components/schemas/JobTimeout'
          description: The timeout configuration for the job.
      description: An object representing an AWS Batch job.
    JobQueueDetail:
      type: object
      required:
        - jobQueueName
        - jobQueueArn
        - state
        - priority
        - computeEnvironmentOrder
      properties:
        jobQueueName:
          $ref: '#/components/schemas/String'
          description: The name of the job queue.
        jobQueueArn:
          $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the job queue.
        state:
          $ref: '#/components/schemas/JQState'
          description: Describes the ability of the queue to accept new jobs.
        status:
          $ref: '#/components/schemas/JQStatus'
          description: 'The status of the job queue (for example, <code>CREATING</code> or <code>VALID</code>).'
        statusReason:
          $ref: '#/components/schemas/String'
          description: 'A short, human-readable string to provide additional details about the current status of the job queue.'
        priority:
          $ref: '#/components/schemas/Integer'
          description: The priority of the job queue.
        computeEnvironmentOrder:
          $ref: '#/components/schemas/ComputeEnvironmentOrders'
          description: The compute environments that are attached to the job queue and the order in which job placement is preferred. Compute environments are selected for job placement in ascending order.
      description: An object representing the details of an AWS Batch job queue.
    NodePropertiesSummary:
      type: object
      properties:
        isMainNode:
          $ref: '#/components/schemas/Boolean'
          description: Specifies whether the current node is the main node for a multi-node parallel job.
        numNodes:
          $ref: '#/components/schemas/Integer'
          description: The number of nodes associated with a multi-node parallel job.
        nodeIndex:
          $ref: '#/components/schemas/Integer'
          description: The node index for the node. Node index numbering begins at zero. This index is also available on the node with the <code>AWS_BATCH_JOB_NODE_INDEX</code> environment variable.
      description: An object representing the properties of a node that is associated with a multi-node parallel job.
    JobSummary:
      type: object
      required:
        - jobId
        - jobName
      properties:
        jobId:
          $ref: '#/components/schemas/String'
          description: The ID of the job.
        jobName:
          $ref: '#/components/schemas/String'
          description: The name of the job.
        createdAt:
          $ref: '#/components/schemas/Long'
          description: 'The Unix timestamp for when the job was created. For non-array jobs and parent array jobs, this is when the job entered the <code>SUBMITTED</code> state (at the time <a>SubmitJob</a> was called). For array child jobs, this is when the child job was spawned by its parent and entered the <code>PENDING</code> state.'
        status:
          $ref: '#/components/schemas/JobStatus'
          description: The current status for the job.
        statusReason:
          $ref: '#/components/schemas/String'
          description: 'A short, human-readable string to provide additional details about the current status of the job.'
        startedAt:
          $ref: '#/components/schemas/Long'
          description: The Unix timestamp for when the job was started (when the job transitioned from the <code>STARTING</code> state to the <code>RUNNING</code> state).
        stoppedAt:
          $ref: '#/components/schemas/Long'
          description: 'The Unix timestamp for when the job was stopped (when the job transitioned from the <code>RUNNING</code> state to a terminal state, such as <code>SUCCEEDED</code> or <code>FAILED</code>).'
        container:
          $ref: '#/components/schemas/ContainerSummary'
          description: An object representing the details of the container that is associated with the job.
        arrayProperties:
          $ref: '#/components/schemas/ArrayPropertiesSummary'
          description: 'The array properties of the job, if it is an array job.'
        nodeProperties:
          $ref: '#/components/schemas/NodePropertiesSummary'
          description: The node properties for a single node in a job summary list.
      description: An object representing summary details of a job.
    JobSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/JobSummary'
    ListJobsRequest:
      type: object
      title: ListJobsRequest
      properties:
        jobQueue:
          $ref: '#/components/schemas/String'
          description: The name or full Amazon Resource Name (ARN) of the job queue with which to list jobs.
        arrayJobId:
          $ref: '#/components/schemas/String'
          description: The job ID for an array job. Specifying an array job ID with this parameter lists all child jobs from within the specified array.
        multiNodeJobId:
          $ref: '#/components/schemas/String'
          description: The job ID for a multi-node parallel job. Specifying a multi-node parallel job ID with this parameter lists all nodes that are associated with the specified job.
        jobStatus:
          $ref: '#/components/schemas/JobStatus'
          description: 'The job status with which to filter jobs in the specified queue. If you do not specify a status, only <code>RUNNING</code> jobs are returned.'
        maxResults:
          $ref: '#/components/schemas/Integer'
          description: 'The maximum number of results returned by <code>ListJobs</code> in paginated output. When this parameter is used, <code>ListJobs</code> only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListJobs</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is not used, then <code>ListJobs</code> returns up to 100 results and a <code>nextToken</code> value if applicable.'
        nextToken:
          $ref: '#/components/schemas/String'
          description: <p>The <code>nextToken</code> value returned from a previous paginated <code>ListJobs</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. This value is <code>null</code> when there are no more results to return.</p> <note> <p>This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
    MountPoint:
      type: object
      properties:
        containerPath:
          $ref: '#/components/schemas/String'
          description: The path on the container at which to mount the host volume.
        readOnly:
          $ref: '#/components/schemas/Boolean'
          description: 'If this value is <code>true</code>, the container has read-only access to the volume; otherwise, the container can write to the volume. The default value is <code>false</code>.'
        sourceVolume:
          $ref: '#/components/schemas/String'
          description: The name of the volume to mount.
      description: 'Details on a Docker volume mount point that is used in a job''s container properties. This parameter maps to <code>Volumes</code> in the <a href="https://docs.docker.com/engine/reference/api/docker_remote_api_v1.19/#create-a-container">Create a container</a> section of the Docker Remote API and the <code>--volume</code> option to docker run.'
    NetworkInterface:
      type: object
      properties:
        attachmentId:
          $ref: '#/components/schemas/String'
          description: The attachment ID for the network interface.
        ipv6Address:
          $ref: '#/components/schemas/String'
          description: The private IPv6 address for the network interface.
        privateIpv4Address:
          $ref: '#/components/schemas/String'
          description: The private IPv4 address for the network interface.
      description: An object representing the elastic network interface for a multi-node parallel job node.
    NodeOverrides:
      type: object
      properties:
        numNodes:
          $ref: '#/components/schemas/Integer'
          description: '<p>The number of nodes to use with a multi-node parallel job. This value overrides the number of nodes that are specified in the job definition. To use this override:</p> <ul> <li> <p>There must be at least one node range in your job definition that has an open upper boundary (such as <code>:</code> or <code>n:</code>).</p> </li> <li> <p>The lower boundary of the node range specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li> <li> <p>The main node index specified in the job definition must be fewer than the number of nodes specified in the override.</p> </li> </ul>'
        nodePropertyOverrides:
          $ref: '#/components/schemas/NodePropertyOverrides'
          description: The node property overrides for the job.
      description: Object representing any node overrides to a job definition that is used in a <a>SubmitJob</a> API operation.
    NodePropertyOverride:
      type: object
      required:
        - targetNodes
      properties:
        targetNodes:
          $ref: '#/components/schemas/String'
          description: 'The range of nodes, using node index values, with which to override. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range.'
        containerOverrides:
          $ref: '#/components/schemas/ContainerOverrides'
          description: The overrides that should be sent to a node range.
      description: Object representing any node overrides to a job definition that is used in a <a>SubmitJob</a> API operation.
    NodeRangeProperty:
      type: object
      required:
        - targetNodes
      properties:
        targetNodes:
          $ref: '#/components/schemas/String'
          description: 'The range of nodes, using node index values. A range of <code>0:3</code> indicates nodes with index values of <code>0</code> through <code>3</code>. If the starting range value is omitted (<code>:n</code>), then <code>0</code> is used to start the range. If the ending range value is omitted (<code>n:</code>), then the highest possible node index is used to end the range. Your accumulative node ranges must account for all nodes (0:n). You may nest node ranges, for example 0:10 and 4:5, in which case the 4:5 range properties override the 0:10 properties.'
        container:
          $ref: '#/components/schemas/ContainerProperties'
          description: The container details for the node range.
      description: An object representing the properties of the node range for a multi-node parallel job.
    RegisterJobDefinitionRequest:
      type: object
      required:
        - jobDefinitionName
        - type
      title: RegisterJobDefinitionRequest
      properties:
        jobDefinitionName:
          $ref: '#/components/schemas/String'
          description: 'The name of the job definition to register. Up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.'
        type:
          $ref: '#/components/schemas/JobDefinitionType'
          description: The type of job definition.
        parameters:
          $ref: '#/components/schemas/ParametersMap'
          description: Default parameter substitution placeholders to set in the job definition. Parameters are specified as a key-value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition.
        containerProperties:
          $ref: '#/components/schemas/ContainerProperties'
          description: 'An object with various properties specific to single-node container-based jobs. If the job definition''s <code>type</code> parameter is <code>container</code>, then you must specify either <code>containerProperties</code> or <code>nodeProperties</code>.'
        nodeProperties:
          $ref: '#/components/schemas/NodeProperties'
          description: 'An object with various properties specific to multi-node parallel jobs. If you specify node properties for a job, it becomes a multi-node parallel job. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/multi-node-parallel-jobs.html">Multi-node Parallel Jobs</a> in the <i>AWS Batch User Guide</i>. If the job definition''s <code>type</code> parameter is <code>container</code>, then you must specify either <code>containerProperties</code> or <code>nodeProperties</code>.'
        retryStrategy:
          $ref: '#/components/schemas/RetryStrategy'
          description: 'The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that is specified during a <a>SubmitJob</a> operation overrides the retry strategy defined here. If a job is terminated due to a timeout, it is not retried.'
        timeout:
          $ref: '#/components/schemas/JobTimeout'
          description: 'The timeout configuration for jobs that are submitted with this job definition, after which AWS Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it is not retried. The minimum value for the timeout is 60 seconds. Any timeout configuration that is specified during a <a>SubmitJob</a> operation overrides the timeout configuration defined here. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/job_timeouts.html">Job Timeouts</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.'
    ResourceType:
      type: string
      enum:
        - GPU
    ResourceRequirement:
      type: object
      required:
        - value
        - type
      properties:
        value:
          $ref: '#/components/schemas/String'
          description: The number of physical GPUs to reserve for the container. The number of GPUs reserved for all containers in a job should not exceed the number of available GPUs on the compute resource that the job is launched on.
        type:
          $ref: '#/components/schemas/ResourceType'
          description: 'The type of resource to assign to a container. Currently, the only supported resource type is <code>GPU</code>.'
      description: 'The type and amount of a resource to assign to a container. Currently, the only supported resource type is <code>GPU</code>.'
    SubmitJobRequest:
      type: object
      required:
        - jobName
        - jobQueue
        - jobDefinition
      title: SubmitJobRequest
      properties:
        jobName:
          $ref: '#/components/schemas/String'
          description: 'The name of the job. The first character must be alphanumeric, and up to 128 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed.'
        jobQueue:
          $ref: '#/components/schemas/String'
          description: The job queue into which the job is submitted. You can specify either the name or the Amazon Resource Name (ARN) of the queue.
        arrayProperties:
          $ref: '#/components/schemas/ArrayProperties'
          description: 'The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/array_jobs.html">Array Jobs</a> in the <i>AWS Batch User Guide</i>.'
        dependsOn:
          $ref: '#/components/schemas/JobDependencyList'
          description: 'A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a <code>SEQUENTIAL</code> type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an <code>N_TO_N</code> type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.'
        jobDefinition:
          $ref: '#/components/schemas/String'
          description: 'The job definition used by this job. This value can be one of <code>name</code>, <code>name:revision</code>, or the Amazon Resource Name (ARN) for the job definition. If <code>name</code> is specified without a revision then the latest active revision is used.'
        parameters:
          $ref: '#/components/schemas/ParametersMap'
          description: Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters in a <code>SubmitJob</code> request override any corresponding parameter defaults from the job definition.
        containerOverrides:
          $ref: '#/components/schemas/ContainerOverrides'
          description: A list of container overrides in JSON format that specify the name of a container in the specified job definition and the overrides it should receive. You can override the default command for a container (that is specified in the job definition or the Docker image) with a <code>command</code> override. You can also override existing environment variables (that are specified in the job definition or Docker image) on a container or add new environment variables to it with an <code>environment</code> override.
        nodeOverrides:
          $ref: '#/components/schemas/NodeOverrides'
          description: A list of node overrides in JSON format that specify the node range to target and the container overrides for that node range.
        retryStrategy:
          $ref: '#/components/schemas/RetryStrategy'
          description: 'The retry strategy to use for failed jobs from this <a>SubmitJob</a> operation. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.'
        timeout:
          $ref: '#/components/schemas/JobTimeout'
          description: 'The timeout configuration for this <a>SubmitJob</a> operation. You can specify a timeout duration after which AWS Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it is not retried. The minimum value for the timeout is 60 seconds. This configuration overrides any timeout configuration specified in the job definition. For array jobs, child jobs have the same timeout configuration as the parent job. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/job_timeouts.html">Job Timeouts</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.'
    TerminateJobRequest:
      type: object
      required:
        - jobId
        - reason
      title: TerminateJobRequest
      properties:
        jobId:
          $ref: '#/components/schemas/String'
          description: The AWS Batch job ID of the job to terminate.
        reason:
          $ref: '#/components/schemas/String'
          description: A message to attach to the job that explains the reason for canceling it. This message is returned by future <a>DescribeJobs</a> operations on the job. This message is also recorded in the AWS Batch activity logs.
    Ulimit:
      type: object
      required:
        - hardLimit
        - name
        - softLimit
      properties:
        hardLimit:
          $ref: '#/components/schemas/Integer'
          description: The hard limit for the <code>ulimit</code> type.
        name:
          $ref: '#/components/schemas/String'
          description: The <code>type</code> of the <code>ulimit</code>.
        softLimit:
          $ref: '#/components/schemas/Integer'
          description: The soft limit for the <code>ulimit</code> type.
      description: The <code>ulimit</code> settings to pass to the container.
    UpdateComputeEnvironmentRequest:
      type: object
      required:
        - computeEnvironment
      title: UpdateComputeEnvironmentRequest
      properties:
        computeEnvironment:
          $ref: '#/components/schemas/String'
          description: The name or full Amazon Resource Name (ARN) of the compute environment to update.
        state:
          $ref: '#/components/schemas/CEState'
          description: The state of the compute environment. Compute environments in the <code>ENABLED</code> state can accept jobs from a queue and scale in or out automatically based on the workload demand of its associated queues.
        computeResources:
          $ref: '#/components/schemas/ComputeResourceUpdate'
          description: Details of the compute resources managed by the compute environment. Required for a managed compute environment.
        serviceRole:
          $ref: '#/components/schemas/String'
          description: '<p>The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.</p> <p>If your specified role has a path other than <code>/</code>, then you must either specify the full role ARN (this is recommended) or prefix the role name with the path.</p> <note> <p>Depending on how you created your AWS Batch service role, its ARN may contain the <code>service-role</code> path prefix. When you only specify the name of the service role, AWS Batch assumes that your ARN does not use the <code>service-role</code> path prefix. Because of this, we recommend that you specify the full ARN of your service role when you create compute environments.</p> </note>'
    UpdateJobQueueRequest:
      type: object
      required:
        - jobQueue
      title: UpdateJobQueueRequest
      properties:
        jobQueue:
          $ref: '#/components/schemas/String'
          description: The name or the Amazon Resource Name (ARN) of the job queue.
        state:
          $ref: '#/components/schemas/JQState'
          description: Describes the queue's ability to accept new jobs.
        priority:
          $ref: '#/components/schemas/Integer'
          description: 'The priority of the job queue. Job queues with a higher priority (or a higher integer value for the <code>priority</code> parameter) are evaluated first when associated with the same compute environment. Priority is determined in descending order, for example, a job queue with a priority value of <code>10</code> is given scheduling preference over a job queue with a priority value of <code>1</code>.'
        computeEnvironmentOrder:
          $ref: '#/components/schemas/ComputeEnvironmentOrders'
          description: Details the set of compute environments mapped to a job queue and their order relative to each other. This is one of the parameters used by the job scheduler to determine which compute environment should execute a given job.
    Volume:
      type: object
      properties:
        host:
          $ref: '#/components/schemas/Host'
          description: 'The contents of the <code>host</code> parameter determine whether your data volume persists on the host container instance and where it is stored. If the host parameter is empty, then the Docker daemon assigns a host path for your data volume. However, the data is not guaranteed to persist after the containers associated with it stop running.'
        name:
          $ref: '#/components/schemas/String'
          description: 'The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, hyphens, and underscores are allowed. This name is referenced in the <code>sourceVolume</code> parameter of container definition <code>mountPoints</code>.'
      description: A data volume used in a job's container properties.
security:
  - hmac: []
